
NFC_Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e670  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800e910  0800e910  0000f910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec18  0800ec18  0000fc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ec20  0800ec20  0000fc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ec24  0800ec24  0000fc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800ec28  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800ec94  0001006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800ecf4  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  2400012c  0800ed54  0001012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000fd8  0800ed54  00010fd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030dd9  00000000  00000000  0001015a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c23  00000000  00000000  00040f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002498  00000000  00000000  00045b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c85  00000000  00000000  00047ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042858  00000000  00000000  00049c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000306df  00000000  00000000  0008c4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f84a  00000000  00000000  000bcbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025c3f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aadc  00000000  00000000  0025c43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00266f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e8f8 	.word	0x0800e8f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0800e8f8 	.word	0x0800e8f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <stringToHexArray.0>:
	//////////////////////////////////////////////////
	char inputText[17] = "VIN je zakon";
	//////////////////////////////////////////////////

	uint8_t text[16] = {0x00};
	void stringToHexArray(const char *input, uint8_t *output, size_t length){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	f8c7 c000 	str.w	ip, [r7]
	    size_t i;
	    for(i = 0; i < length && i < strlen(input); i++){
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e00a      	b.n	80006ac <stringToHexArray.0+0x2c>
	        output[i] = input[i];
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	441a      	add	r2, r3
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	440b      	add	r3, r1
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	701a      	strb	r2, [r3, #0]
	    for(i = 0; i < length && i < strlen(input); i++){
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d20f      	bcs.n	80006d4 <stringToHexArray.0+0x54>
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fe13 	bl	80002e0 <strlen>
 80006ba:	4602      	mov	r2, r0
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	4293      	cmp	r3, r2
 80006c0:	d3e9      	bcc.n	8000696 <stringToHexArray.0+0x16>
	    }
	    for(; i < length; i++){
 80006c2:	e007      	b.n	80006d4 <stringToHexArray.0+0x54>
	        output[i] = 0x00;
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
	    for(; i < length; i++){
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f3      	bcc.n	80006c4 <stringToHexArray.0+0x44>
	    }
	}
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <main>:
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b0da      	sub	sp, #360	@ 0x168
 80006ec:	af02      	add	r7, sp, #8
int main(void)
 80006ee:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80006f2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	int32_t uid_len = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
	uint8_t key_a[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80006fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000700:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000704:	4ac9      	ldr	r2, [pc, #804]	@ (8000a2c <main+0x344>)
 8000706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	3304      	adds	r3, #4
 800070e:	8019      	strh	r1, [r3, #0]
	uint32_t pn532_error = PN532_ERROR_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	char inputText[17] = "VIN je zakon";
 8000716:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800071a:	f5a3 759c 	sub.w	r5, r3, #312	@ 0x138
 800071e:	4bc4      	ldr	r3, [pc, #784]	@ (8000a30 <main+0x348>)
 8000720:	462c      	mov	r4, r5
 8000722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000724:	c407      	stmia	r4!, {r0, r1, r2}
 8000726:	7023      	strb	r3, [r4, #0]
 8000728:	f105 030d 	add.w	r3, r5, #13
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
	uint8_t text[16] = {0x00};
 8000730:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000734:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	3304      	adds	r3, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f003 f999 	bl	8003a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f9c7 	bl	8000adc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800074e:	f000 fa47 	bl	8000be0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 ffe9 	bl	8001728 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000756:	f000 fa73 	bl	8000c40 <MX_ADC1_Init>
  MX_ADC2_Init();
 800075a:	f000 fae7 	bl	8000d2c <MX_ADC2_Init>
  MX_ADC3_Init();
 800075e:	f000 fb49 	bl	8000df4 <MX_ADC3_Init>
  MX_ETH_Init();
 8000762:	f000 fba9 	bl	8000eb8 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000766:	f000 fbf3 	bl	8000f50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800076a:	f000 fc55 	bl	8001018 <MX_FDCAN2_Init>
  MX_FMC_Init();
 800076e:	f000 ff8d 	bl	800168c <MX_FMC_Init>
  MX_LTDC_Init();
 8000772:	f000 fcf5 	bl	8001160 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000776:	f000 fda5 	bl	80012c4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800077a:	f000 fdcf 	bl	800131c <MX_RTC_Init>
  MX_SAI2_Init();
 800077e:	f000 fdf5 	bl	800136c <MX_SAI2_Init>
  //MX_SDMMC1_MMC_Init();
  MX_SPI2_Init();
 8000782:	f000 feb1 	bl	80014e8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000786:	f000 ff03 	bl	8001590 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078a:	f000 ff4d 	bl	8001628 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 800078e:	f000 fca7 	bl	80010e0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

    snprintf(SendBuffer, BUFSIZE, "Init\r\n");
 8000792:	4aa8      	ldr	r2, [pc, #672]	@ (8000a34 <main+0x34c>)
 8000794:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000798:	48a7      	ldr	r0, [pc, #668]	@ (8000a38 <main+0x350>)
 800079a:	f00d f867 	bl	800d86c <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 800079e:	48a6      	ldr	r0, [pc, #664]	@ (8000a38 <main+0x350>)
 80007a0:	f7ff fd9e 	bl	80002e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	2364      	movs	r3, #100	@ 0x64
 80007aa:	49a3      	ldr	r1, [pc, #652]	@ (8000a38 <main+0x350>)
 80007ac:	48a3      	ldr	r0, [pc, #652]	@ (8000a3c <main+0x354>)
 80007ae:	f00b faa0 	bl	800bcf2 <HAL_UART_Transmit>

    PN532 pn532;
    PN532_I2C_Init(&pn532);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 ff01 	bl	80025bc <PN532_I2C_Init>
    PN532_GetFirmwareVersion(&pn532, buff);
 80007ba:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80007be:	463b      	mov	r3, r7
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fc6c 	bl	80020a0 <PN532_GetFirmwareVersion>
    if(PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK){
 80007c8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80007cc:	463b      	mov	r3, r7
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fc65 	bl	80020a0 <PN532_GetFirmwareVersion>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d131      	bne.n	8000840 <main+0x158>
        snprintf(SendBuffer, BUFSIZE, "Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 80007dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80007e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	461a      	mov	r2, r3
 80007e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80007ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007f0:	789b      	ldrb	r3, [r3, #2]
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	4613      	mov	r3, r2
 80007f6:	4a92      	ldr	r2, [pc, #584]	@ (8000a40 <main+0x358>)
 80007f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007fc:	488e      	ldr	r0, [pc, #568]	@ (8000a38 <main+0x350>)
 80007fe:	f00d f835 	bl	800d86c <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000802:	488d      	ldr	r0, [pc, #564]	@ (8000a38 <main+0x350>)
 8000804:	f7ff fd6c 	bl	80002e0 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	498a      	ldr	r1, [pc, #552]	@ (8000a38 <main+0x350>)
 8000810:	488a      	ldr	r0, [pc, #552]	@ (8000a3c <main+0x354>)
 8000812:	f00b fa6e 	bl	800bcf2 <HAL_UART_Transmit>
    }
    else{
        return -1;
    }
    PN532_SamConfiguration(&pn532);
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fc65 	bl	80020e8 <PN532_SamConfiguration>
    snprintf(SendBuffer, BUFSIZE, "Waiting for RFID/NFC card...\r\n");
 800081e:	4a89      	ldr	r2, [pc, #548]	@ (8000a44 <main+0x35c>)
 8000820:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000824:	4884      	ldr	r0, [pc, #528]	@ (8000a38 <main+0x350>)
 8000826:	f00d f821 	bl	800d86c <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 800082a:	4883      	ldr	r0, [pc, #524]	@ (8000a38 <main+0x350>)
 800082c:	f7ff fd58 	bl	80002e0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	2364      	movs	r3, #100	@ 0x64
 8000836:	4980      	ldr	r1, [pc, #512]	@ (8000a38 <main+0x350>)
 8000838:	4880      	ldr	r0, [pc, #512]	@ (8000a3c <main+0x354>)
 800083a:	f00b fa5a 	bl	800bcf2 <HAL_UART_Transmit>
 800083e:	e002      	b.n	8000846 <main+0x15e>
        return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	e13d      	b.n	8000ac2 <main+0x3da>
    /* USER CODE BEGIN WHILE */
    while (1) {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
      uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000846:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800084a:	4638      	mov	r0, r7
 800084c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000850:	2200      	movs	r2, #0
 8000852:	f001 fc6b 	bl	800212c <PN532_ReadPassiveTarget>
 8000856:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
      if(uid_len == PN532_STATUS_ERROR){
 800085a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000862:	d110      	bne.n	8000886 <main+0x19e>
          snprintf(SendBuffer, BUFSIZE, ".");
 8000864:	4a78      	ldr	r2, [pc, #480]	@ (8000a48 <main+0x360>)
 8000866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800086a:	4873      	ldr	r0, [pc, #460]	@ (8000a38 <main+0x350>)
 800086c:	f00c fffe 	bl	800d86c <sniprintf>
          HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000870:	4871      	ldr	r0, [pc, #452]	@ (8000a38 <main+0x350>)
 8000872:	f7ff fd35 	bl	80002e0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	2364      	movs	r3, #100	@ 0x64
 800087c:	496e      	ldr	r1, [pc, #440]	@ (8000a38 <main+0x350>)
 800087e:	486f      	ldr	r0, [pc, #444]	@ (8000a3c <main+0x354>)
 8000880:	f00b fa37 	bl	800bcf2 <HAL_UART_Transmit>
 8000884:	e7df      	b.n	8000846 <main+0x15e>
      }
      else{
          snprintf(SendBuffer, BUFSIZE, "Found card with UID: ");
 8000886:	4a71      	ldr	r2, [pc, #452]	@ (8000a4c <main+0x364>)
 8000888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088c:	486a      	ldr	r0, [pc, #424]	@ (8000a38 <main+0x350>)
 800088e:	f00c ffed 	bl	800d86c <sniprintf>
          HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000892:	4869      	ldr	r0, [pc, #420]	@ (8000a38 <main+0x350>)
 8000894:	f7ff fd24 	bl	80002e0 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	4966      	ldr	r1, [pc, #408]	@ (8000a38 <main+0x350>)
 80008a0:	4866      	ldr	r0, [pc, #408]	@ (8000a3c <main+0x354>)
 80008a2:	f00b fa26 	bl	800bcf2 <HAL_UART_Transmit>

          for(uint8_t i = 0; i < uid_len; i++){
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 80008ac:	e01b      	b.n	80008e6 <main+0x1fe>
              snprintf(SendBuffer, BUFSIZE, "%02x ", uid[i]);
 80008ae:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80008b2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80008b6:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	4a64      	ldr	r2, [pc, #400]	@ (8000a50 <main+0x368>)
 80008be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c2:	485d      	ldr	r0, [pc, #372]	@ (8000a38 <main+0x350>)
 80008c4:	f00c ffd2 	bl	800d86c <sniprintf>
              HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80008c8:	485b      	ldr	r0, [pc, #364]	@ (8000a38 <main+0x350>)
 80008ca:	f7ff fd09 	bl	80002e0 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	2364      	movs	r3, #100	@ 0x64
 80008d4:	4958      	ldr	r1, [pc, #352]	@ (8000a38 <main+0x350>)
 80008d6:	4859      	ldr	r0, [pc, #356]	@ (8000a3c <main+0x354>)
 80008d8:	f00b fa0b 	bl	800bcf2 <HAL_UART_Transmit>
          for(uint8_t i = 0; i < uid_len; i++){
 80008dc:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80008e0:	3301      	adds	r3, #1
 80008e2:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
 80008e6:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 80008ea:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dcdd      	bgt.n	80008ae <main+0x1c6>
          }
          snprintf(SendBuffer, BUFSIZE, "\r\n");
 80008f2:	4a58      	ldr	r2, [pc, #352]	@ (8000a54 <main+0x36c>)
 80008f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f8:	484f      	ldr	r0, [pc, #316]	@ (8000a38 <main+0x350>)
 80008fa:	f00c ffb7 	bl	800d86c <sniprintf>
          HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80008fe:	484e      	ldr	r0, [pc, #312]	@ (8000a38 <main+0x350>)
 8000900:	f7ff fcee 	bl	80002e0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	494b      	ldr	r1, [pc, #300]	@ (8000a38 <main+0x350>)
 800090c:	484b      	ldr	r0, [pc, #300]	@ (8000a3c <main+0x354>)
 800090e:	f00b f9f0 	bl	800bcf2 <HAL_UART_Transmit>
          break;
 8000912:	bf00      	nop
      }
    }

    // Convertaj v hex za shranjevanje
    stringToHexArray(inputText, text, sizeof(text));
 8000914:	f107 0118 	add.w	r1, r7, #24
 8000918:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8000920:	4694      	mov	ip, r2
 8000922:	2210      	movs	r2, #16
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff feab 	bl	8000680 <stringToHexArray.0>

    pn532_error = PN532_MifareClassicAuthenticateBlock(&pn532, uid, uid_len, 6, MIFARE_CMD_AUTH_A, key_a);
 800092a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800092e:	b2da      	uxtb	r2, r3
 8000930:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000934:	4638      	mov	r0, r7
 8000936:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2360      	movs	r3, #96	@ 0x60
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2306      	movs	r3, #6
 8000942:	f001 fc4d 	bl	80021e0 <PN532_MifareClassicAuthenticateBlock>
 8000946:	4603      	mov	r3, r0
 8000948:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    if(pn532_error){
 800094c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000950:	2b00      	cmp	r3, #0
 8000952:	d014      	beq.n	800097e <main+0x296>
        snprintf(SendBuffer, BUFSIZE, "Error: 0x%02x\r\n", pn532_error);
 8000954:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000958:	4a3f      	ldr	r2, [pc, #252]	@ (8000a58 <main+0x370>)
 800095a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095e:	4836      	ldr	r0, [pc, #216]	@ (8000a38 <main+0x350>)
 8000960:	f00c ff84 	bl	800d86c <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000964:	4834      	ldr	r0, [pc, #208]	@ (8000a38 <main+0x350>)
 8000966:	f7ff fcbb 	bl	80002e0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	2364      	movs	r3, #100	@ 0x64
 8000970:	4931      	ldr	r1, [pc, #196]	@ (8000a38 <main+0x350>)
 8000972:	4832      	ldr	r0, [pc, #200]	@ (8000a3c <main+0x354>)
 8000974:	f00b f9bd 	bl	800bcf2 <HAL_UART_Transmit>
        return -1;
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	e0a1      	b.n	8000ac2 <main+0x3da>
    }

    pn532_error = PN532_MifareClassicWriteBlock(&pn532, text, 6);
 800097e:	f107 0118 	add.w	r1, r7, #24
 8000982:	463b      	mov	r3, r7
 8000984:	2206      	movs	r2, #6
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fcce 	bl	8002328 <PN532_MifareClassicWriteBlock>
 800098c:	4603      	mov	r3, r0
 800098e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    if(pn532_error){
 8000992:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000996:	2b00      	cmp	r3, #0
 8000998:	d014      	beq.n	80009c4 <main+0x2dc>
        snprintf(SendBuffer, BUFSIZE, "Error: 0x%02x\r\n", pn532_error);
 800099a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <main+0x370>)
 80009a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a4:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <main+0x350>)
 80009a6:	f00c ff61 	bl	800d86c <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80009aa:	4823      	ldr	r0, [pc, #140]	@ (8000a38 <main+0x350>)
 80009ac:	f7ff fc98 	bl	80002e0 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	2364      	movs	r3, #100	@ 0x64
 80009b6:	4920      	ldr	r1, [pc, #128]	@ (8000a38 <main+0x350>)
 80009b8:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <main+0x354>)
 80009ba:	f00b f99a 	bl	800bcf2 <HAL_UART_Transmit>
        return -1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e07e      	b.n	8000ac2 <main+0x3da>
    }

    for(uint8_t i = 0; i < 16; i++){
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 80009ca:	e00c      	b.n	80009e6 <main+0x2fe>
        buff[i] = 0x00;
 80009cc:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 80009d0:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80009d4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80009d8:	2100      	movs	r1, #0
 80009da:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 16; i++){
 80009dc:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 80009e0:	3301      	adds	r3, #1
 80009e2:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
 80009e6:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d9ee      	bls.n	80009cc <main+0x2e4>
    }
    pn532_error = PN532_MifareClassicReadBlock(&pn532, buff, 6);
 80009ee:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80009f2:	463b      	mov	r3, r7
 80009f4:	2206      	movs	r2, #6
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fc53 	bl	80022a2 <PN532_MifareClassicReadBlock>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    snprintf(SendBuffer, BUFSIZE, "Data read back: ");
 8000a02:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <main+0x374>)
 8000a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <main+0x350>)
 8000a0a:	f00c ff2f 	bl	800d86c <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <main+0x350>)
 8000a10:	f7ff fc66 	bl	80002e0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	4907      	ldr	r1, [pc, #28]	@ (8000a38 <main+0x350>)
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <main+0x354>)
 8000a1e:	f00b f968 	bl	800bcf2 <HAL_UART_Transmit>

    for(uint8_t i = 0; i < 16; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8000a28:	e036      	b.n	8000a98 <main+0x3b0>
 8000a2a:	bf00      	nop
 8000a2c:	0800e9b0 	.word	0x0800e9b0
 8000a30:	0800e9b8 	.word	0x0800e9b8
 8000a34:	0800e910 	.word	0x0800e910
 8000a38:	24000d6c 	.word	0x24000d6c
 8000a3c:	240007c0 	.word	0x240007c0
 8000a40:	0800e918 	.word	0x0800e918
 8000a44:	0800e944 	.word	0x0800e944
 8000a48:	0800e964 	.word	0x0800e964
 8000a4c:	0800e968 	.word	0x0800e968
 8000a50:	0800e980 	.word	0x0800e980
 8000a54:	0800e988 	.word	0x0800e988
 8000a58:	0800e98c 	.word	0x0800e98c
 8000a5c:	0800e99c 	.word	0x0800e99c
        snprintf(SendBuffer, BUFSIZE, "%02x ", buff[i]);
 8000a60:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8000a64:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000a68:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	4a17      	ldr	r2, [pc, #92]	@ (8000acc <main+0x3e4>)
 8000a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a74:	4816      	ldr	r0, [pc, #88]	@ (8000ad0 <main+0x3e8>)
 8000a76:	f00c fef9 	bl	800d86c <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a7a:	4815      	ldr	r0, [pc, #84]	@ (8000ad0 <main+0x3e8>)
 8000a7c:	f7ff fc30 	bl	80002e0 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	2364      	movs	r3, #100	@ 0x64
 8000a86:	4912      	ldr	r1, [pc, #72]	@ (8000ad0 <main+0x3e8>)
 8000a88:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <main+0x3ec>)
 8000a8a:	f00b f932 	bl	800bcf2 <HAL_UART_Transmit>
    for(uint8_t i = 0; i < 16; i++){
 8000a8e:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8000a92:	3301      	adds	r3, #1
 8000a94:	f887 315d 	strb.w	r3, [r7, #349]	@ 0x15d
 8000a98:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d9df      	bls.n	8000a60 <main+0x378>
    }
    snprintf(SendBuffer, BUFSIZE, "\r\n");
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <main+0x3f0>)
 8000aa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa6:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <main+0x3e8>)
 8000aa8:	f00c fee0 	bl	800d86c <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <main+0x3e8>)
 8000aae:	f7ff fc17 	bl	80002e0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	2364      	movs	r3, #100	@ 0x64
 8000ab8:	4905      	ldr	r1, [pc, #20]	@ (8000ad0 <main+0x3e8>)
 8000aba:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <main+0x3ec>)
 8000abc:	f00b f919 	bl	800bcf2 <HAL_UART_Transmit>
 8000ac0:	2300      	movs	r3, #0

    /* USER CODE END 3 */
  }
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bdb0      	pop	{r4, r5, r7, pc}
 8000acc:	0800e980 	.word	0x0800e980
 8000ad0:	24000d6c 	.word	0x24000d6c
 8000ad4:	240007c0 	.word	0x240007c0
 8000ad8:	0800e988 	.word	0x0800e988

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09c      	sub	sp, #112	@ 0x70
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	224c      	movs	r2, #76	@ 0x4c
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f00c ff35 	bl	800d95a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00c ff2f 	bl	800d95a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000afc:	2002      	movs	r0, #2
 8000afe:	f006 fd49 	bl	8007594 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b34      	ldr	r3, [pc, #208]	@ (8000bd8 <SystemClock_Config+0xfc>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0a:	4a33      	ldr	r2, [pc, #204]	@ (8000bd8 <SystemClock_Config+0xfc>)
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b12:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <SystemClock_Config+0xfc>)
 8000b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <SystemClock_Config+0x100>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b24:	4a2d      	ldr	r2, [pc, #180]	@ (8000bdc <SystemClock_Config+0x100>)
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <SystemClock_Config+0x100>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b38:	bf00      	nop
 8000b3a:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <SystemClock_Config+0x100>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b46:	d1f8      	bne.n	8000b3a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b48:	230b      	movs	r3, #11
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	2302      	movs	r3, #2
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000b66:	2316      	movs	r3, #22
 8000b68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000b6a:	23a9      	movs	r3, #169	@ 0xa9
 8000b6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b72:	2304      	movs	r3, #4
 8000b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f006 fe06 	bl	800779c <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b96:	f000 ff85 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	233f      	movs	r3, #63	@ 0x3f
 8000b9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 fa46 	bl	8008050 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bca:	f000 ff6b 	bl	8001aa4 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3770      	adds	r7, #112	@ 0x70
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58000400 	.word	0x58000400
 8000bdc:	58024800 	.word	0x58024800

08000be0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0b0      	sub	sp, #192	@ 0xc0
 8000be4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	22c0      	movs	r2, #192	@ 0xc0
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00c feb4 	bl	800d95a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c02:	230c      	movs	r3, #12
 8000c04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000c06:	2305      	movs	r3, #5
 8000c08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c12:	23c0      	movs	r3, #192	@ 0xc0
 8000c14:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c16:	2320      	movs	r3, #32
 8000c18:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4618      	mov	r0, r3
 8000c28:	f007 fd9e 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c32:	f000 ff37 	bl	8001aa4 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	37c0      	adds	r7, #192	@ 0xc0
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c66:	4a30      	ldr	r2, [pc, #192]	@ (8000d28 <MX_ADC1_Init+0xe8>)
 8000c68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c70:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c76:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7c:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c82:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c94:	4b23      	ldr	r3, [pc, #140]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc0:	4818      	ldr	r0, [pc, #96]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000cc2:	f003 f953 	bl	8003f6c <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f000 feea 	bl	8001aa4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000cdc:	f003 ff76 	bl	8004bcc <HAL_ADCEx_MultiModeConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ce6:	f000 fedd 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cea:	2301      	movs	r3, #1
 8000cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000d0e:	f003 facf 	bl	80042b0 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d18:	f000 fec4 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	@ 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000180 	.word	0x24000180
 8000d28:	40022000 	.word	0x40022000

08000d2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d46:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <MX_ADC2_Init+0xc4>)
 8000d48:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d4a:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d50:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000da2:	f003 f8e3 	bl	8003f6c <HAL_ADC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000dac:	f000 fe7a 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000db0:	2301      	movs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_ADC2_Init+0xc0>)
 8000dd4:	f003 fa6c 	bl	80042b0 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000dde:	f000 fe61 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240001e4 	.word	0x240001e4
 8000df0:	40022100 	.word	0x40022100

08000df4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e0e:	4a28      	ldr	r2, [pc, #160]	@ (8000eb0 <MX_ADC3_Init+0xbc>)
 8000e10:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e62:	4812      	ldr	r0, [pc, #72]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e64:	f003 f882 	bl	8003f6c <HAL_ADC_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000e6e:	f000 fe19 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <MX_ADC3_Init+0xc0>)
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e76:	2306      	movs	r3, #6
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e82:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e84:	2304      	movs	r3, #4
 8000e86:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_ADC3_Init+0xb8>)
 8000e96:	f003 fa0b 	bl	80042b0 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000ea0:	f000 fe00 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	24000248 	.word	0x24000248
 8000eb0:	58026000 	.word	0x58026000
 8000eb4:	1d500080 	.word	0x1d500080

08000eb8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <MX_ETH_Init+0x84>)
 8000ec0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000ed0:	22e1      	movs	r2, #225	@ 0xe1
 8000ed2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000ee8:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <MX_ETH_Init+0x88>)
 8000eea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000ef4:	4a13      	ldr	r2, [pc, #76]	@ (8000f44 <MX_ETH_Init+0x8c>)
 8000ef6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_ETH_Init+0x90>)
 8000efc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000f00:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f04:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f06:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <MX_ETH_Init+0x80>)
 8000f08:	f004 f822 	bl	8004f50 <HAL_ETH_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f12:	f000 fdc7 	bl	8001aa4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f16:	2238      	movs	r2, #56	@ 0x38
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <MX_ETH_Init+0x94>)
 8000f1c:	f00c fd1d 	bl	800d95a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <MX_ETH_Init+0x94>)
 8000f22:	2221      	movs	r2, #33	@ 0x21
 8000f24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_ETH_Init+0x94>)
 8000f28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <MX_ETH_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	240002ac 	.word	0x240002ac
 8000f3c:	40028000 	.word	0x40028000
 8000f40:	24000e6c 	.word	0x24000e6c
 8000f44:	240000cc 	.word	0x240000cc
 8000f48:	2400006c 	.word	0x2400006c
 8000f4c:	24000148 	.word	0x24000148

08000f50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f56:	4a2f      	ldr	r2, [pc, #188]	@ (8001014 <MX_FDCAN1_Init+0xc4>)
 8000f58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_FDCAN1_Init+0xc0>)
 8000ffe:	f004 fbdb 	bl	80057b8 <HAL_FDCAN_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001008:	f000 fd4c 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2400035c 	.word	0x2400035c
 8001014:	4000a000 	.word	0x4000a000

08001018 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800101c:	4b2e      	ldr	r3, [pc, #184]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800101e:	4a2f      	ldr	r2, [pc, #188]	@ (80010dc <MX_FDCAN2_Init+0xc4>)
 8001020:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001028:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800102e:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001030:	2200      	movs	r2, #0
 8001032:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001034:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800103c:	2200      	movs	r2, #0
 800103e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001040:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001042:	2210      	movs	r2, #16
 8001044:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800104e:	2202      	movs	r2, #2
 8001050:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001054:	2202      	movs	r2, #2
 8001056:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800105a:	2201      	movs	r2, #1
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001060:	2201      	movs	r2, #1
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001066:	2201      	movs	r2, #1
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800106c:	2201      	movs	r2, #1
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800108a:	2204      	movs	r2, #4
 800108c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 8001096:	2204      	movs	r2, #4
 8001098:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 800109c:	2200      	movs	r2, #0
 800109e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_FDCAN2_Init+0xc0>)
 80010c6:	f004 fb77 	bl	80057b8 <HAL_FDCAN_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80010d0:	f000 fce8 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	240003fc 	.word	0x240003fc
 80010dc:	4000a400 	.word	0x4000a400

080010e0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_I2C4_Init+0x74>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <MX_I2C4_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_I2C4_Init+0x74>)
 80010ec:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <MX_I2C4_Init+0x7c>)
 80010ee:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_I2C4_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_I2C4_Init+0x74>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_I2C4_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_I2C4_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_I2C4_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_I2C4_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2C4_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800111a:	480e      	ldr	r0, [pc, #56]	@ (8001154 <MX_I2C4_Init+0x74>)
 800111c:	f005 f87a 	bl	8006214 <HAL_I2C_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001126:	f000 fcbd 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <MX_I2C4_Init+0x74>)
 800112e:	f005 fdc1 	bl	8006cb4 <HAL_I2CEx_ConfigAnalogFilter>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001138:	f000 fcb4 	bl	8001aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_I2C4_Init+0x74>)
 8001140:	f005 fe03 	bl	8006d4a <HAL_I2CEx_ConfigDigitalFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 fcab 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400049c 	.word	0x2400049c
 8001158:	58001c00 	.word	0x58001c00
 800115c:	10707dbc 	.word	0x10707dbc

08001160 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b09a      	sub	sp, #104	@ 0x68
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001166:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800116a:	2234      	movs	r2, #52	@ 0x34
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00c fbf3 	bl	800d95a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2234      	movs	r2, #52	@ 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00c fbed 	bl	800d95a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001180:	4b4e      	ldr	r3, [pc, #312]	@ (80012bc <MX_LTDC_Init+0x15c>)
 8001182:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <MX_LTDC_Init+0x160>)
 8001184:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001186:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <MX_LTDC_Init+0x15c>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800118c:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <MX_LTDC_Init+0x15c>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001192:	4b4a      	ldr	r3, [pc, #296]	@ (80012bc <MX_LTDC_Init+0x15c>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001198:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <MX_LTDC_Init+0x15c>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800119e:	4b47      	ldr	r3, [pc, #284]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80011a4:	4b45      	ldr	r3, [pc, #276]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80011aa:	4b44      	ldr	r3, [pc, #272]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011ac:	220e      	movs	r2, #14
 80011ae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80011b0:	4b42      	ldr	r3, [pc, #264]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011b2:	2205      	movs	r2, #5
 80011b4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80011b6:	4b41      	ldr	r3, [pc, #260]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011b8:	f240 228e 	movw	r2, #654	@ 0x28e
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80011be:	4b3f      	ldr	r3, [pc, #252]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011c0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80011c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80011c6:	4b3d      	ldr	r3, [pc, #244]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011c8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80011cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011d0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80011d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011d6:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011e6:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011ee:	4833      	ldr	r0, [pc, #204]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80011f0:	f005 fdf8 	bl	8006de4 <HAL_LTDC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80011fa:	f000 fc53 	bl	8001aa4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800121a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800121e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001220:	2305      	movs	r3, #5
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001242:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	481c      	ldr	r0, [pc, #112]	@ (80012bc <MX_LTDC_Init+0x15c>)
 800124c:	f005 fe9a 	bl	8006f84 <HAL_LTDC_ConfigLayer>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001256:	f000 fc25 	bl	8001aa4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800127a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800127c:	2305      	movs	r3, #5
 800127e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_LTDC_Init+0x15c>)
 80012a6:	f005 fe6d 	bl	8006f84 <HAL_LTDC_ConfigLayer>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80012b0:	f000 fbf8 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3768      	adds	r7, #104	@ 0x68
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	240004f0 	.word	0x240004f0
 80012c0:	50001000 	.word	0x50001000

080012c4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012ca:	4a13      	ldr	r2, [pc, #76]	@ (8001318 <MX_QUADSPI_Init+0x54>)
 80012cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012d0:	22ff      	movs	r2, #255	@ 0xff
 80012d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_QUADSPI_Init+0x50>)
 8001300:	f006 f992 	bl	8007628 <HAL_QSPI_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800130a:	f000 fbcb 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24000598 	.word	0x24000598
 8001318:	52005000 	.word	0x52005000

0800131c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_RTC_Init+0x48>)
 8001322:	4a11      	ldr	r2, [pc, #68]	@ (8001368 <MX_RTC_Init+0x4c>)
 8001324:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_RTC_Init+0x48>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <MX_RTC_Init+0x48>)
 800132e:	227f      	movs	r2, #127	@ 0x7f
 8001330:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_RTC_Init+0x48>)
 8001334:	22ff      	movs	r2, #255	@ 0xff
 8001336:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <MX_RTC_Init+0x48>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_RTC_Init+0x48>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <MX_RTC_Init+0x48>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <MX_RTC_Init+0x48>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MX_RTC_Init+0x48>)
 8001352:	f009 ff07 	bl	800b164 <HAL_RTC_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800135c:	f000 fba2 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	240005e4 	.word	0x240005e4
 8001368:	58004000 	.word	0x58004000

0800136c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001370:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001372:	4a59      	ldr	r2, [pc, #356]	@ (80014d8 <MX_SAI2_Init+0x16c>)
 8001374:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001376:	4b57      	ldr	r3, [pc, #348]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800137c:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <MX_SAI2_Init+0x168>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001382:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001384:	2240      	movs	r2, #64	@ 0x40
 8001386:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001388:	4b52      	ldr	r3, [pc, #328]	@ (80014d4 <MX_SAI2_Init+0x168>)
 800138a:	2200      	movs	r2, #0
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800138e:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001390:	2200      	movs	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001394:	4b4f      	ldr	r3, [pc, #316]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800139a:	4b4e      	ldr	r3, [pc, #312]	@ (80014d4 <MX_SAI2_Init+0x168>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013a0:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013a6:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013ac:	4b49      	ldr	r3, [pc, #292]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013ae:	4a4b      	ldr	r2, [pc, #300]	@ (80014dc <MX_SAI2_Init+0x170>)
 80013b0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013b2:	4b48      	ldr	r3, [pc, #288]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013b8:	4b46      	ldr	r3, [pc, #280]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80013be:	4b45      	ldr	r3, [pc, #276]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80013c4:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80013ca:	4b42      	ldr	r3, [pc, #264]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80013d2:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80013d8:	4b3e      	ldr	r3, [pc, #248]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80013e0:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013e2:	2208      	movs	r2, #8
 80013e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013ec:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <MX_SAI2_Init+0x168>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001400:	2200      	movs	r2, #0
 8001402:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001404:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001406:	2200      	movs	r2, #0
 8001408:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <MX_SAI2_Init+0x168>)
 800140c:	2201      	movs	r2, #1
 800140e:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001410:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001412:	2200      	movs	r2, #0
 8001414:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001416:	482f      	ldr	r0, [pc, #188]	@ (80014d4 <MX_SAI2_Init+0x168>)
 8001418:	f009 ffbc 	bl	800b394 <HAL_SAI_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001422:	f000 fb3f 	bl	8001aa4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001426:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001428:	4a2e      	ldr	r2, [pc, #184]	@ (80014e4 <MX_SAI2_Init+0x178>)
 800142a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800142c:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001432:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001434:	2203      	movs	r2, #3
 8001436:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001438:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800143a:	2240      	movs	r2, #64	@ 0x40
 800143c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800143e:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001440:	2200      	movs	r2, #0
 8001442:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001444:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001446:	2200      	movs	r2, #0
 8001448:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800144c:	2201      	movs	r2, #1
 800144e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800145c:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800146e:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800147e:	2201      	movs	r2, #1
 8001480:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800148c:	2208      	movs	r2, #8
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001492:	2201      	movs	r2, #1
 8001494:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_SAI2_Init+0x174>)
 8001498:	2200      	movs	r2, #0
 800149a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800149c:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_SAI2_Init+0x174>)
 800149e:	2200      	movs	r2, #0
 80014a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014bc:	2200      	movs	r2, #0
 80014be:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <MX_SAI2_Init+0x174>)
 80014c2:	f009 ff67 	bl	800b394 <HAL_SAI_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 80014cc:	f000 faea 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24000608 	.word	0x24000608
 80014d8:	40015c04 	.word	0x40015c04
 80014dc:	0002ee00 	.word	0x0002ee00
 80014e0:	240006a0 	.word	0x240006a0
 80014e4:	40015c24 	.word	0x40015c24

080014e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014ec:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <MX_SPI2_Init+0xa0>)
 80014ee:	4a27      	ldr	r2, [pc, #156]	@ (800158c <MX_SPI2_Init+0xa4>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <MX_SPI2_Init+0xa0>)
 80014f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <MX_SPI2_Init+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001502:	2203      	movs	r2, #3
 8001504:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800150c:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001538:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001540:	2200      	movs	r2, #0
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800154c:	2200      	movs	r2, #0
 800154e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001558:	2200      	movs	r2, #0
 800155a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001564:	2200      	movs	r2, #0
 8001566:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_SPI2_Init+0xa0>)
 800156a:	2200      	movs	r2, #0
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_SPI2_Init+0xa0>)
 8001576:	f00a fa2d 	bl	800b9d4 <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001580:	f000 fa90 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24000738 	.word	0x24000738
 800158c:	40003800 	.word	0x40003800

08001590 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001594:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 8001596:	4a23      	ldr	r2, [pc, #140]	@ (8001624 <MX_USART3_UART_Init+0x94>)
 8001598:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d8:	4811      	ldr	r0, [pc, #68]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015da:	f00a fb3a 	bl	800bc52 <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 fa5e 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e8:	2100      	movs	r1, #0
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015ec:	f00b fbd1 	bl	800cd92 <HAL_UARTEx_SetTxFifoThreshold>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015f6:	f000 fa55 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 80015fe:	f00b fc06 	bl	800ce0e <HAL_UARTEx_SetRxFifoThreshold>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001608:	f000 fa4c 	bl	8001aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <MX_USART3_UART_Init+0x90>)
 800160e:	f00b fb87 	bl	800cd20 <HAL_UARTEx_DisableFifoMode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001618:	f000 fa44 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	240007c0 	.word	0x240007c0
 8001624:	40004800 	.word	0x40004800

08001628 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162e:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001630:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001634:	2209      	movs	r2, #9
 8001636:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163a:	2202      	movs	r2, #2
 800163c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001640:	2200      	movs	r2, #0
 8001642:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001646:	2202      	movs	r2, #2
 8001648:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800164c:	2200      	movs	r2, #0
 800164e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001652:	2200      	movs	r2, #0
 8001654:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001658:	2200      	movs	r2, #0
 800165a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800165e:	2201      	movs	r2, #1
 8001660:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001664:	2201      	movs	r2, #1
 8001666:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800166a:	2200      	movs	r2, #0
 800166c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001670:	f005 fe60 	bl	8007334 <HAL_PCD_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800167a:	f000 fa13 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000854 	.word	0x24000854
 8001688:	40080000 	.word	0x40080000

0800168c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <MX_FMC_Init+0x94>)
 80016a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001724 <MX_FMC_Init+0x98>)
 80016a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <MX_FMC_Init+0x94>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <MX_FMC_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <MX_FMC_Init+0x94>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <MX_FMC_Init+0x94>)
 80016be:	2210      	movs	r2, #16
 80016c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <MX_FMC_Init+0x94>)
 80016c4:	2240      	movs	r2, #64	@ 0x40
 80016c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_FMC_Init+0x94>)
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016ce:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_FMC_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_FMC_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_FMC_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_FMC_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80016e6:	2310      	movs	r3, #16
 80016e8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016ea:	2310      	movs	r3, #16
 80016ec:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016ee:	2310      	movs	r3, #16
 80016f0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016f2:	2310      	movs	r3, #16
 80016f4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016f6:	2310      	movs	r3, #16
 80016f8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016fa:	2310      	movs	r3, #16
 80016fc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016fe:	2310      	movs	r3, #16
 8001700:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <MX_FMC_Init+0x94>)
 8001708:	f00a f928 	bl	800b95c <HAL_SDRAM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001712:	f000 f9c7 	bl	8001aa4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000d38 	.word	0x24000d38
 8001724:	52004140 	.word	0x52004140

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b090      	sub	sp, #64	@ 0x40
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800173e:	4bbf      	ldr	r3, [pc, #764]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	4abd      	ldr	r2, [pc, #756]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800174e:	4bbb      	ldr	r3, [pc, #748]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4bb7      	ldr	r3, [pc, #732]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	4ab6      	ldr	r2, [pc, #728]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800177a:	4bb0      	ldr	r3, [pc, #704]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	4aae      	ldr	r2, [pc, #696]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178a:	4bac      	ldr	r3, [pc, #688]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001798:	4ba8      	ldr	r3, [pc, #672]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	4aa7      	ldr	r2, [pc, #668]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a8:	4ba4      	ldr	r3, [pc, #656]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4ba1      	ldr	r3, [pc, #644]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	4a9f      	ldr	r2, [pc, #636]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c6:	4b9d      	ldr	r3, [pc, #628]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b99      	ldr	r3, [pc, #612]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	4a98      	ldr	r2, [pc, #608]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e4:	4b95      	ldr	r3, [pc, #596]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	4b92      	ldr	r3, [pc, #584]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	4a90      	ldr	r2, [pc, #576]	@ (8001a3c <MX_GPIO_Init+0x314>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001802:	4b8e      	ldr	r3, [pc, #568]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001810:	4b8a      	ldr	r3, [pc, #552]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	4a89      	ldr	r2, [pc, #548]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001818:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001820:	4b86      	ldr	r3, [pc, #536]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	4b83      	ldr	r3, [pc, #524]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	4a81      	ldr	r2, [pc, #516]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001852:	4a7a      	ldr	r2, [pc, #488]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800185c:	4b77      	ldr	r3, [pc, #476]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b74      	ldr	r3, [pc, #464]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001870:	4a72      	ldr	r2, [pc, #456]	@ (8001a3c <MX_GPIO_Init+0x314>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187a:	4b70      	ldr	r3, [pc, #448]	@ (8001a3c <MX_GPIO_Init+0x314>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	2108      	movs	r1, #8
 800188c:	486c      	ldr	r0, [pc, #432]	@ (8001a40 <MX_GPIO_Init+0x318>)
 800188e:	f004 fca7 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001898:	486a      	ldr	r0, [pc, #424]	@ (8001a44 <MX_GPIO_Init+0x31c>)
 800189a:	f004 fca1 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f241 0104 	movw	r1, #4100	@ 0x1004
 80018a4:	4868      	ldr	r0, [pc, #416]	@ (8001a48 <MX_GPIO_Init+0x320>)
 80018a6:	f004 fc9b 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2104      	movs	r1, #4
 80018ae:	4867      	ldr	r0, [pc, #412]	@ (8001a4c <MX_GPIO_Init+0x324>)
 80018b0:	f004 fc96 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018c6:	2303      	movs	r3, #3
 80018c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	485f      	ldr	r0, [pc, #380]	@ (8001a50 <MX_GPIO_Init+0x328>)
 80018d2:	f004 fad5 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	485a      	ldr	r0, [pc, #360]	@ (8001a54 <MX_GPIO_Init+0x32c>)
 80018ea:	f004 fac9 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80018ee:	2330      	movs	r3, #48	@ 0x30
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80018fe:	230a      	movs	r3, #10
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001906:	4619      	mov	r1, r3
 8001908:	484d      	ldr	r0, [pc, #308]	@ (8001a40 <MX_GPIO_Init+0x318>)
 800190a:	f004 fab9 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PN532_RSTS_Pin */
  GPIO_InitStruct.Pin = PN532_RSTS_Pin;
 800190e:	2308      	movs	r3, #8
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(PN532_RSTS_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	4846      	ldr	r0, [pc, #280]	@ (8001a40 <MX_GPIO_Init+0x318>)
 8001926:	f004 faab 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 800192a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193c:	4619      	mov	r1, r3
 800193e:	4846      	ldr	r0, [pc, #280]	@ (8001a58 <MX_GPIO_Init+0x330>)
 8001940:	f004 fa9e 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	4840      	ldr	r0, [pc, #256]	@ (8001a5c <MX_GPIO_Init+0x334>)
 800195a:	f004 fa91 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_REQ_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PN532_REQ_Pin|LD2_Pin;
 800195e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	4833      	ldr	r0, [pc, #204]	@ (8001a44 <MX_GPIO_Init+0x31c>)
 8001978:	f004 fa82 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800197c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800198e:	2301      	movs	r3, #1
 8001990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	482f      	ldr	r0, [pc, #188]	@ (8001a58 <MX_GPIO_Init+0x330>)
 800199a:	f004 fa71 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80019ae:	2306      	movs	r3, #6
 80019b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4829      	ldr	r0, [pc, #164]	@ (8001a60 <MX_GPIO_Init+0x338>)
 80019ba:	f004 fa61 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019be:	2304      	movs	r3, #4
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4823      	ldr	r0, [pc, #140]	@ (8001a60 <MX_GPIO_Init+0x338>)
 80019d4:	f004 fa54 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	481e      	ldr	r0, [pc, #120]	@ (8001a64 <MX_GPIO_Init+0x33c>)
 80019ec:	f004 fa48 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80019f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	4812      	ldr	r0, [pc, #72]	@ (8001a50 <MX_GPIO_Init+0x328>)
 8001a08:	f004 fa3a 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a0c:	2340      	movs	r3, #64	@ 0x40
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001a1c:	2309      	movs	r3, #9
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	480c      	ldr	r0, [pc, #48]	@ (8001a58 <MX_GPIO_Init+0x330>)
 8001a28:	f004 fa2a 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001a2c:	f241 0304 	movw	r3, #4100	@ 0x1004
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a3a:	e015      	b.n	8001a68 <MX_GPIO_Init+0x340>
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58021000 	.word	0x58021000
 8001a44:	58022000 	.word	0x58022000
 8001a48:	58020400 	.word	0x58020400
 8001a4c:	58022400 	.word	0x58022400
 8001a50:	58021c00 	.word	0x58021c00
 8001a54:	58020c00 	.word	0x58020c00
 8001a58:	58020000 	.word	0x58020000
 8001a5c:	58020800 	.word	0x58020800
 8001a60:	58021800 	.word	0x58021800
 8001a64:	58022800 	.word	0x58022800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a70:	4619      	mov	r1, r3
 8001a72:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <MX_GPIO_Init+0x374>)
 8001a74:	f004 fa04 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_GPIO_Init+0x378>)
 8001a90:	f004 f9f6 	bl	8005e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a94:	bf00      	nop
 8001a96:	3740      	adds	r7, #64	@ 0x40
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	58020400 	.word	0x58020400
 8001aa0:	58022400 	.word	0x58022400

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <Error_Handler+0x8>

08001ab0 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0c8      	sub	sp, #288	@ 0x120
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001aba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001abe:	6018      	str	r0, [r3, #0]
 8001ac0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ac4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ac8:	6019      	str	r1, [r3, #0]
 8001aca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ace:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001ad2:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8001ad4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ad8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	2bff      	cmp	r3, #255	@ 0xff
 8001ae0:	d806      	bhi.n	8001af0 <PN532_WriteFrame+0x40>
 8001ae2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ae6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	e0aa      	b.n	8001c4c <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8001afc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8001b08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b10:	2200      	movs	r2, #0
 8001b12:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8001b14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b1c:	22ff      	movs	r2, #255	@ 0xff
 8001b1e:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001b26:	e010      	b.n	8001b4a <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8001b28:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001b2c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b30:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001b34:	5cd2      	ldrb	r2, [r2, r3]
 8001b36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8001b40:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001b44:	3301      	adds	r3, #1
 8001b46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001b4a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d9ea      	bls.n	8001b28 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8001b52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b56:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b66:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8001b68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b6c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	425b      	negs	r3, r3
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001b7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b80:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001b88:	e023      	b.n	8001bd2 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8001b8a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001b8e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001b92:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	441a      	add	r2, r3
 8001b9a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001b9e:	3305      	adds	r3, #5
 8001ba0:	7811      	ldrb	r1, [r2, #0]
 8001ba2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ba6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001baa:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8001bac:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001bb0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001bb4:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8001bc8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001bd2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001bdc:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8001be0:	8812      	ldrh	r2, [r2, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d8d1      	bhi.n	8001b8a <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8001be6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001bea:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8001bf6:	43d2      	mvns	r2, r2
 8001bf8:	b2d1      	uxtb	r1, r2
 8001bfa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001bfe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c02:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8001c04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c08:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	3306      	adds	r3, #6
 8001c10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c14:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c18:	2100      	movs	r1, #0
 8001c1a:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8001c1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c2c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	3207      	adds	r2, #7
 8001c34:	b291      	uxth	r1, r2
 8001c36:	f107 0214 	add.w	r2, r7, #20
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4798      	blx	r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	e000      	b.n	8001c4c <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0c8      	sub	sp, #288	@ 0x120
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c66:	6018      	str	r0, [r3, #0]
 8001c68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c70:	6019      	str	r1, [r3, #0]
 8001c72:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c76:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001c7a:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8001c82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001c86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001c92:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	3207      	adds	r2, #7
 8001c9a:	b291      	uxth	r1, r2
 8001c9c:	f107 0214 	add.w	r2, r7, #20
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8001caa:	e019      	b.n	8001ce0 <PN532_ReadFrame+0x88>
        offset += 1;
 8001cac:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8001cb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cba:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	1dda      	adds	r2, r3, #7
 8001cc2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	da0a      	bge.n	8001ce0 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8001cca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001cce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	485b      	ldr	r0, [pc, #364]	@ (8001e44 <PN532_ReadFrame+0x1ec>)
 8001cd8:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e0ab      	b.n	8001e38 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8001ce0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001ce4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001ce8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0dc      	beq.n	8001cac <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8001cf2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001cf6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001cfa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	2bff      	cmp	r3, #255	@ 0xff
 8001d02:	d00a      	beq.n	8001d1a <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8001d04:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d08:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	484c      	ldr	r0, [pc, #304]	@ (8001e44 <PN532_ReadFrame+0x1ec>)
 8001d12:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	e08e      	b.n	8001e38 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8001d1a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8001d24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d28:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	1dda      	adds	r2, r3, #7
 8001d30:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001d34:	429a      	cmp	r2, r3
 8001d36:	da0a      	bge.n	8001d4e <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8001d38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	4840      	ldr	r0, [pc, #256]	@ (8001e48 <PN532_ReadFrame+0x1f0>)
 8001d46:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	e074      	b.n	8001e38 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8001d4e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001d52:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d56:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8001d60:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001d64:	3301      	adds	r3, #1
 8001d66:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001d6a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001d6e:	5cd2      	ldrb	r2, [r2, r3]
 8001d70:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8001d74:	4413      	add	r3, r2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8001d7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001d80:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4830      	ldr	r0, [pc, #192]	@ (8001e4c <PN532_ReadFrame+0x1f4>)
 8001d8a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e052      	b.n	8001e38 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001d98:	e014      	b.n	8001dc4 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8001d9a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001d9e:	1c9a      	adds	r2, r3, #2
 8001da0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001da4:	4413      	add	r3, r2
 8001da6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001daa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001dae:	5cd2      	ldrb	r2, [r2, r3]
 8001db0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001db4:	4413      	add	r3, r2
 8001db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8001dba:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8001dc4:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8001dc8:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d2e4      	bcs.n	8001d9a <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8001dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8001dd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ddc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	481a      	ldr	r0, [pc, #104]	@ (8001e50 <PN532_ReadFrame+0x1f8>)
 8001de6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e024      	b.n	8001e38 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8001df4:	e018      	b.n	8001e28 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8001df6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8001e00:	441a      	add	r2, r3
 8001e02:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8001e06:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001e0a:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8001e0e:	6809      	ldr	r1, [r1, #0]
 8001e10:	440b      	add	r3, r1
 8001e12:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001e16:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001e1a:	5c8a      	ldrb	r2, [r1, r2]
 8001e1c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8001e1e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8001e22:	3301      	adds	r3, #1
 8001e24:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8001e28:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8001e2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d3e0      	bcc.n	8001df6 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8001e34:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	0800e9cc 	.word	0x0800e9cc
 8001e48:	0800ea00 	.word	0x0800ea00
 8001e4c:	0800ea1c 	.word	0x0800ea1c
 8001e50:	0800ea4c 	.word	0x0800ea4c

08001e54 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b0c7      	sub	sp, #284	@ 0x11c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8001e5e:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001e62:	6020      	str	r0, [r4, #0]
 8001e64:	4608      	mov	r0, r1
 8001e66:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001e6a:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001e6e:	600a      	str	r2, [r1, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e76:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e86:	460a      	mov	r2, r1
 8001e88:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8001e8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e92:	22d4      	movs	r2, #212	@ 0xd4
 8001e94:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8001e96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e9e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001ea2:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001eb0:	e012      	b.n	8001ed8 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8001eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001eb6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001eba:	441a      	add	r2, r3
 8001ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	7811      	ldrb	r1, [r2, #0]
 8001ec4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001ec8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001ecc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8001ece:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d8e5      	bhi.n	8001eb2 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8001ee6:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8001eea:	3302      	adds	r3, #2
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f107 0110 	add.w	r1, r7, #16
 8001ef2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ef6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f7ff fdd8 	bl	8001ab0 <PN532_WriteFrame>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d011      	beq.n	8001f2a <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8001f06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001f14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	485b      	ldr	r0, [pc, #364]	@ (8002090 <PN532_CallFunction+0x23c>)
 8001f22:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	e0ac      	b.n	8002084 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8001f2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001f3a:	4798      	blx	r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f083 0301 	eor.w	r3, r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	e09a      	b.n	8002084 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8001f4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f107 0210 	add.w	r2, r7, #16
 8001f5e:	2106      	movs	r1, #6
 8001f60:	4610      	mov	r0, r2
 8001f62:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001f6a:	e01c      	b.n	8001fa6 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8001f6c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001f70:	4a48      	ldr	r2, [pc, #288]	@ (8002094 <PN532_CallFunction+0x240>)
 8001f72:	5cd2      	ldrb	r2, [r2, r3]
 8001f74:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001f78:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001f7c:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d00a      	beq.n	8001f9c <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8001f86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4841      	ldr	r0, [pc, #260]	@ (8002098 <PN532_CallFunction+0x244>)
 8001f94:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e073      	b.n	8002084 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001f9c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001fa6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d9de      	bls.n	8001f6c <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8001fae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001fbe:	4798      	blx	r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e058      	b.n	8002084 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8001fd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f107 0110 	add.w	r1, r7, #16
 8001fe4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fe8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f7ff fe33 	bl	8001c58 <PN532_ReadFrame>
 8001ff2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8001ff6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2bd5      	cmp	r3, #213	@ 0xd5
 8002002:	d10d      	bne.n	8002020 <PN532_CallFunction+0x1cc>
 8002004:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	461a      	mov	r2, r3
 8002010:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002014:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	429a      	cmp	r2, r3
 800201e:	d00a      	beq.n	8002036 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8002020:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002024:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	481b      	ldr	r0, [pc, #108]	@ (800209c <PN532_CallFunction+0x248>)
 800202e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	e026      	b.n	8002084 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800203c:	e015      	b.n	800206a <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 800203e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8002042:	1c9a      	adds	r2, r3, #2
 8002044:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8002048:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800204c:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8002050:	6809      	ldr	r1, [r1, #0]
 8002052:	440b      	add	r3, r1
 8002054:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8002058:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800205c:	5c8a      	ldrb	r2, [r1, r2]
 800205e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8002060:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8002064:	3301      	adds	r3, #1
 8002066:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800206a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800206e:	b29b      	uxth	r3, r3
 8002070:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002074:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d8df      	bhi.n	800203e <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 800207e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002082:	3b02      	subs	r3, #2
}
 8002084:	4618      	mov	r0, r3
 8002086:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	0800ea80 	.word	0x0800ea80
 8002094:	0800eba4 	.word	0x0800eba4
 8002098:	0800ea94 	.word	0x0800ea94
 800209c:	0800eac0 	.word	0x0800eac0

080020a0 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 80020aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2304      	movs	r3, #4
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	2102      	movs	r1, #2
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fec8 	bl	8001e54 <PN532_CallFunction>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d106      	bne.n	80020da <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <PN532_GetFirmwareVersion+0x44>)
 80020d2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	e000      	b.n	80020dc <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	0800eae8 	.word	0x0800eae8

080020e8 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af04      	add	r7, sp, #16
 80020ee:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80020f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <PN532_SamConfiguration+0x40>)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4611      	mov	r1, r2
 80020fa:	8019      	strh	r1, [r3, #0]
 80020fc:	3302      	adds	r3, #2
 80020fe:	0c12      	lsrs	r2, r2, #16
 8002100:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8002102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	2303      	movs	r3, #3
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2300      	movs	r3, #0
 8002114:	2200      	movs	r2, #0
 8002116:	2114      	movs	r1, #20
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fe9b 	bl	8001e54 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	0800eb04 	.word	0x0800eb04

0800212c <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b090      	sub	sp, #64	@ 0x40
 8002130:	af04      	add	r7, sp, #16
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8002148:	f107 0210 	add.w	r2, r7, #16
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	2302      	movs	r3, #2
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2313      	movs	r3, #19
 800215c:	214a      	movs	r1, #74	@ 0x4a
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff fe78 	bl	8001e54 <PN532_CallFunction>
 8002164:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	da02      	bge.n	8002172 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e02e      	b.n	80021d0 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8002172:	7c3b      	ldrb	r3, [r7, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d006      	beq.n	8002186 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	4816      	ldr	r0, [pc, #88]	@ (80021d8 <PN532_ReadPassiveTarget+0xac>)
 800217e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	e024      	b.n	80021d0 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8002186:	7d7b      	ldrb	r3, [r7, #21]
 8002188:	2b07      	cmp	r3, #7
 800218a:	d906      	bls.n	800219a <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4812      	ldr	r0, [pc, #72]	@ (80021dc <PN532_ReadPassiveTarget+0xb0>)
 8002192:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	e01a      	b.n	80021d0 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 800219a:	2300      	movs	r3, #0
 800219c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021a0:	e010      	b.n	80021c4 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 80021a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021a6:	1d9a      	adds	r2, r3, #6
 80021a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	440b      	add	r3, r1
 80021b0:	3230      	adds	r2, #48	@ 0x30
 80021b2:	443a      	add	r2, r7
 80021b4:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80021b8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 80021ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021be:	3301      	adds	r3, #1
 80021c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021c4:	7d7b      	ldrb	r3, [r7, #21]
 80021c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3e9      	bcc.n	80021a2 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 80021ce:	7d7b      	ldrb	r3, [r7, #21]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3730      	adds	r7, #48	@ 0x30
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	0800eb08 	.word	0x0800eb08
 80021dc:	0800eb28 	.word	0x0800eb28

080021e0 <PN532_MifareClassicAuthenticateBlock>:
    uint8_t* uid,
    uint8_t uid_length,
    uint16_t block_number,
    uint16_t key_number,
    uint8_t* key
) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	@ 0x38
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	460b      	mov	r3, r1
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80bb      	strh	r3, [r7, #4]
    // Build parameters for InDataExchange command to authenticate MiFare card.
    uint8_t response[1] = {0xFF};
 80021f6:	23ff      	movs	r3, #255	@ 0xff
 80021f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t params[3 + MIFARE_UID_MAX_LENGTH + MIFARE_KEY_LENGTH];
    params[0] = 0x01;
 80021fc:	2301      	movs	r3, #1
 80021fe:	743b      	strb	r3, [r7, #16]
    params[1] = key_number & 0xFF;
 8002200:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002202:	b2db      	uxtb	r3, r3
 8002204:	747b      	strb	r3, [r7, #17]
    params[2] = block_number & 0xFF;
 8002206:	88bb      	ldrh	r3, [r7, #4]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	74bb      	strb	r3, [r7, #18]
    // params[3:3+keylen] = key
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002212:	e010      	b.n	8002236 <PN532_MifareClassicAuthenticateBlock+0x56>
        params[3 + i] = key[i];
 8002214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002218:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800221a:	441a      	add	r2, r3
 800221c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002220:	3303      	adds	r3, #3
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	3328      	adds	r3, #40	@ 0x28
 8002226:	443b      	add	r3, r7
 8002228:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 800222c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002230:	3301      	adds	r3, #1
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800223a:	2b05      	cmp	r3, #5
 800223c:	d9ea      	bls.n	8002214 <PN532_MifareClassicAuthenticateBlock+0x34>
    }
    // params[3+keylen:] = uid
    for (uint8_t i = 0; i < uid_length; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002244:	e010      	b.n	8002268 <PN532_MifareClassicAuthenticateBlock+0x88>
        params[3 + MIFARE_KEY_LENGTH + i] = uid[i];
 8002246:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	441a      	add	r2, r3
 800224e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002252:	3309      	adds	r3, #9
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	3328      	adds	r3, #40	@ 0x28
 8002258:	443b      	add	r3, r7
 800225a:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < uid_length; i++) {
 800225e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002262:	3301      	adds	r3, #1
 8002264:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002268:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	429a      	cmp	r2, r3
 8002270:	d3e9      	bcc.n	8002246 <PN532_MifareClassicAuthenticateBlock+0x66>
    }
    // Send InDataExchange request
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response),
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	b29b      	uxth	r3, r3
 8002276:	3309      	adds	r3, #9
 8002278:	b29b      	uxth	r3, r3
 800227a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800227e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002282:	9102      	str	r1, [sp, #8]
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	2140      	movs	r1, #64	@ 0x40
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fddf 	bl	8001e54 <PN532_CallFunction>
                       params, 3 + MIFARE_KEY_LENGTH + uid_length, PN532_DEFAULT_TIMEOUT);
    return response[0];
 8002296:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
}
 800229a:	4618      	mov	r0, r3
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <PN532_MifareClassicReadBlock>:
  *     to read.
  * @param response: buffer of length 16 returned if the block is successfully read.
  * @param block_number: specify a block to read.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicReadBlock(PN532* pn532, uint8_t* response, uint16_t block_number) {
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08e      	sub	sp, #56	@ 0x38
 80022a6:	af04      	add	r7, sp, #16
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80fb      	strh	r3, [r7, #6]
    uint8_t params[] = {0x01, MIFARE_CMD_READ, block_number & 0xFF};
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80022b6:	2330      	movs	r3, #48	@ 0x30
 80022b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t buff[MIFARE_BLOCK_LENGTH + 1];
    // Send InDataExchange request to read block of MiFare data.
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, buff, sizeof(buff),
 80022c4:	f107 0210 	add.w	r2, r7, #16
 80022c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	2303      	movs	r3, #3
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2311      	movs	r3, #17
 80022da:	2140      	movs	r1, #64	@ 0x40
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fdb9 	bl	8001e54 <PN532_CallFunction>
                       params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    // Check first response is 0x00 to show success.
    if (buff[0] != PN532_ERROR_NONE) {
 80022e2:	7c3b      	ldrb	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <PN532_MifareClassicReadBlock+0x4a>
        return buff[0];
 80022e8:	7c3b      	ldrb	r3, [r7, #16]
 80022ea:	e019      	b.n	8002320 <PN532_MifareClassicReadBlock+0x7e>
    }
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022f2:	e010      	b.n	8002316 <PN532_MifareClassicReadBlock+0x74>
        response[i] = buff[i + 1];
 80022f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	440b      	add	r3, r1
 8002302:	3228      	adds	r2, #40	@ 0x28
 8002304:	443a      	add	r2, r7
 8002306:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800230a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 800230c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002310:	3301      	adds	r3, #1
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800231a:	2b0f      	cmp	r3, #15
 800231c:	d9ea      	bls.n	80022f4 <PN532_MifareClassicReadBlock+0x52>
    }
    return buff[0];
 800231e:	7c3b      	ldrb	r3, [r7, #16]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3728      	adds	r7, #40	@ 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <PN532_MifareClassicWriteBlock>:
  *     write.
  * @param data: data to write.
  * @param block_number: specify a block to write.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicWriteBlock(PN532* pn532, uint8_t* data, uint16_t block_number) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	@ 0x38
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
    uint8_t params[MIFARE_BLOCK_LENGTH + 3];
    uint8_t response[1];
    params[0] = 0x01;  // Max card numbers
 8002336:	2301      	movs	r3, #1
 8002338:	753b      	strb	r3, [r7, #20]
    params[1] = MIFARE_CMD_WRITE;
 800233a:	23a0      	movs	r3, #160	@ 0xa0
 800233c:	757b      	strb	r3, [r7, #21]
    params[2] = block_number & 0xFF;
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800234a:	e010      	b.n	800236e <PN532_MifareClassicWriteBlock+0x46>
        params[3 + i] = data[i];
 800234c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	441a      	add	r2, r3
 8002354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002358:	3303      	adds	r3, #3
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	3328      	adds	r3, #40	@ 0x28
 800235e:	443b      	add	r3, r7
 8002360:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 8002364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002368:	3301      	adds	r3, #1
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800236e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d9ea      	bls.n	800234c <PN532_MifareClassicWriteBlock+0x24>
    }
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response,
 8002376:	f107 0210 	add.w	r2, r7, #16
 800237a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2313      	movs	r3, #19
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2301      	movs	r3, #1
 800238c:	2140      	movs	r1, #64	@ 0x40
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fd60 	bl	8001e54 <PN532_CallFunction>
                       sizeof(response), params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return response[0];
 8002394:	7c3b      	ldrb	r3, [r7, #16]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3728      	adds	r7, #40	@ 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c4;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2108      	movs	r1, #8
 80023a8:	480c      	ldr	r0, [pc, #48]	@ (80023dc <PN532_Reset+0x3c>)
 80023aa:	f003 ff19 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80023ae:	2064      	movs	r0, #100	@ 0x64
 80023b0:	f001 fbf6 	bl	8003ba0 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2108      	movs	r1, #8
 80023b8:	4808      	ldr	r0, [pc, #32]	@ (80023dc <PN532_Reset+0x3c>)
 80023ba:	f003 ff11 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80023be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023c2:	f001 fbed 	bl	8003ba0 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2108      	movs	r1, #8
 80023ca:	4804      	ldr	r0, [pc, #16]	@ (80023dc <PN532_Reset+0x3c>)
 80023cc:	f003 ff08 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80023d0:	2064      	movs	r0, #100	@ 0x64
 80023d2:	f001 fbe5 	bl	8003ba0 <HAL_Delay>
    return PN532_STATUS_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	58021000 	.word	0x58021000

080023e0 <PN532_Log>:

void PN532_Log(const char* log) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <PN532_Log+0x18>)
 80023ec:	f00b fa2c 	bl	800d848 <iprintf>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	0800eb50 	.word	0x0800eb50

080023fc <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af02      	add	r7, sp, #8
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	220a      	movs	r2, #10
 800240c:	9200      	str	r2, [sp, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	2148      	movs	r1, #72	@ 0x48
 8002412:	4803      	ldr	r0, [pc, #12]	@ (8002420 <i2c_read+0x24>)
 8002414:	f004 f8b2 	bl	800657c <HAL_I2C_Master_Receive>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2400049c 	.word	0x2400049c

08002424 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	220a      	movs	r2, #10
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	2148      	movs	r1, #72	@ 0x48
 800243a:	4803      	ldr	r0, [pc, #12]	@ (8002448 <i2c_write+0x24>)
 800243c:	f003 ff86 	bl	800634c <HAL_I2C_Master_Transmit>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2400049c 	.word	0x2400049c

0800244c <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 800244c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002450:	b087      	sub	sp, #28
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
 800245a:	466b      	mov	r3, sp
 800245c:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 800245e:	2300      	movs	r3, #0
 8002460:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	1c59      	adds	r1, r3, #1
 8002466:	1e4b      	subs	r3, r1, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	460a      	mov	r2, r1
 800246c:	2300      	movs	r3, #0
 800246e:	4690      	mov	r8, r2
 8002470:	4699      	mov	r9, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	460a      	mov	r2, r1
 8002488:	2300      	movs	r3, #0
 800248a:	4614      	mov	r4, r2
 800248c:	461d      	mov	r5, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	00eb      	lsls	r3, r5, #3
 8002498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800249c:	00e2      	lsls	r2, r4, #3
 800249e:	460b      	mov	r3, r1
 80024a0:	3307      	adds	r3, #7
 80024a2:	08db      	lsrs	r3, r3, #3
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	ebad 0d03 	sub.w	sp, sp, r3
 80024aa:	466b      	mov	r3, sp
 80024ac:	3300      	adds	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ffa0 	bl	80023fc <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 80024bc:	7a3b      	ldrb	r3, [r7, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d002      	beq.n	80024c8 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e01a      	b.n	80024fe <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff93 	bl	80023fc <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
 80024da:	e00a      	b.n	80024f2 <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	440b      	add	r3, r1
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	5c8a      	ldrb	r2, [r1, r2]
 80024ea:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	3301      	adds	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8ef      	bhi.n	80024dc <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	46b5      	mov	sp, r6
}
 8002500:	4618      	mov	r0, r3
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800250a <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff82 	bl	8002424 <i2c_write>
    return PN532_STATUS_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8002532:	2300      	movs	r3, #0
 8002534:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8002536:	f001 fb27 	bl	8003b88 <HAL_GetTick>
 800253a:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 800253c:	e00d      	b.n	800255a <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff59 	bl	80023fc <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 800254a:	7a3b      	ldrb	r3, [r7, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <PN532_I2C_WaitReady+0x2a>
            return true;
 8002550:	2301      	movs	r3, #1
 8002552:	e00b      	b.n	800256c <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8002554:	2005      	movs	r0, #5
 8002556:	f001 fb23 	bl	8003ba0 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 800255a:	f001 fb15 	bl	8003b88 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d8e9      	bhi.n	800253e <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_SET);
 8002578:	2201      	movs	r2, #1
 800257a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257e:	480e      	ldr	r0, [pc, #56]	@ (80025b8 <PN532_I2C_Wakeup+0x44>)
 8002580:	f003 fe2e 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002584:	2064      	movs	r0, #100	@ 0x64
 8002586:	f001 fb0b 	bl	8003ba0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002590:	4809      	ldr	r0, [pc, #36]	@ (80025b8 <PN532_I2C_Wakeup+0x44>)
 8002592:	f003 fe25 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002596:	2064      	movs	r0, #100	@ 0x64
 8002598:	f001 fb02 	bl	8003ba0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_SET);
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <PN532_I2C_Wakeup+0x44>)
 80025a4:	f003 fe1c 	bl	80061e0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80025a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025ac:	f001 faf8 	bl	8003ba0 <HAL_Delay>
    return PN532_STATUS_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	58022000 	.word	0x58022000

080025bc <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0c      	ldr	r2, [pc, #48]	@ (80025f8 <PN532_I2C_Init+0x3c>)
 80025c8:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <PN532_I2C_Init+0x40>)
 80025ce:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <PN532_I2C_Init+0x44>)
 80025d4:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <PN532_I2C_Init+0x48>)
 80025da:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <PN532_I2C_Init+0x4c>)
 80025e0:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a09      	ldr	r2, [pc, #36]	@ (800260c <PN532_I2C_Init+0x50>)
 80025e6:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4798      	blx	r3
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	080023a1 	.word	0x080023a1
 80025fc:	0800244d 	.word	0x0800244d
 8002600:	0800250b 	.word	0x0800250b
 8002604:	0800252b 	.word	0x0800252b
 8002608:	08002575 	.word	0x08002575
 800260c:	080023e1 	.word	0x080023e1

08002610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_MspInit+0x30>)
 8002618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800261c:	4a08      	ldr	r2, [pc, #32]	@ (8002640 <HAL_MspInit+0x30>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_MspInit+0x30>)
 8002628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	58024400 	.word	0x58024400

08002644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	@ 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a72      	ldr	r2, [pc, #456]	@ (800282c <HAL_ADC_MspInit+0x1e8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d14e      	bne.n	8002704 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002666:	4b72      	ldr	r3, [pc, #456]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a70      	ldr	r2, [pc, #448]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 800266e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002670:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10e      	bne.n	8002696 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002678:	4b6e      	ldr	r3, [pc, #440]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 800267a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800267e:	4a6d      	ldr	r2, [pc, #436]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002680:	f043 0320 	orr.w	r3, r3, #32
 8002684:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 800268a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002696:	4b67      	ldr	r3, [pc, #412]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269c:	4a65      	ldr	r2, [pc, #404]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	2303      	movs	r3, #3
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026e2:	4619      	mov	r1, r3
 80026e4:	4854      	ldr	r0, [pc, #336]	@ (8002838 <HAL_ADC_MspInit+0x1f4>)
 80026e6:	f003 fbcb 	bl	8005e80 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80026ea:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80026ee:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80026f2:	f001 fa99 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80026f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026fa:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80026fe:	f001 fa93 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002702:	e08f      	b.n	8002824 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <HAL_ADC_MspInit+0x1f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d133      	bne.n	8002776 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800270e:	4b48      	ldr	r3, [pc, #288]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	4a46      	ldr	r2, [pc, #280]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 8002716:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002718:	4b45      	ldr	r3, [pc, #276]	@ (8002830 <HAL_ADC_MspInit+0x1ec>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10e      	bne.n	800273e <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002720:	4b44      	ldr	r3, [pc, #272]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002726:	4a43      	ldr	r2, [pc, #268]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002728:	f043 0320 	orr.w	r3, r3, #32
 800272c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002730:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002744:	4a3b      	ldr	r2, [pc, #236]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800274e:	4b39      	ldr	r3, [pc, #228]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800275c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002760:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8002764:	f001 fa60 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8002768:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800276c:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8002770:	f001 fa5a 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002774:	e056      	b.n	8002824 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <HAL_ADC_MspInit+0x1fc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d151      	bne.n	8002824 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002780:	4b2c      	ldr	r3, [pc, #176]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	4a2b      	ldr	r2, [pc, #172]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002790:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800279e:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a4:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_ADC_MspInit+0x1f0>)
 80027ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e0:	2303      	movs	r3, #3
 80027e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ec:	4619      	mov	r1, r3
 80027ee:	4815      	ldr	r0, [pc, #84]	@ (8002844 <HAL_ADC_MspInit+0x200>)
 80027f0:	f003 fb46 	bl	8005e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f8:	2303      	movs	r3, #3
 80027fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002800:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002804:	4619      	mov	r1, r3
 8002806:	480c      	ldr	r0, [pc, #48]	@ (8002838 <HAL_ADC_MspInit+0x1f4>)
 8002808:	f003 fb3a 	bl	8005e80 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800280c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002810:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002814:	f001 fa08 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002818:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800281c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002820:	f001 fa02 	bl	8003c28 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002824:	bf00      	nop
 8002826:	3740      	adds	r7, #64	@ 0x40
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	24000e74 	.word	0x24000e74
 8002834:	58024400 	.word	0x58024400
 8002838:	58020800 	.word	0x58020800
 800283c:	40022100 	.word	0x40022100
 8002840:	58026000 	.word	0x58026000
 8002844:	58021400 	.word	0x58021400

08002848 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b092      	sub	sp, #72	@ 0x48
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a87      	ldr	r2, [pc, #540]	@ (8002a84 <HAL_ETH_MspInit+0x23c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f040 8108 	bne.w	8002a7c <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800286c:	4b86      	ldr	r3, [pc, #536]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800286e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002872:	4a85      	ldr	r2, [pc, #532]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002878:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800287c:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800287e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002886:	633b      	str	r3, [r7, #48]	@ 0x30
 8002888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800288a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800288c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002890:	4a7d      	ldr	r2, [pc, #500]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800289a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800289c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80028a8:	4b77      	ldr	r3, [pc, #476]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028ae:	4a76      	ldr	r2, [pc, #472]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80028b8:	4b73      	ldr	r3, [pc, #460]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028c6:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e4:	4b68      	ldr	r3, [pc, #416]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ea:	4a67      	ldr	r2, [pc, #412]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028ec:	f043 0310 	orr.w	r3, r3, #16
 80028f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f4:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 80028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002902:	4b61      	ldr	r3, [pc, #388]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002908:	4a5f      	ldr	r2, [pc, #380]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002912:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002920:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002926:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800293e:	4b52      	ldr	r3, [pc, #328]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800294e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002962:	4a49      	ldr	r2, [pc, #292]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296c:	4b46      	ldr	r3, [pc, #280]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4b43      	ldr	r3, [pc, #268]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002980:	4a41      	ldr	r2, [pc, #260]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800298a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a88 <HAL_ETH_MspInit+0x240>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002998:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029aa:	230b      	movs	r3, #11
 80029ac:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029b2:	4619      	mov	r1, r3
 80029b4:	4835      	ldr	r0, [pc, #212]	@ (8002a8c <HAL_ETH_MspInit+0x244>)
 80029b6:	f003 fa63 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80029ba:	2304      	movs	r3, #4
 80029bc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ca:	230b      	movs	r3, #11
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029d2:	4619      	mov	r1, r3
 80029d4:	482e      	ldr	r0, [pc, #184]	@ (8002a90 <HAL_ETH_MspInit+0x248>)
 80029d6:	f003 fa53 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 80029da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029ec:	230b      	movs	r3, #11
 80029ee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029f4:	4619      	mov	r1, r3
 80029f6:	4827      	ldr	r0, [pc, #156]	@ (8002a94 <HAL_ETH_MspInit+0x24c>)
 80029f8:	f003 fa42 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 80029fc:	233e      	movs	r3, #62	@ 0x3e
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a0c:	230b      	movs	r3, #11
 8002a0e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a14:	4619      	mov	r1, r3
 8002a16:	4820      	ldr	r0, [pc, #128]	@ (8002a98 <HAL_ETH_MspInit+0x250>)
 8002a18:	f003 fa32 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a2c:	230b      	movs	r3, #11
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a34:	4619      	mov	r1, r3
 8002a36:	4819      	ldr	r0, [pc, #100]	@ (8002a9c <HAL_ETH_MspInit+0x254>)
 8002a38:	f003 fa22 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8002a3c:	2386      	movs	r3, #134	@ 0x86
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a4c:	230b      	movs	r3, #11
 8002a4e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a54:	4619      	mov	r1, r3
 8002a56:	4812      	ldr	r0, [pc, #72]	@ (8002aa0 <HAL_ETH_MspInit+0x258>)
 8002a58:	f003 fa12 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a6c:	230b      	movs	r3, #11
 8002a6e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a74:	4619      	mov	r1, r3
 8002a76:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <HAL_ETH_MspInit+0x25c>)
 8002a78:	f003 fa02 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3748      	adds	r7, #72	@ 0x48
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40028000 	.word	0x40028000
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58021800 	.word	0x58021800
 8002a90:	58021000 	.word	0x58021000
 8002a94:	58022000 	.word	0x58022000
 8002a98:	58020800 	.word	0x58020800
 8002a9c:	58021c00 	.word	0x58021c00
 8002aa0:	58020000 	.word	0x58020000
 8002aa4:	58020400 	.word	0x58020400

08002aa8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b0bc      	sub	sp, #240	@ 0xf0
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ac0:	f107 0318 	add.w	r3, r7, #24
 8002ac4:	22c0      	movs	r2, #192	@ 0xc0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f00a ff46 	bl	800d95a <memset>
  if(hfdcan->Instance==FDCAN1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_FDCAN_MspInit+0x188>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d151      	bne.n	8002b7c <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ad8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ae4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aec:	f107 0318 	add.w	r3, r7, #24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f005 fe39 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8002afc:	f7fe ffd2 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002b00:	4b4c      	ldr	r3, [pc, #304]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	4a4b      	ldr	r2, [pc, #300]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002b08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10e      	bne.n	8002b30 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b12:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b14:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002b18:	4a47      	ldr	r2, [pc, #284]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002b22:	4b45      	ldr	r3, [pc, #276]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b30:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b36:	4a40      	ldr	r2, [pc, #256]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b40:	4b3d      	ldr	r3, [pc, #244]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8002b4e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002b68:	2309      	movs	r3, #9
 8002b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b6e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002b72:	4619      	mov	r1, r3
 8002b74:	4831      	ldr	r0, [pc, #196]	@ (8002c3c <HAL_FDCAN_MspInit+0x194>)
 8002b76:	f003 f983 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002b7a:	e055      	b.n	8002c28 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <HAL_FDCAN_MspInit+0x198>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d150      	bne.n	8002c28 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b86:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b9a:	f107 0318 	add.w	r3, r7, #24
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f005 fde2 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8002baa:	f7fe ff7b 	bl	8001aa4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002bae:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002bb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c34 <HAL_FDCAN_MspInit+0x18c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10e      	bne.n	8002bde <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002bc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bcc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002bd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <HAL_FDCAN_MspInit+0x190>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8002bfc:	f242 0320 	movw	r3, #8224	@ 0x2020
 8002c00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002c16:	2309      	movs	r3, #9
 8002c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c20:	4619      	mov	r1, r3
 8002c22:	4808      	ldr	r0, [pc, #32]	@ (8002c44 <HAL_FDCAN_MspInit+0x19c>)
 8002c24:	f003 f92c 	bl	8005e80 <HAL_GPIO_Init>
}
 8002c28:	bf00      	nop
 8002c2a:	37f0      	adds	r7, #240	@ 0xf0
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	4000a000 	.word	0x4000a000
 8002c34:	24000e78 	.word	0x24000e78
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	58021c00 	.word	0x58021c00
 8002c40:	4000a400 	.word	0x4000a400
 8002c44:	58020400 	.word	0x58020400

08002c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0bc      	sub	sp, #240	@ 0xf0
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	22c0      	movs	r2, #192	@ 0xc0
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00a fe76 	bl	800d95a <memset>
  if(hi2c->Instance==I2C4)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a39      	ldr	r2, [pc, #228]	@ (8002d58 <HAL_I2C_MspInit+0x110>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d16a      	bne.n	8002d4e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002c78:	f04f 0210 	mov.w	r2, #16
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8a:	f107 0318 	add.w	r3, r7, #24
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f005 fd6a 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c9a:	f7fe ff03 	bl	8001aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cae:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cc2:	4a26      	ldr	r2, [pc, #152]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ccc:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce0:	2312      	movs	r3, #18
 8002ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4818      	ldr	r0, [pc, #96]	@ (8002d60 <HAL_I2C_MspInit+0x118>)
 8002d00:	f003 f8be 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480e      	ldr	r0, [pc, #56]	@ (8002d64 <HAL_I2C_MspInit+0x11c>)
 8002d2c:	f003 f8a8 	bl	8005e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_I2C_MspInit+0x114>)
 8002d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	37f0      	adds	r7, #240	@ 0xf0
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	58001c00 	.word	0x58001c00
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	58020400 	.word	0x58020400
 8002d64:	58020c00 	.word	0x58020c00

08002d68 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0be      	sub	sp, #248	@ 0xf8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d80:	f107 0320 	add.w	r3, r7, #32
 8002d84:	22c0      	movs	r2, #192	@ 0xc0
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00a fde6 	bl	800d95a <memset>
  if(hltdc->Instance==LTDC)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a66      	ldr	r2, [pc, #408]	@ (8002f2c <HAL_LTDC_MspInit+0x1c4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	f040 80c4 	bne.w	8002f22 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d9a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8002da6:	2320      	movs	r3, #32
 8002da8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8002daa:	23c0      	movs	r3, #192	@ 0xc0
 8002dac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002dae:	2302      	movs	r3, #2
 8002db0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002db2:	2302      	movs	r3, #2
 8002db4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002db6:	2302      	movs	r3, #2
 8002db8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002dba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002dc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dc4:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dca:	f107 0320 	add.w	r3, r7, #32
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 fcca 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8002dda:	f7fe fe63 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002dde:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002de4:	4a52      	ldr	r2, [pc, #328]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002dee:	4b50      	ldr	r3, [pc, #320]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002df0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e02:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e0c:	4b48      	ldr	r3, [pc, #288]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e1a:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e20:	4a43      	ldr	r2, [pc, #268]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2a:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e48:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e56:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e5c:	4a34      	ldr	r2, [pc, #208]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e66:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <HAL_LTDC_MspInit+0x1c8>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8002e74:	23fc      	movs	r3, #252	@ 0xfc
 8002e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e92:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4826      	ldr	r0, [pc, #152]	@ (8002f34 <HAL_LTDC_MspInit+0x1cc>)
 8002e9a:	f002 fff1 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8002e9e:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8002ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eb8:	230e      	movs	r3, #14
 8002eba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ebe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481c      	ldr	r0, [pc, #112]	@ (8002f38 <HAL_LTDC_MspInit+0x1d0>)
 8002ec6:	f002 ffdb 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8002eca:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8002ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ee4:	230e      	movs	r3, #14
 8002ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002eea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4812      	ldr	r0, [pc, #72]	@ (8002f3c <HAL_LTDC_MspInit+0x1d4>)
 8002ef2:	f002 ffc5 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f10:	230e      	movs	r3, #14
 8002f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f16:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4808      	ldr	r0, [pc, #32]	@ (8002f40 <HAL_LTDC_MspInit+0x1d8>)
 8002f1e:	f002 ffaf 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	37f8      	adds	r7, #248	@ 0xf8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	50001000 	.word	0x50001000
 8002f30:	58024400 	.word	0x58024400
 8002f34:	58022800 	.word	0x58022800
 8002f38:	58022000 	.word	0x58022000
 8002f3c:	58022400 	.word	0x58022400
 8002f40:	58021c00 	.word	0x58021c00

08002f44 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0bc      	sub	sp, #240	@ 0xf0
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	22c0      	movs	r2, #192	@ 0xc0
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00a fcf8 	bl	800d95a <memset>
  if(hqspi->Instance==QUADSPI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <HAL_QSPI_MspInit+0x184>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	f040 80a5 	bne.w	80030c0 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8002f76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f86:	f107 0318 	add.w	r3, r7, #24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fbec 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8002f96:	f7fe fd85 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002f9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002faa:	4b48      	ldr	r3, [pc, #288]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb8:	4b44      	ldr	r3, [pc, #272]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fbe:	4a43      	ldr	r2, [pc, #268]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fc8:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fde:	f043 0320 	orr.w	r3, r3, #32
 8002fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fe6:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff4:	4b35      	ldr	r3, [pc, #212]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	4a34      	ldr	r2, [pc, #208]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003004:	4b31      	ldr	r3, [pc, #196]	@ (80030cc <HAL_QSPI_MspInit+0x188>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003012:	2340      	movs	r3, #64	@ 0x40
 8003014:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800302a:	230a      	movs	r3, #10
 800302c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003034:	4619      	mov	r1, r3
 8003036:	4826      	ldr	r0, [pc, #152]	@ (80030d0 <HAL_QSPI_MspInit+0x18c>)
 8003038:	f002 ff22 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800303c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003040:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003056:	2309      	movs	r3, #9
 8003058:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800305c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003060:	4619      	mov	r1, r3
 8003062:	481c      	ldr	r0, [pc, #112]	@ (80030d4 <HAL_QSPI_MspInit+0x190>)
 8003064:	f002 ff0c 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800306c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003082:	230a      	movs	r3, #10
 8003084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003088:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800308c:	4619      	mov	r1, r3
 800308e:	4811      	ldr	r0, [pc, #68]	@ (80030d4 <HAL_QSPI_MspInit+0x190>)
 8003090:	f002 fef6 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003094:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030ae:	2309      	movs	r3, #9
 80030b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030b8:	4619      	mov	r1, r3
 80030ba:	4807      	ldr	r0, [pc, #28]	@ (80030d8 <HAL_QSPI_MspInit+0x194>)
 80030bc:	f002 fee0 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80030c0:	bf00      	nop
 80030c2:	37f0      	adds	r7, #240	@ 0xf0
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	52005000 	.word	0x52005000
 80030cc:	58024400 	.word	0x58024400
 80030d0:	58020400 	.word	0x58020400
 80030d4:	58021400 	.word	0x58021400
 80030d8:	58020c00 	.word	0x58020c00

080030dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0b2      	sub	sp, #200	@ 0xc8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	22c0      	movs	r2, #192	@ 0xc0
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00a fc34 	bl	800d95a <memset>
  if(hrtc->Instance==RTC)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <HAL_RTC_MspInit+0x5c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d119      	bne.n	8003130 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800310c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4618      	mov	r0, r3
 8003116:	f005 fb27 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003120:	f7fe fcc0 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <HAL_RTC_MspInit+0x60>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <HAL_RTC_MspInit+0x60>)
 800312a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312e:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003130:	bf00      	nop
 8003132:	37c8      	adds	r7, #200	@ 0xc8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	58004000 	.word	0x58004000
 800313c:	58024400 	.word	0x58024400

08003140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0bc      	sub	sp, #240	@ 0xf0
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	22c0      	movs	r2, #192	@ 0xc0
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f00a fbfa 	bl	800d95a <memset>
  if(hspi->Instance==SPI2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a55      	ldr	r2, [pc, #340]	@ (80032c0 <HAL_SPI_MspInit+0x180>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 80a3 	bne.w	80032b8 <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003172:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800317e:	2300      	movs	r3, #0
 8003180:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0318 	add.w	r3, r7, #24
 8003186:	4618      	mov	r0, r3
 8003188:	f005 faee 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8003192:	f7fe fc87 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003196:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319c:	4a49      	ldr	r2, [pc, #292]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 800319e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b4:	4b43      	ldr	r3, [pc, #268]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ba:	4a42      	ldr	r2, [pc, #264]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c4:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d2:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d8:	4a3a      	ldr	r2, [pc, #232]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031da:	f043 0308 	orr.w	r3, r3, #8
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e2:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f6:	4a33      	ldr	r2, [pc, #204]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003200:	4b30      	ldr	r3, [pc, #192]	@ (80032c4 <HAL_SPI_MspInit+0x184>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800320e:	2310      	movs	r3, #16
 8003210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003226:	2307      	movs	r3, #7
 8003228:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003230:	4619      	mov	r1, r3
 8003232:	4825      	ldr	r0, [pc, #148]	@ (80032c8 <HAL_SPI_MspInit+0x188>)
 8003234:	f002 fe24 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003238:	2308      	movs	r3, #8
 800323a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003250:	2305      	movs	r3, #5
 8003252:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003256:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800325a:	4619      	mov	r1, r3
 800325c:	481b      	ldr	r0, [pc, #108]	@ (80032cc <HAL_SPI_MspInit+0x18c>)
 800325e:	f002 fe0f 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003262:	2304      	movs	r3, #4
 8003264:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800327a:	2305      	movs	r3, #5
 800327c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003280:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003284:	4619      	mov	r1, r3
 8003286:	4812      	ldr	r0, [pc, #72]	@ (80032d0 <HAL_SPI_MspInit+0x190>)
 8003288:	f002 fdfa 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800328c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003290:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032a6:	2305      	movs	r3, #5
 80032a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80032b0:	4619      	mov	r1, r3
 80032b2:	4805      	ldr	r0, [pc, #20]	@ (80032c8 <HAL_SPI_MspInit+0x188>)
 80032b4:	f002 fde4 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80032b8:	bf00      	nop
 80032ba:	37f0      	adds	r7, #240	@ 0xf0
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40003800 	.word	0x40003800
 80032c4:	58024400 	.word	0x58024400
 80032c8:	58020400 	.word	0x58020400
 80032cc:	58020c00 	.word	0x58020c00
 80032d0:	58022000 	.word	0x58022000

080032d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b0ba      	sub	sp, #232	@ 0xe8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	22c0      	movs	r2, #192	@ 0xc0
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00a fb30 	bl	800d95a <memset>
  if(huart->Instance==USART3)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a27      	ldr	r2, [pc, #156]	@ (800339c <HAL_UART_MspInit+0xc8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d146      	bne.n	8003392 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003304:	f04f 0202 	mov.w	r2, #2
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4618      	mov	r0, r3
 800331c:	f005 fa24 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003326:	f7fe fbbd 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 800332c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 8003332:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003336:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800333a:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 800333c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 800334a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800334e:	4a14      	ldr	r2, [pc, #80]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <HAL_UART_MspInit+0xcc>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003366:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003380:	2307      	movs	r3, #7
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003386:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	@ (80033a4 <HAL_UART_MspInit+0xd0>)
 800338e:	f002 fd77 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003392:	bf00      	nop
 8003394:	37e8      	adds	r7, #232	@ 0xe8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40004800 	.word	0x40004800
 80033a0:	58024400 	.word	0x58024400
 80033a4:	58020400 	.word	0x58020400

080033a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b0ba      	sub	sp, #232	@ 0xe8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	22c0      	movs	r2, #192	@ 0xc0
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f00a fac6 	bl	800d95a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a30      	ldr	r2, [pc, #192]	@ (8003494 <HAL_PCD_MspInit+0xec>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d159      	bne.n	800348c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80033d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80033e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	4618      	mov	r0, r3
 80033f2:	f005 f9b9 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80033fc:	f7fe fb52 	bl	8001aa4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003400:	f004 f902 	bl	8007608 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 8003406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800340a:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 8003416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8003422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8003436:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800343a:	4619      	mov	r1, r3
 800343c:	4817      	ldr	r0, [pc, #92]	@ (800349c <HAL_PCD_MspInit+0xf4>)
 800343e:	f002 fd1f 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8003442:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800345c:	230a      	movs	r3, #10
 800345e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003466:	4619      	mov	r1, r3
 8003468:	480c      	ldr	r0, [pc, #48]	@ (800349c <HAL_PCD_MspInit+0xf4>)
 800346a:	f002 fd09 	bl	8005e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 8003470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 8003476:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800347a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_PCD_MspInit+0xf0>)
 8003480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800348c:	bf00      	nop
 800348e:	37e8      	adds	r7, #232	@ 0xe8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40080000 	.word	0x40080000
 8003498:	58024400 	.word	0x58024400
 800349c:	58020000 	.word	0x58020000

080034a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0b8      	sub	sp, #224	@ 0xe0
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80034a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80034b6:	4b51      	ldr	r3, [pc, #324]	@ (80035fc <HAL_FMC_MspInit+0x15c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8099 	bne.w	80035f2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80034c0:	4b4e      	ldr	r3, [pc, #312]	@ (80035fc <HAL_FMC_MspInit+0x15c>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	22c0      	movs	r2, #192	@ 0xc0
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f00a fa43 	bl	800d95a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80034d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	4618      	mov	r0, r3
 80034ea:	f005 f93d 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80034f4:	f7fe fad6 	bl	8001aa4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034f8:	4b41      	ldr	r3, [pc, #260]	@ (8003600 <HAL_FMC_MspInit+0x160>)
 80034fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80034fe:	4a40      	ldr	r2, [pc, #256]	@ (8003600 <HAL_FMC_MspInit+0x160>)
 8003500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003508:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <HAL_FMC_MspInit+0x160>)
 800350a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800350e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8003516:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800351a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352a:	2303      	movs	r3, #3
 800352c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003530:	230c      	movs	r3, #12
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003536:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800353a:	4619      	mov	r1, r3
 800353c:	4831      	ldr	r0, [pc, #196]	@ (8003604 <HAL_FMC_MspInit+0x164>)
 800353e:	f002 fc9f 	bl	8005e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8003542:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800355c:	230c      	movs	r3, #12
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003562:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003566:	4619      	mov	r1, r3
 8003568:	4827      	ldr	r0, [pc, #156]	@ (8003608 <HAL_FMC_MspInit+0x168>)
 800356a:	f002 fc89 	bl	8005e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800356e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003572:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003588:	230c      	movs	r3, #12
 800358a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003592:	4619      	mov	r1, r3
 8003594:	481d      	ldr	r0, [pc, #116]	@ (800360c <HAL_FMC_MspInit+0x16c>)
 8003596:	f002 fc73 	bl	8005e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800359a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800359e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035b4:	230c      	movs	r3, #12
 80035b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035be:	4619      	mov	r1, r3
 80035c0:	4813      	ldr	r0, [pc, #76]	@ (8003610 <HAL_FMC_MspInit+0x170>)
 80035c2:	f002 fc5d 	bl	8005e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035c6:	23e0      	movs	r3, #224	@ 0xe0
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035de:	230c      	movs	r3, #12
 80035e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80035e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035e8:	4619      	mov	r1, r3
 80035ea:	480a      	ldr	r0, [pc, #40]	@ (8003614 <HAL_FMC_MspInit+0x174>)
 80035ec:	f002 fc48 	bl	8005e80 <HAL_GPIO_Init>
 80035f0:	e000      	b.n	80035f4 <HAL_FMC_MspInit+0x154>
    return;
 80035f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80035f4:	37e0      	adds	r7, #224	@ 0xe0
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	24000e7c 	.word	0x24000e7c
 8003600:	58024400 	.word	0x58024400
 8003604:	58021000 	.word	0x58021000
 8003608:	58021800 	.word	0x58021800
 800360c:	58020c00 	.word	0x58020c00
 8003610:	58021400 	.word	0x58021400
 8003614:	58021c00 	.word	0x58021c00

08003618 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003620:	f7ff ff3e 	bl	80034a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0ba      	sub	sp, #232	@ 0xe8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	22c0      	movs	r2, #192	@ 0xc0
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f00a f98c 	bl	800d95a <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a45      	ldr	r2, [pc, #276]	@ (800375c <HAL_SAI_MspInit+0x130>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d13e      	bne.n	80036ca <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800364c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8003658:	2300      	movs	r3, #0
 800365a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365c:	f107 0310 	add.w	r3, r7, #16
 8003660:	4618      	mov	r0, r3
 8003662:	f005 f881 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 800366c:	f7fe fa1a 	bl	8001aa4 <Error_Handler>
    }

    if (SAI2_client == 0)
 8003670:	4b3b      	ldr	r3, [pc, #236]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003678:	4b3a      	ldr	r3, [pc, #232]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 800367a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800367e:	4a39      	ldr	r2, [pc, #228]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 8003680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003684:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003688:	4b36      	ldr	r3, [pc, #216]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 800368a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800368e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8003696:	4b32      	ldr	r3, [pc, #200]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 800369e:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80036a0:	23f0      	movs	r3, #240	@ 0xf0
 80036a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036b8:	230a      	movs	r3, #10
 80036ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80036be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036c2:	4619      	mov	r1, r3
 80036c4:	4828      	ldr	r0, [pc, #160]	@ (8003768 <HAL_SAI_MspInit+0x13c>)
 80036c6:	f002 fbdb 	bl	8005e80 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a27      	ldr	r2, [pc, #156]	@ (800376c <HAL_SAI_MspInit+0x140>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d13f      	bne.n	8003754 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80036d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4618      	mov	r0, r3
 80036ea:	f005 f83d 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80036f4:	f7fe f9d6 	bl	8001aa4 <Error_Handler>
    }

      if (SAI2_client == 0)
 80036f8:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003700:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 8003702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003706:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 8003708:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800370c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003710:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <HAL_SAI_MspInit+0x138>)
 8003712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800371e:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3301      	adds	r3, #1
 8003724:	4a0e      	ldr	r2, [pc, #56]	@ (8003760 <HAL_SAI_MspInit+0x134>)
 8003726:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800372c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2302      	movs	r3, #2
 8003732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003742:	230a      	movs	r3, #10
 8003744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003748:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800374c:	4619      	mov	r1, r3
 800374e:	4808      	ldr	r0, [pc, #32]	@ (8003770 <HAL_SAI_MspInit+0x144>)
 8003750:	f002 fb96 	bl	8005e80 <HAL_GPIO_Init>

    }
}
 8003754:	bf00      	nop
 8003756:	37e8      	adds	r7, #232	@ 0xe8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40015c04 	.word	0x40015c04
 8003760:	24000e80 	.word	0x24000e80
 8003764:	58024400 	.word	0x58024400
 8003768:	58022000 	.word	0x58022000
 800376c:	40015c24 	.word	0x40015c24
 8003770:	58021800 	.word	0x58021800

08003774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <NMI_Handler+0x4>

0800377c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003780:	bf00      	nop
 8003782:	e7fd      	b.n	8003780 <HardFault_Handler+0x4>

08003784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <MemManage_Handler+0x4>

0800378c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <BusFault_Handler+0x4>

08003794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <UsageFault_Handler+0x4>

0800379c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037aa:	b480      	push	{r7}
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ca:	f000 f9c9 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e00a      	b.n	80037fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037e4:	f3af 8000 	nop.w
 80037e8:	4601      	mov	r1, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	60ba      	str	r2, [r7, #8]
 80037f0:	b2ca      	uxtb	r2, r1
 80037f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3301      	adds	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	dbf0      	blt.n	80037e4 <_read+0x12>
  }

  return len;
 8003802:	687b      	ldr	r3, [r7, #4]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e009      	b.n	8003832 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	60ba      	str	r2, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3301      	adds	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	dbf1      	blt.n	800381e <_write+0x12>
  }
  return len;
 800383a:	687b      	ldr	r3, [r7, #4]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_close>:

int _close(int file)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800386c:	605a      	str	r2, [r3, #4]
  return 0;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_isatty>:

int _isatty(int file)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b4:	4a14      	ldr	r2, [pc, #80]	@ (8003908 <_sbrk+0x5c>)
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <_sbrk+0x60>)
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <_sbrk+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <_sbrk+0x64>)
 80038ca:	4a12      	ldr	r2, [pc, #72]	@ (8003914 <_sbrk+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <_sbrk+0x64>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d207      	bcs.n	80038ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038dc:	f00a f88c 	bl	800d9f8 <__errno>
 80038e0:	4603      	mov	r3, r0
 80038e2:	220c      	movs	r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e009      	b.n	8003900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038ec:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f2:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <_sbrk+0x64>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4413      	add	r3, r2
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <_sbrk+0x64>)
 80038fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	24080000 	.word	0x24080000
 800390c:	00000400 	.word	0x00000400
 8003910:	24000e84 	.word	0x24000e84
 8003914:	24000fd8 	.word	0x24000fd8

08003918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800391c:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <SystemInit+0xe4>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	4a36      	ldr	r2, [pc, #216]	@ (80039fc <SystemInit+0xe4>)
 8003924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800392c:	4b34      	ldr	r3, [pc, #208]	@ (8003a00 <SystemInit+0xe8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	2b06      	cmp	r3, #6
 8003936:	d807      	bhi.n	8003948 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003938:	4b31      	ldr	r3, [pc, #196]	@ (8003a00 <SystemInit+0xe8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 030f 	bic.w	r3, r3, #15
 8003940:	4a2f      	ldr	r2, [pc, #188]	@ (8003a00 <SystemInit+0xe8>)
 8003942:	f043 0307 	orr.w	r3, r3, #7
 8003946:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003948:	4b2e      	ldr	r3, [pc, #184]	@ (8003a04 <SystemInit+0xec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a04 <SystemInit+0xec>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <SystemInit+0xec>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800395a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <SystemInit+0xec>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4929      	ldr	r1, [pc, #164]	@ (8003a04 <SystemInit+0xec>)
 8003960:	4b29      	ldr	r3, [pc, #164]	@ (8003a08 <SystemInit+0xf0>)
 8003962:	4013      	ands	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003966:	4b26      	ldr	r3, [pc, #152]	@ (8003a00 <SystemInit+0xe8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003972:	4b23      	ldr	r3, [pc, #140]	@ (8003a00 <SystemInit+0xe8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 030f 	bic.w	r3, r3, #15
 800397a:	4a21      	ldr	r2, [pc, #132]	@ (8003a00 <SystemInit+0xe8>)
 800397c:	f043 0307 	orr.w	r3, r3, #7
 8003980:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <SystemInit+0xec>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003988:	4b1e      	ldr	r3, [pc, #120]	@ (8003a04 <SystemInit+0xec>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800398e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <SystemInit+0xec>)
 8003990:	2200      	movs	r2, #0
 8003992:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <SystemInit+0xec>)
 8003996:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <SystemInit+0xf4>)
 8003998:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <SystemInit+0xec>)
 800399c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a10 <SystemInit+0xf8>)
 800399e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <SystemInit+0xec>)
 80039a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <SystemInit+0xfc>)
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <SystemInit+0xec>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039ac:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <SystemInit+0xec>)
 80039ae:	4a19      	ldr	r2, [pc, #100]	@ (8003a14 <SystemInit+0xfc>)
 80039b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <SystemInit+0xec>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <SystemInit+0xec>)
 80039ba:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <SystemInit+0xfc>)
 80039bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <SystemInit+0xec>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <SystemInit+0xec>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <SystemInit+0xec>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <SystemInit+0xec>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <SystemInit+0x100>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <SystemInit+0x104>)
 80039dc:	4013      	ands	r3, r2
 80039de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e2:	d202      	bcs.n	80039ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <SystemInit+0x108>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <SystemInit+0x10c>)
 80039ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00
 8003a00:	52002000 	.word	0x52002000
 8003a04:	58024400 	.word	0x58024400
 8003a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a0c:	02020200 	.word	0x02020200
 8003a10:	01ff0000 	.word	0x01ff0000
 8003a14:	01010280 	.word	0x01010280
 8003a18:	5c001000 	.word	0x5c001000
 8003a1c:	ffff0000 	.word	0xffff0000
 8003a20:	51008108 	.word	0x51008108
 8003a24:	52004000 	.word	0x52004000

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a2c:	f7ff ff74 	bl	8003918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a30:	480c      	ldr	r0, [pc, #48]	@ (8003a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a32:	490d      	ldr	r1, [pc, #52]	@ (8003a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a34:	4a0d      	ldr	r2, [pc, #52]	@ (8003a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a38:	e002      	b.n	8003a40 <LoopCopyDataInit>

08003a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3e:	3304      	adds	r3, #4

08003a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a44:	d3f9      	bcc.n	8003a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a46:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a48:	4c0a      	ldr	r4, [pc, #40]	@ (8003a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a4c:	e001      	b.n	8003a52 <LoopFillZerobss>

08003a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a50:	3204      	adds	r2, #4

08003a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a54:	d3fb      	bcc.n	8003a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a56:	f009 ffd5 	bl	800da04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7fc fe45 	bl	80006e8 <main>
  bx  lr
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a68:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003a6c:	0800ec28 	.word	0x0800ec28
  ldr r2, =_sbss
 8003a70:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8003a74:	24000fd8 	.word	0x24000fd8

08003a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC3_IRQHandler>
	...

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a82:	2003      	movs	r0, #3
 8003a84:	f001 fa32 	bl	8004eec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a88:	f004 fc98 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <HAL_Init+0x68>)
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	4913      	ldr	r1, [pc, #76]	@ (8003ae8 <HAL_Init+0x6c>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <HAL_Init+0x68>)
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae8 <HAL_Init+0x6c>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8003abc:	4a0b      	ldr	r2, [pc, #44]	@ (8003aec <HAL_Init+0x70>)
 8003abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <HAL_Init+0x74>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f000 f814 	bl	8003af4 <HAL_InitTick>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e002      	b.n	8003adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad6:	f7fe fd9b 	bl	8002610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	0800ebac 	.word	0x0800ebac
 8003aec:	24000004 	.word	0x24000004
 8003af0:	24000000 	.word	0x24000000

08003af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003afc:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_InitTick+0x60>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e021      	b.n	8003b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003b08:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <HAL_InitTick+0x64>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_InitTick+0x60>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fa09 	bl	8004f36 <HAL_SYSTICK_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00e      	b.n	8003b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d80a      	bhi.n	8003b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	f001 f9e1 	bl	8004f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b40:	4a06      	ldr	r2, [pc, #24]	@ (8003b5c <HAL_InitTick+0x68>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	2400000c 	.word	0x2400000c
 8003b58:	24000000 	.word	0x24000000
 8003b5c:	24000008 	.word	0x24000008

08003b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_IncTick+0x20>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2400000c 	.word	0x2400000c
 8003b84:	24000e88 	.word	0x24000e88

08003b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <HAL_GetTick+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	24000e88 	.word	0x24000e88

08003ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff ffee 	bl	8003b88 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2400000c 	.word	0x2400000c

08003be8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <HAL_GetREVID+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	5c001000 	.word	0x5c001000

08003c00 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003c08:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003c10:	4904      	ldr	r1, [pc, #16]	@ (8003c24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	58000400 	.word	0x58000400

08003c28 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	4904      	ldr	r1, [pc, #16]	@ (8003c50 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	58000400 	.word	0x58000400

08003c54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3360      	adds	r3, #96	@ 0x60
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	431a      	orrs	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	611a      	str	r2, [r3, #16]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3360      	adds	r3, #96	@ 0x60
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]
  }
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3330      	adds	r3, #48	@ 0x30
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	4413      	add	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	211f      	movs	r1, #31
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0e9b      	lsrs	r3, r3, #26
 8003d9c:	f003 011f 	and.w	r1, r3, #31
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	fa01 f303 	lsl.w	r3, r1, r3
 8003daa:	431a      	orrs	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0e5b      	lsrs	r3, r3, #25
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	0d1b      	lsrs	r3, r3, #20
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2107      	movs	r1, #7
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0d1b      	lsrs	r3, r3, #20
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0318 	and.w	r3, r3, #24
 8003e36:	4908      	ldr	r1, [pc, #32]	@ (8003e58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e38:	40d9      	lsrs	r1, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	000fffff 	.word	0x000fffff

08003e5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6093      	str	r3, [r2, #8]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	5fffffc0 	.word	0x5fffffc0

08003e80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e94:	d101      	bne.n	8003e9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <LL_ADC_EnableInternalRegulator+0x24>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	6fffffc0 	.word	0x6fffffc0

08003ed0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ee4:	d101      	bne.n	8003eea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <LL_ADC_IsEnabled+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_ADC_IsEnabled+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d101      	bne.n	8003f36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d101      	bne.n	8003f5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b089      	sub	sp, #36	@ 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e18f      	b.n	80042a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fe fb55 	bl	8002644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff67 	bl	8003e80 <LL_ADC_IsDeepPowerDownEnabled>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff4d 	bl	8003e5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff ff82 	bl	8003ed0 <LL_ADC_IsInternalRegulatorEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d114      	bne.n	8003ffc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff66 	bl	8003ea8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fdc:	4b87      	ldr	r3, [pc, #540]	@ (80041fc <HAL_ADC_Init+0x290>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	4a87      	ldr	r2, [pc, #540]	@ (8004200 <HAL_ADC_Init+0x294>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	3301      	adds	r3, #1
 8003fec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fee:	e002      	b.n	8003ff6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f9      	bne.n	8003ff0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff65 	bl	8003ed0 <LL_ADC_IsInternalRegulatorEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	f043 0201 	orr.w	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff76 	bl	8003f1e <LL_ADC_REG_IsConversionOngoing>
 8004032:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 8129 	bne.w	8004294 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 8125 	bne.w	8004294 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff4a 	bl	8003ef8 <LL_ADC_IsEnabled>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d136      	bne.n	80040d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a65      	ldr	r2, [pc, #404]	@ (8004204 <HAL_ADC_Init+0x298>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_ADC_Init+0x112>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a63      	ldr	r2, [pc, #396]	@ (8004208 <HAL_ADC_Init+0x29c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10e      	bne.n	800409c <HAL_ADC_Init+0x130>
 800407e:	4861      	ldr	r0, [pc, #388]	@ (8004204 <HAL_ADC_Init+0x298>)
 8004080:	f7ff ff3a 	bl	8003ef8 <LL_ADC_IsEnabled>
 8004084:	4604      	mov	r4, r0
 8004086:	4860      	ldr	r0, [pc, #384]	@ (8004208 <HAL_ADC_Init+0x29c>)
 8004088:	f7ff ff36 	bl	8003ef8 <LL_ADC_IsEnabled>
 800408c:	4603      	mov	r3, r0
 800408e:	4323      	orrs	r3, r4
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <HAL_ADC_Init+0x142>
 800409c:	485b      	ldr	r0, [pc, #364]	@ (800420c <HAL_ADC_Init+0x2a0>)
 800409e:	f7ff ff2b 	bl	8003ef8 <LL_ADC_IsEnabled>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d012      	beq.n	80040d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a53      	ldr	r2, [pc, #332]	@ (8004204 <HAL_ADC_Init+0x298>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_ADC_Init+0x15a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a51      	ldr	r2, [pc, #324]	@ (8004208 <HAL_ADC_Init+0x29c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_Init+0x15e>
 80040c6:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_ADC_Init+0x2a4>)
 80040c8:	e000      	b.n	80040cc <HAL_ADC_Init+0x160>
 80040ca:	4a52      	ldr	r2, [pc, #328]	@ (8004214 <HAL_ADC_Init+0x2a8>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f7ff fdbe 	bl	8003c54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80040d8:	f7ff fd86 	bl	8003be8 <HAL_GetREVID>
 80040dc:	4603      	mov	r3, r0
 80040de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d914      	bls.n	8004110 <HAL_ADC_Init+0x1a4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d110      	bne.n	8004110 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7d5b      	ldrb	r3, [r3, #21]
 80040f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7f1b      	ldrb	r3, [r3, #28]
 8004104:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004106:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004108:	f043 030c 	orr.w	r3, r3, #12
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e00d      	b.n	800412c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	7d5b      	ldrb	r3, [r3, #21]
 8004114:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800411a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004120:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7f1b      	ldrb	r3, [r3, #28]
 8004126:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7f1b      	ldrb	r3, [r3, #28]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d106      	bne.n	8004142 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	3b01      	subs	r3, #1
 800413a:	045b      	lsls	r3, r3, #17
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4b2c      	ldr	r3, [pc, #176]	@ (8004218 <HAL_ADC_Init+0x2ac>)
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	430b      	orrs	r3, r1
 8004170:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fed1 	bl	8003f1e <LL_ADC_REG_IsConversionOngoing>
 800417c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fede 	bl	8003f44 <LL_ADC_INJ_IsConversionOngoing>
 8004188:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d15f      	bne.n	8004250 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d15c      	bne.n	8004250 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	7d1b      	ldrb	r3, [r3, #20]
 800419a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <HAL_ADC_Init+0x2b0>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	430b      	orrs	r3, r1
 80041b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d130      	bne.n	8004224 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_ADC_Init+0x2b4>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041d6:	3a01      	subs	r2, #1
 80041d8:	0411      	lsls	r1, r2, #16
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041ea:	430a      	orrs	r2, r1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	611a      	str	r2, [r3, #16]
 80041f8:	e01c      	b.n	8004234 <HAL_ADC_Init+0x2c8>
 80041fa:	bf00      	nop
 80041fc:	24000000 	.word	0x24000000
 8004200:	053e2d63 	.word	0x053e2d63
 8004204:	40022000 	.word	0x40022000
 8004208:	40022100 	.word	0x40022100
 800420c:	58026000 	.word	0x58026000
 8004210:	40022300 	.word	0x40022300
 8004214:	58026300 	.word	0x58026300
 8004218:	fff0c003 	.word	0xfff0c003
 800421c:	ffffbffc 	.word	0xffffbffc
 8004220:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb8c 	bl	8004968 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	f023 010f 	bic.w	r1, r3, #15
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004270:	e007      	b.n	8004282 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 020f 	bic.w	r2, r2, #15
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
 8004292:	e007      	b.n	80042a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	f043 0210 	orr.w	r2, r3, #16
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3724      	adds	r7, #36	@ 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop

080042b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b0a1      	sub	sp, #132	@ 0x84
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a65      	ldr	r2, [pc, #404]	@ (8004460 <HAL_ADC_ConfigChannel+0x1b0>)
 80042ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADC_ConfigChannel+0x2a>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e32e      	b.n	8004938 <HAL_ADC_ConfigChannel+0x688>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fe19 	bl	8003f1e <LL_ADC_REG_IsConversionOngoing>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8313 	bne.w	800491a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db2c      	blt.n	8004356 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004304:	2b00      	cmp	r3, #0
 8004306:	d108      	bne.n	800431a <HAL_ADC_ConfigChannel+0x6a>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	0e9b      	lsrs	r3, r3, #26
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	e016      	b.n	8004348 <HAL_ADC_ConfigChannel+0x98>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800432a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800432c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004332:	2320      	movs	r3, #32
 8004334:	e003      	b.n	800433e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2201      	movs	r2, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	69d1      	ldr	r1, [r2, #28]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	430b      	orrs	r3, r1
 8004354:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f7ff fcfe 	bl	8003d64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fdd6 	bl	8003f1e <LL_ADC_REG_IsConversionOngoing>
 8004372:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fde3 	bl	8003f44 <LL_ADC_INJ_IsConversionOngoing>
 800437e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 80b8 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80b4 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	461a      	mov	r2, r3
 800439e:	f7ff fd0d 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043a2:	4b30      	ldr	r3, [pc, #192]	@ (8004464 <HAL_ADC_ConfigChannel+0x1b4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80043aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ae:	d10b      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x118>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	e01d      	b.n	8004404 <HAL_ADC_ConfigChannel+0x154>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x13e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	e00a      	b.n	8004404 <HAL_ADC_ConfigChannel+0x154>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d02c      	beq.n	8004468 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6919      	ldr	r1, [r3, #16]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800441c:	f7ff fc4e 	bl	8003cbc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6919      	ldr	r1, [r3, #16]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	7e5b      	ldrb	r3, [r3, #25]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d102      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x186>
 8004430:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004434:	e000      	b.n	8004438 <HAL_ADC_ConfigChannel+0x188>
 8004436:	2300      	movs	r3, #0
 8004438:	461a      	mov	r2, r3
 800443a:	f7ff fc78 	bl	8003d2e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	7e1b      	ldrb	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x1a4>
 800444e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004452:	e000      	b.n	8004456 <HAL_ADC_ConfigChannel+0x1a6>
 8004454:	2300      	movs	r3, #0
 8004456:	461a      	mov	r2, r3
 8004458:	f7ff fc50 	bl	8003cfc <LL_ADC_SetDataRightShift>
 800445c:	e04c      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x248>
 800445e:	bf00      	nop
 8004460:	47ff0000 	.word	0x47ff0000
 8004464:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	069b      	lsls	r3, r3, #26
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800448a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	069b      	lsls	r3, r3, #26
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044ae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	069b      	lsls	r3, r3, #26
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044d2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	069b      	lsls	r3, r3, #26
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d107      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fcfb 	bl	8003ef8 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 8211 	bne.w	800492c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	461a      	mov	r2, r3
 8004518:	f7ff fc7c 	bl	8003e14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4aa1      	ldr	r2, [pc, #644]	@ (80047a8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	f040 812e 	bne.w	8004784 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x2a0>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	3301      	adds	r3, #1
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2b09      	cmp	r3, #9
 8004546:	bf94      	ite	ls
 8004548:	2301      	movls	r3, #1
 800454a:	2300      	movhi	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	e019      	b.n	8004584 <HAL_ADC_ConfigChannel+0x2d4>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800455e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004560:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e003      	b.n	8004574 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800456c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2b09      	cmp	r3, #9
 800457c:	bf94      	ite	ls
 800457e:	2301      	movls	r3, #1
 8004580:	2300      	movhi	r3, #0
 8004582:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004584:	2b00      	cmp	r3, #0
 8004586:	d079      	beq.n	800467c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x2f4>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	069b      	lsls	r3, r3, #26
 800459e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045a2:	e015      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x320>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80045b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80045b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80045bc:	2320      	movs	r3, #32
 80045be:	e003      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80045c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	069b      	lsls	r3, r3, #26
 80045cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x340>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0e9b      	lsrs	r3, r3, #26
 80045e2:	3301      	adds	r3, #1
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	e017      	b.n	8004620 <HAL_ADC_ConfigChannel+0x370>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80045fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004600:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	e003      	b.n	8004614 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	3301      	adds	r3, #1
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	ea42 0103 	orr.w	r1, r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x396>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0e9b      	lsrs	r3, r3, #26
 8004636:	3301      	adds	r3, #1
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4613      	mov	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4413      	add	r3, r2
 8004642:	051b      	lsls	r3, r3, #20
 8004644:	e018      	b.n	8004678 <HAL_ADC_ConfigChannel+0x3c8>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464e:	fa93 f3a3 	rbit	r3, r3
 8004652:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800465e:	2320      	movs	r3, #32
 8004660:	e003      	b.n	800466a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3301      	adds	r3, #1
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004678:	430b      	orrs	r3, r1
 800467a:	e07e      	b.n	800477a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004684:	2b00      	cmp	r3, #0
 8004686:	d107      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x3e8>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0e9b      	lsrs	r3, r3, #26
 800468e:	3301      	adds	r3, #1
 8004690:	069b      	lsls	r3, r3, #26
 8004692:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004696:	e015      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x414>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80046b0:	2320      	movs	r3, #32
 80046b2:	e003      	b.n	80046bc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80046b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	069b      	lsls	r3, r3, #26
 80046c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x434>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	0e9b      	lsrs	r3, r3, #26
 80046d6:	3301      	adds	r3, #1
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	e017      	b.n	8004714 <HAL_ADC_ConfigChannel+0x464>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	61bb      	str	r3, [r7, #24]
  return result;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	e003      	b.n	8004708 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	ea42 0103 	orr.w	r1, r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x490>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	0e9b      	lsrs	r3, r3, #26
 800472a:	3301      	adds	r3, #1
 800472c:	f003 021f 	and.w	r2, r3, #31
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	3b1e      	subs	r3, #30
 8004738:	051b      	lsls	r3, r3, #20
 800473a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800473e:	e01b      	b.n	8004778 <HAL_ADC_ConfigChannel+0x4c8>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	60fb      	str	r3, [r7, #12]
  return result;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	f003 021f 	and.w	r2, r3, #31
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	3b1e      	subs	r3, #30
 8004772:	051b      	lsls	r3, r3, #20
 8004774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004778:	430b      	orrs	r3, r1
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	6892      	ldr	r2, [r2, #8]
 800477e:	4619      	mov	r1, r3
 8004780:	f7ff fb1c 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f280 80cf 	bge.w	800492c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a06      	ldr	r2, [pc, #24]	@ (80047ac <HAL_ADC_ConfigChannel+0x4fc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_ADC_ConfigChannel+0x4f2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <HAL_ADC_ConfigChannel+0x500>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10a      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x508>
 80047a2:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <HAL_ADC_ConfigChannel+0x504>)
 80047a4:	e009      	b.n	80047ba <HAL_ADC_ConfigChannel+0x50a>
 80047a6:	bf00      	nop
 80047a8:	47ff0000 	.word	0x47ff0000
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40022100 	.word	0x40022100
 80047b4:	40022300 	.word	0x40022300
 80047b8:	4b61      	ldr	r3, [pc, #388]	@ (8004940 <HAL_ADC_ConfigChannel+0x690>)
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fa70 	bl	8003ca0 <LL_ADC_GetCommonPathInternalCh>
 80047c0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004944 <HAL_ADC_ConfigChannel+0x694>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_ADC_ConfigChannel+0x526>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004948 <HAL_ADC_ConfigChannel+0x698>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10e      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x544>
 80047d6:	485b      	ldr	r0, [pc, #364]	@ (8004944 <HAL_ADC_ConfigChannel+0x694>)
 80047d8:	f7ff fb8e 	bl	8003ef8 <LL_ADC_IsEnabled>
 80047dc:	4604      	mov	r4, r0
 80047de:	485a      	ldr	r0, [pc, #360]	@ (8004948 <HAL_ADC_ConfigChannel+0x698>)
 80047e0:	f7ff fb8a 	bl	8003ef8 <LL_ADC_IsEnabled>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4323      	orrs	r3, r4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e008      	b.n	8004806 <HAL_ADC_ConfigChannel+0x556>
 80047f4:	4855      	ldr	r0, [pc, #340]	@ (800494c <HAL_ADC_ConfigChannel+0x69c>)
 80047f6:	f7ff fb7f 	bl	8003ef8 <LL_ADC_IsEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d07d      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a50      	ldr	r2, [pc, #320]	@ (8004950 <HAL_ADC_ConfigChannel+0x6a0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d130      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x5c6>
 8004814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d12b      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4a      	ldr	r2, [pc, #296]	@ (800494c <HAL_ADC_ConfigChannel+0x69c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	f040 8081 	bne.w	800492c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a45      	ldr	r2, [pc, #276]	@ (8004944 <HAL_ADC_ConfigChannel+0x694>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_ADC_ConfigChannel+0x58e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a43      	ldr	r2, [pc, #268]	@ (8004948 <HAL_ADC_ConfigChannel+0x698>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x592>
 800483e:	4a45      	ldr	r2, [pc, #276]	@ (8004954 <HAL_ADC_ConfigChannel+0x6a4>)
 8004840:	e000      	b.n	8004844 <HAL_ADC_ConfigChannel+0x594>
 8004842:	4a3f      	ldr	r2, [pc, #252]	@ (8004940 <HAL_ADC_ConfigChannel+0x690>)
 8004844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004846:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7ff fa14 	bl	8003c7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_ADC_ConfigChannel+0x6a8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	4a40      	ldr	r2, [pc, #256]	@ (800495c <HAL_ADC_ConfigChannel+0x6ac>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	3301      	adds	r3, #1
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004866:	e002      	b.n	800486e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f9      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004874:	e05a      	b.n	800492c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a39      	ldr	r2, [pc, #228]	@ (8004960 <HAL_ADC_ConfigChannel+0x6b0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d11e      	bne.n	80048be <HAL_ADC_ConfigChannel+0x60e>
 8004880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004882:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d119      	bne.n	80048be <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2f      	ldr	r2, [pc, #188]	@ (800494c <HAL_ADC_ConfigChannel+0x69c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d14b      	bne.n	800492c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2a      	ldr	r2, [pc, #168]	@ (8004944 <HAL_ADC_ConfigChannel+0x694>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x5f8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a29      	ldr	r2, [pc, #164]	@ (8004948 <HAL_ADC_ConfigChannel+0x698>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x5fc>
 80048a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_ADC_ConfigChannel+0x6a4>)
 80048aa:	e000      	b.n	80048ae <HAL_ADC_ConfigChannel+0x5fe>
 80048ac:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <HAL_ADC_ConfigChannel+0x690>)
 80048ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7ff f9df 	bl	8003c7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048bc:	e036      	b.n	800492c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <HAL_ADC_ConfigChannel+0x6b4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d131      	bne.n	800492c <HAL_ADC_ConfigChannel+0x67c>
 80048c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d12c      	bne.n	800492c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	@ (800494c <HAL_ADC_ConfigChannel+0x69c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d127      	bne.n	800492c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	@ (8004944 <HAL_ADC_ConfigChannel+0x694>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x640>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <HAL_ADC_ConfigChannel+0x698>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x644>
 80048f0:	4a18      	ldr	r2, [pc, #96]	@ (8004954 <HAL_ADC_ConfigChannel+0x6a4>)
 80048f2:	e000      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x646>
 80048f4:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <HAL_ADC_ConfigChannel+0x690>)
 80048f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7ff f9bb 	bl	8003c7a <LL_ADC_SetCommonPathInternalCh>
 8004904:	e012      	b.n	800492c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004918:	e008      	b.n	800492c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004934:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004938:	4618      	mov	r0, r3
 800493a:	3784      	adds	r7, #132	@ 0x84
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	58026300 	.word	0x58026300
 8004944:	40022000 	.word	0x40022000
 8004948:	40022100 	.word	0x40022100
 800494c:	58026000 	.word	0x58026000
 8004950:	cb840000 	.word	0xcb840000
 8004954:	40022300 	.word	0x40022300
 8004958:	24000000 	.word	0x24000000
 800495c:	053e2d63 	.word	0x053e2d63
 8004960:	c7520000 	.word	0xc7520000
 8004964:	cfb80000 	.word	0xcfb80000

08004968 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7a      	ldr	r2, [pc, #488]	@ (8004b60 <ADC_ConfigureBoostMode+0x1f8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <ADC_ConfigureBoostMode+0x1c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a79      	ldr	r2, [pc, #484]	@ (8004b64 <ADC_ConfigureBoostMode+0x1fc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d109      	bne.n	8004998 <ADC_ConfigureBoostMode+0x30>
 8004984:	4b78      	ldr	r3, [pc, #480]	@ (8004b68 <ADC_ConfigureBoostMode+0x200>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e008      	b.n	80049aa <ADC_ConfigureBoostMode+0x42>
 8004998:	4b74      	ldr	r3, [pc, #464]	@ (8004b6c <ADC_ConfigureBoostMode+0x204>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01c      	beq.n	80049e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049ae:	f003 fe7f 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 80049b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049bc:	d010      	beq.n	80049e0 <ADC_ConfigureBoostMode+0x78>
 80049be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049c2:	d873      	bhi.n	8004aac <ADC_ConfigureBoostMode+0x144>
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c8:	d002      	beq.n	80049d0 <ADC_ConfigureBoostMode+0x68>
 80049ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ce:	d16d      	bne.n	8004aac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	60fb      	str	r3, [r7, #12]
        break;
 80049de:	e068      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	60fb      	str	r3, [r7, #12]
        break;
 80049e6:	e064      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	f005 f8c4 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 80049f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049fe:	d051      	beq.n	8004aa4 <ADC_ConfigureBoostMode+0x13c>
 8004a00:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a04:	d854      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a06:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a0a:	d047      	beq.n	8004a9c <ADC_ConfigureBoostMode+0x134>
 8004a0c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a10:	d84e      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a12:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a16:	d03d      	beq.n	8004a94 <ADC_ConfigureBoostMode+0x12c>
 8004a18:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a1c:	d848      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a22:	d033      	beq.n	8004a8c <ADC_ConfigureBoostMode+0x124>
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a28:	d842      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a2a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a2e:	d029      	beq.n	8004a84 <ADC_ConfigureBoostMode+0x11c>
 8004a30:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a34:	d83c      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a36:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a3a:	d01a      	beq.n	8004a72 <ADC_ConfigureBoostMode+0x10a>
 8004a3c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a40:	d836      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a42:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a46:	d014      	beq.n	8004a72 <ADC_ConfigureBoostMode+0x10a>
 8004a48:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a4c:	d830      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d00e      	beq.n	8004a72 <ADC_ConfigureBoostMode+0x10a>
 8004a54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a58:	d82a      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a5e:	d008      	beq.n	8004a72 <ADC_ConfigureBoostMode+0x10a>
 8004a60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a64:	d824      	bhi.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
 8004a66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a6a:	d002      	beq.n	8004a72 <ADC_ConfigureBoostMode+0x10a>
 8004a6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a70:	d11e      	bne.n	8004ab0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	60fb      	str	r3, [r7, #12]
        break;
 8004a82:	e016      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]
        break;
 8004a8a:	e012      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	60fb      	str	r3, [r7, #12]
        break;
 8004a92:	e00e      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	60fb      	str	r3, [r7, #12]
        break;
 8004a9a:	e00a      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	09db      	lsrs	r3, r3, #7
 8004aa0:	60fb      	str	r3, [r7, #12]
        break;
 8004aa2:	e006      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	60fb      	str	r3, [r7, #12]
        break;
 8004aaa:	e002      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ab0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004ab2:	f7ff f899 	bl	8003be8 <HAL_GetREVID>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d815      	bhi.n	8004aec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b70 <ADC_ConfigureBoostMode+0x208>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d908      	bls.n	8004ada <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ad8:	e03e      	b.n	8004b58 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae8:	609a      	str	r2, [r3, #8]
}
 8004aea:	e035      	b.n	8004b58 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <ADC_ConfigureBoostMode+0x20c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d808      	bhi.n	8004b0c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b08:	609a      	str	r2, [r3, #8]
}
 8004b0a:	e025      	b.n	8004b58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b78 <ADC_ConfigureBoostMode+0x210>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d80a      	bhi.n	8004b2a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	e016      	b.n	8004b58 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <ADC_ConfigureBoostMode+0x214>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d80a      	bhi.n	8004b48 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b44:	609a      	str	r2, [r3, #8]
}
 8004b46:	e007      	b.n	8004b58 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40022100 	.word	0x40022100
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	58026300 	.word	0x58026300
 8004b70:	01312d00 	.word	0x01312d00
 8004b74:	005f5e10 	.word	0x005f5e10
 8004b78:	00bebc20 	.word	0x00bebc20
 8004b7c:	017d7840 	.word	0x017d7840

08004b80 <LL_ADC_IsEnabled>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <LL_ADC_IsEnabled+0x18>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <LL_ADC_IsEnabled+0x1a>
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d101      	bne.n	8004bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b09f      	sub	sp, #124	@ 0x7c
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e0be      	b.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d102      	bne.n	8004c0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c04:	4b5b      	ldr	r3, [pc, #364]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	e001      	b.n	8004c0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e09d      	b.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ffb9 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004c34:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff ffb3 	bl	8004ba6 <LL_ADC_REG_IsConversionOngoing>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d17f      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d17c      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a47      	ldr	r2, [pc, #284]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a46      	ldr	r2, [pc, #280]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004c60:	4b45      	ldr	r3, [pc, #276]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c62:	e000      	b.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c64:	4b45      	ldr	r3, [pc, #276]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c66:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d039      	beq.n	8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a38      	ldr	r2, [pc, #224]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10e      	bne.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c96:	4836      	ldr	r0, [pc, #216]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c98:	f7ff ff72 	bl	8004b80 <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4835      	ldr	r0, [pc, #212]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ca0:	f7ff ff6e 	bl	8004b80 <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4323      	orrs	r3, r4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004cb4:	4832      	ldr	r0, [pc, #200]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004cb6:	f7ff ff63 	bl	8004b80 <LL_ADC_IsEnabled>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d047      	beq.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	4b2d      	ldr	r3, [pc, #180]	@ (8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ce2:	e03a      	b.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10e      	bne.n	8004d22 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004d04:	481a      	ldr	r0, [pc, #104]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d06:	f7ff ff3b 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4819      	ldr	r0, [pc, #100]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d0e:	f7ff ff37 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4323      	orrs	r3, r4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf0c      	ite	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	2300      	movne	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	e008      	b.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004d22:	4817      	ldr	r0, [pc, #92]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d24:	f7ff ff2c 	bl	8004b80 <LL_ADC_IsEnabled>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4b11      	ldr	r3, [pc, #68]	@ (8004d84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d44:	e009      	b.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	f043 0220 	orr.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004d58:	e000      	b.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	377c      	adds	r7, #124	@ 0x7c
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd90      	pop	{r4, r7, pc}
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40022100 	.word	0x40022100
 8004d78:	40022300 	.word	0x40022300
 8004d7c:	58026300 	.word	0x58026300
 8004d80:	58026000 	.word	0x58026000
 8004d84:	fffff0e0 	.word	0xfffff0e0

08004d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004da4:	4013      	ands	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004db0:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <__NVIC_SetPriorityGrouping+0x44>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db6:	4a04      	ldr	r2, [pc, #16]	@ (8004dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	60d3      	str	r3, [r2, #12]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000ed00 	.word	0xe000ed00
 8004dcc:	05fa0000 	.word	0x05fa0000

08004dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd4:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 0307 	and.w	r3, r3, #7
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	6039      	str	r1, [r7, #0]
 8004df6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	db0a      	blt.n	8004e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	490c      	ldr	r1, [pc, #48]	@ (8004e38 <__NVIC_SetPriority+0x4c>)
 8004e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e0a:	0112      	lsls	r2, r2, #4
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	440b      	add	r3, r1
 8004e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e14:	e00a      	b.n	8004e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	4908      	ldr	r1, [pc, #32]	@ (8004e3c <__NVIC_SetPriority+0x50>)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	3b04      	subs	r3, #4
 8004e24:	0112      	lsls	r2, r2, #4
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	440b      	add	r3, r1
 8004e2a:	761a      	strb	r2, [r3, #24]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000e100 	.word	0xe000e100
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	@ 0x24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f1c3 0307 	rsb	r3, r3, #7
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	bf28      	it	cs
 8004e5e:	2304      	movcs	r3, #4
 8004e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3304      	adds	r3, #4
 8004e66:	2b06      	cmp	r3, #6
 8004e68:	d902      	bls.n	8004e70 <NVIC_EncodePriority+0x30>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3b03      	subs	r3, #3
 8004e6e:	e000      	b.n	8004e72 <NVIC_EncodePriority+0x32>
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	401a      	ands	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e88:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43d9      	mvns	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e98:	4313      	orrs	r3, r2
         );
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3724      	adds	r7, #36	@ 0x24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb8:	d301      	bcc.n	8004ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00f      	b.n	8004ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <SysTick_Config+0x40>)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ec6:	210f      	movs	r1, #15
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	f7ff ff8e 	bl	8004dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed0:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <SysTick_Config+0x40>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ed6:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <SysTick_Config+0x40>)
 8004ed8:	2207      	movs	r2, #7
 8004eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	e000e010 	.word	0xe000e010

08004eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff47 	bl	8004d88 <__NVIC_SetPriorityGrouping>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	4603      	mov	r3, r0
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f10:	f7ff ff5e 	bl	8004dd0 <__NVIC_GetPriorityGrouping>
 8004f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff ff90 	bl	8004e40 <NVIC_EncodePriority>
 8004f20:	4602      	mov	r2, r0
 8004f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ff5f 	bl	8004dec <__NVIC_SetPriority>
}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ffb2 	bl	8004ea8 <SysTick_Config>
 8004f44:	4603      	mov	r3, r0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e0e3      	b.n	800512a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2223      	movs	r2, #35	@ 0x23
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fd fc67 	bl	8002848 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8005134 <HAL_ETH_Init+0x1e4>)
 8004f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f80:	4a6c      	ldr	r2, [pc, #432]	@ (8005134 <HAL_ETH_Init+0x1e4>)
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005134 <HAL_ETH_Init+0x1e4>)
 8004f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	7a1b      	ldrb	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fe fe2d 	bl	8003c00 <HAL_SYSCFG_ETHInterfaceSelect>
 8004fa6:	e003      	b.n	8004fb0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004fa8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004fac:	f7fe fe28 	bl	8003c00 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004fb0:	4b61      	ldr	r3, [pc, #388]	@ (8005138 <HAL_ETH_Init+0x1e8>)
 8004fb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fcc:	f7fe fddc 	bl	8003b88 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fd2:	e011      	b.n	8004ff8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fd4:	f7fe fdd8 	bl	8003b88 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004fe2:	d909      	bls.n	8004ff8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	22e0      	movs	r2, #224	@ 0xe0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e098      	b.n	800512a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e4      	bne.n	8004fd4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f89e 	bl	800514c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005010:	f003 fb4e 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 8005014:	4603      	mov	r3, r0
 8005016:	4a49      	ldr	r2, [pc, #292]	@ (800513c <HAL_ETH_Init+0x1ec>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	0c9a      	lsrs	r2, r3, #18
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3a01      	subs	r2, #1
 8005024:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa81 	bl	8005530 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005036:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800503a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005046:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800504a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	22e0      	movs	r2, #224	@ 0xe0
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e05d      	b.n	800512a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005076:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800507a:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <HAL_ETH_Init+0x1f0>)
 800507c:	4013      	ands	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6952      	ldr	r2, [r2, #20]
 8005082:	0051      	lsls	r1, r2, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	430b      	orrs	r3, r1
 800508a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800508e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fae9 	bl	800566a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb2f 	bl	80056fc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	3305      	adds	r3, #5
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	3303      	adds	r3, #3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	061a      	lsls	r2, r3, #24
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	3302      	adds	r3, #2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	3301      	adds	r3, #1
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <HAL_ETH_Init+0x1f4>)
 80050fe:	430b      	orrs	r3, r1
 8005100:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <HAL_ETH_Init+0x1f8>)
 8005112:	430b      	orrs	r3, r1
 8005114:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2210      	movs	r2, #16
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	58024400 	.word	0x58024400
 8005138:	58000400 	.word	0x58000400
 800513c:	431bde83 	.word	0x431bde83
 8005140:	ffff8001 	.word	0xffff8001
 8005144:	0c020060 	.word	0x0c020060
 8005148:	0c20c000 	.word	0x0c20c000

0800514c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800515c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005164:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005166:	f003 faa3 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 800516a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d804      	bhi.n	800517e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	e022      	b.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a16      	ldr	r2, [pc, #88]	@ (80051dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d204      	bcs.n	8005190 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e019      	b.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a13      	ldr	r2, [pc, #76]	@ (80051e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d915      	bls.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a12      	ldr	r2, [pc, #72]	@ (80051e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d804      	bhi.n	80051aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e00c      	b.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a0e      	ldr	r2, [pc, #56]	@ (80051e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d804      	bhi.n	80051bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	e003      	b.n	80051c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80051c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	02160ebf 	.word	0x02160ebf
 80051dc:	03938700 	.word	0x03938700
 80051e0:	05f5e0ff 	.word	0x05f5e0ff
 80051e4:	08f0d17f 	.word	0x08f0d17f
 80051e8:	0ee6b27f 	.word	0x0ee6b27f

080051ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	791b      	ldrb	r3, [r3, #4]
 8005204:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7b1b      	ldrb	r3, [r3, #12]
 800520c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800520e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	7b5b      	ldrb	r3, [r3, #13]
 8005214:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7b9b      	ldrb	r3, [r3, #14]
 800521c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800521e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	7bdb      	ldrb	r3, [r3, #15]
 8005224:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005226:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	7c12      	ldrb	r2, [r2, #16]
 800522c:	2a00      	cmp	r2, #0
 800522e:	d102      	bne.n	8005236 <ETH_SetMACConfig+0x4a>
 8005230:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005234:	e000      	b.n	8005238 <ETH_SetMACConfig+0x4c>
 8005236:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005238:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	7c52      	ldrb	r2, [r2, #17]
 800523e:	2a00      	cmp	r2, #0
 8005240:	d102      	bne.n	8005248 <ETH_SetMACConfig+0x5c>
 8005242:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005246:	e000      	b.n	800524a <ETH_SetMACConfig+0x5e>
 8005248:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800524a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	7c9b      	ldrb	r3, [r3, #18]
 8005250:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005252:	431a      	orrs	r2, r3
               macconf->Speed |
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005258:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800525e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	7f1b      	ldrb	r3, [r3, #28]
 8005264:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	7f5b      	ldrb	r3, [r3, #29]
 800526c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800526e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	7f92      	ldrb	r2, [r2, #30]
 8005274:	2a00      	cmp	r2, #0
 8005276:	d102      	bne.n	800527e <ETH_SetMACConfig+0x92>
 8005278:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800527c:	e000      	b.n	8005280 <ETH_SetMACConfig+0x94>
 800527e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005280:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	7fdb      	ldrb	r3, [r3, #31]
 8005286:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005288:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d102      	bne.n	800529a <ETH_SetMACConfig+0xae>
 8005294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005298:	e000      	b.n	800529c <ETH_SetMACConfig+0xb0>
 800529a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800529c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80052a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80052ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b56      	ldr	r3, [pc, #344]	@ (8005418 <ETH_SetMACConfig+0x22c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	430b      	orrs	r3, r1
 80052c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80052f4:	2a00      	cmp	r2, #0
 80052f6:	d102      	bne.n	80052fe <ETH_SetMACConfig+0x112>
 80052f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052fc:	e000      	b.n	8005300 <ETH_SetMACConfig+0x114>
 80052fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005300:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	4b42      	ldr	r3, [pc, #264]	@ (800541c <ETH_SetMACConfig+0x230>)
 8005312:	4013      	ands	r3, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	430b      	orrs	r3, r1
 800531c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005324:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	4b3a      	ldr	r3, [pc, #232]	@ (8005420 <ETH_SetMACConfig+0x234>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	430b      	orrs	r3, r1
 8005340:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005348:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800534e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005356:	2a00      	cmp	r2, #0
 8005358:	d101      	bne.n	800535e <ETH_SetMACConfig+0x172>
 800535a:	2280      	movs	r2, #128	@ 0x80
 800535c:	e000      	b.n	8005360 <ETH_SetMACConfig+0x174>
 800535e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005360:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005366:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005372:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	430b      	orrs	r3, r1
 8005380:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005388:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005390:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f023 0103 	bic.w	r1, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80053b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	d101      	bne.n	80053da <ETH_SetMACConfig+0x1ee>
 80053d6:	2240      	movs	r2, #64	@ 0x40
 80053d8:	e000      	b.n	80053dc <ETH_SetMACConfig+0x1f0>
 80053da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80053dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80053e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80053ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80053fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	430a      	orrs	r2, r1
 8005408:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	00048083 	.word	0x00048083
 800541c:	c0f88000 	.word	0xc0f88000
 8005420:	fffffef0 	.word	0xfffffef0

08005424 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b38      	ldr	r3, [pc, #224]	@ (800551c <ETH_SetDMAConfig+0xf8>)
 800543a:	4013      	ands	r3, r2
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	6811      	ldr	r1, [r2, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	430b      	orrs	r3, r1
 8005446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800544a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	791b      	ldrb	r3, [r3, #4]
 8005450:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005456:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	7b1b      	ldrb	r3, [r3, #12]
 800545c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4b2c      	ldr	r3, [pc, #176]	@ (8005520 <ETH_SetDMAConfig+0xfc>)
 800546e:	4013      	ands	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	430b      	orrs	r3, r1
 8005478:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800547c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7b5b      	ldrb	r3, [r3, #13]
 8005482:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005494:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005498:	4b22      	ldr	r3, [pc, #136]	@ (8005524 <ETH_SetDMAConfig+0x100>)
 800549a:	4013      	ands	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	430b      	orrs	r3, r1
 80054a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	7d1b      	ldrb	r3, [r3, #20]
 80054b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80054b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	7f5b      	ldrb	r3, [r3, #29]
 80054bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80054ce:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <ETH_SetDMAConfig+0x104>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	430b      	orrs	r3, r1
 80054da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	7f1b      	ldrb	r3, [r3, #28]
 80054e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <ETH_SetDMAConfig+0x108>)
 80054fe:	4013      	ands	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	430b      	orrs	r3, r1
 8005508:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800550c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	ffff87fd 	.word	0xffff87fd
 8005520:	ffff2ffe 	.word	0xffff2ffe
 8005524:	fffec000 	.word	0xfffec000
 8005528:	ffc0efef 	.word	0xffc0efef
 800552c:	7fc0ffff 	.word	0x7fc0ffff

08005530 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0a4      	sub	sp, #144	@ 0x90
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800553e:	2300      	movs	r3, #0
 8005540:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005548:	2300      	movs	r3, #0
 800554a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800556c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005578:	2300      	movs	r3, #0
 800557a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005582:	2300      	movs	r3, #0
 8005584:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005588:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800558c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005594:	2300      	movs	r3, #0
 8005596:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80055aa:	2300      	movs	r3, #0
 80055ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80055b2:	2300      	movs	r3, #0
 80055b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80055bc:	2300      	movs	r3, #0
 80055be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055c8:	2320      	movs	r3, #32
 80055ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80055da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80055e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055ec:	2302      	movs	r3, #2
 80055ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800560a:	2300      	movs	r3, #0
 800560c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005614:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fde6 	bl	80051ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005620:	2301      	movs	r3, #1
 8005622:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005624:	2301      	movs	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005628:	2300      	movs	r3, #0
 800562a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005636:	2300      	movs	r3, #0
 8005638:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800563a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800563e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005640:	2300      	movs	r3, #0
 8005642:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005644:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005648:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800564a:	2300      	movs	r3, #0
 800564c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005650:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fee1 	bl	8005424 <ETH_SetDMAConfig>
}
 8005662:	bf00      	nop
 8005664:	3790      	adds	r7, #144	@ 0x90
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e01d      	b.n	80056b4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68d9      	ldr	r1, [r3, #12]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	440b      	add	r3, r1
 8005688:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	3206      	adds	r2, #6
 80056aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d9de      	bls.n	8005678 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c8:	461a      	mov	r2, r3
 80056ca:	2303      	movs	r3, #3
 80056cc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056dc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056ec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e023      	b.n	8005752 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6919      	ldr	r1, [r3, #16]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	440b      	add	r3, r1
 800571a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	3212      	adds	r2, #18
 8005748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d9d8      	bls.n	800570a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800577e:	461a      	mov	r2, r3
 8005780:	2303      	movs	r3, #3
 8005782:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005792:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057a6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b098      	sub	sp, #96	@ 0x60
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057c0:	4a84      	ldr	r2, [pc, #528]	@ (80059d4 <HAL_FDCAN_Init+0x21c>)
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	4611      	mov	r1, r2
 80057c8:	224c      	movs	r2, #76	@ 0x4c
 80057ca:	4618      	mov	r0, r3
 80057cc:	f008 f941 	bl	800da52 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e1c6      	b.n	8005b68 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7e      	ldr	r2, [pc, #504]	@ (80059d8 <HAL_FDCAN_Init+0x220>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d106      	bne.n	80057f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fd f94e 	bl	8002aa8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0210 	bic.w	r2, r2, #16
 800581a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800581c:	f7fe f9b4 	bl	8003b88 <HAL_GetTick>
 8005820:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005822:	e014      	b.n	800584e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005824:	f7fe f9b0 	bl	8003b88 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b0a      	cmp	r3, #10
 8005830:	d90d      	bls.n	800584e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005838:	f043 0201 	orr.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2203      	movs	r2, #3
 8005846:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e18c      	b.n	8005b68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b08      	cmp	r3, #8
 800585a:	d0e3      	beq.n	8005824 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800586c:	f7fe f98c 	bl	8003b88 <HAL_GetTick>
 8005870:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005872:	e014      	b.n	800589e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005874:	f7fe f988 	bl	8003b88 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d90d      	bls.n	800589e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005888:	f043 0201 	orr.w	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e164      	b.n	8005b68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0e3      	beq.n	8005874 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0202 	orr.w	r2, r2, #2
 80058ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d108      	bne.n	80058d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d2:	619a      	str	r2, [r3, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7c5b      	ldrb	r3, [r3, #17]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d108      	bne.n	8005900 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058fc:	619a      	str	r2, [r3, #24]
 80058fe:	e007      	b.n	8005910 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800590e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7c9b      	ldrb	r3, [r3, #18]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d108      	bne.n	800592a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005926:	619a      	str	r2, [r3, #24]
 8005928:	e007      	b.n	800593a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005938:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800595e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0210 	bic.w	r2, r2, #16
 800596e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d108      	bne.n	800598a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0204 	orr.w	r2, r2, #4
 8005986:	619a      	str	r2, [r3, #24]
 8005988:	e030      	b.n	80059ec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02c      	beq.n	80059ec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d020      	beq.n	80059dc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059a8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0210 	orr.w	r2, r2, #16
 80059b8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d114      	bne.n	80059ec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0220 	orr.w	r2, r2, #32
 80059d0:	619a      	str	r2, [r3, #24]
 80059d2:	e00b      	b.n	80059ec <HAL_FDCAN_Init+0x234>
 80059d4:	0800eb58 	.word	0x0800eb58
 80059d8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0220 	orr.w	r2, r2, #32
 80059ea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059fc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a04:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a20:	d115      	bne.n	8005a4e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a30:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	3b01      	subs	r3, #1
 8005a38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a3a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	3b01      	subs	r3, #1
 8005a44:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a4a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a4c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a74:	4413      	add	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d011      	beq.n	8005a9e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a82:	f023 0107 	bic.w	r1, r3, #7
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	3360      	adds	r3, #96	@ 0x60
 8005a8e:	443b      	add	r3, r7
 8005a90:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aae:	f023 0107 	bic.w	r1, r3, #7
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	3360      	adds	r3, #96	@ 0x60
 8005aba:	443b      	add	r3, r7
 8005abc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d012      	beq.n	8005af8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ada:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	3360      	adds	r3, #96	@ 0x60
 8005ae6:	443b      	add	r3, r7
 8005ae8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005aec:	011a      	lsls	r2, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3360      	adds	r3, #96	@ 0x60
 8005b14:	443b      	add	r3, r7
 8005b16:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a11      	ldr	r2, [pc, #68]	@ (8005b70 <HAL_FDCAN_Init+0x3b8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d107      	bne.n	8005b40 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f022 0203 	bic.w	r2, r2, #3
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f80b 	bl	8005b74 <FDCAN_CalcultateRamBlockAddresses>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005b64:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3760      	adds	r7, #96	@ 0x60
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	4000a000 	.word	0x4000a000

08005b74 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b80:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b8a:	4ba7      	ldr	r3, [pc, #668]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0091      	lsls	r1, r2, #2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	430b      	orrs	r3, r1
 8005b98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	041a      	lsls	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005bca:	4b97      	ldr	r3, [pc, #604]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0091      	lsls	r1, r2, #2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005c0c:	4b86      	ldr	r3, [pc, #536]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	0091      	lsls	r1, r2, #2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c26:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	041a      	lsls	r2, r3, #16
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c54:	4b74      	ldr	r3, [pc, #464]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	0091      	lsls	r1, r2, #2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c6e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c76:	041a      	lsls	r2, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4413      	add	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005c9c:	4b62      	ldr	r3, [pc, #392]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	0091      	lsls	r1, r2, #2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005cc8:	4b57      	ldr	r3, [pc, #348]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	0091      	lsls	r1, r2, #2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ce2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d0a:	4b47      	ldr	r3, [pc, #284]	@ (8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	0091      	lsls	r1, r2, #2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	430b      	orrs	r3, r1
 8005d18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d24:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2c:	041a      	lsls	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d40:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d48:	061a      	lsls	r2, r3, #24
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d58:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009a      	lsls	r2, r3, #2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	441a      	add	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005dc4:	441a      	add	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e0a:	fb01 f303 	mul.w	r3, r1, r3
 8005e0e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e10:	441a      	add	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d915      	bls.n	8005e50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e24:	e006      	b.n	8005e34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e26:	bf00      	nop
 8005e28:	ffff0003 	.word	0xffff0003
 8005e2c:	10002b00 	.word	0x10002b00
 8005e30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2203      	movs	r2, #3
 8005e48:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e010      	b.n	8005e72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e005      	b.n	8005e64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3304      	adds	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d3f3      	bcc.n	8005e58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e8e:	4b89      	ldr	r3, [pc, #548]	@ (80060b4 <HAL_GPIO_Init+0x234>)
 8005e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e92:	e194      	b.n	80061be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8186 	beq.w	80061b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d005      	beq.n	8005ec4 <HAL_GPIO_Init+0x44>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d130      	bne.n	8005f26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	2203      	movs	r2, #3
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efa:	2201      	movs	r2, #1
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0201 	and.w	r2, r3, #1
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d017      	beq.n	8005f62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4013      	ands	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d123      	bne.n	8005fb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	08da      	lsrs	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3208      	adds	r2, #8
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	220f      	movs	r2, #15
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	08da      	lsrs	r2, r3, #3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3208      	adds	r2, #8
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0203 	and.w	r2, r3, #3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80e0 	beq.w	80061b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80060b8 <HAL_GPIO_Init+0x238>)
 8005ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80060b8 <HAL_GPIO_Init+0x238>)
 8006000:	f043 0302 	orr.w	r3, r3, #2
 8006004:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006008:	4b2b      	ldr	r3, [pc, #172]	@ (80060b8 <HAL_GPIO_Init+0x238>)
 800600a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006016:	4a29      	ldr	r2, [pc, #164]	@ (80060bc <HAL_GPIO_Init+0x23c>)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	3302      	adds	r3, #2
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	220f      	movs	r2, #15
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a20      	ldr	r2, [pc, #128]	@ (80060c0 <HAL_GPIO_Init+0x240>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d052      	beq.n	80060e8 <HAL_GPIO_Init+0x268>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1f      	ldr	r2, [pc, #124]	@ (80060c4 <HAL_GPIO_Init+0x244>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d031      	beq.n	80060ae <HAL_GPIO_Init+0x22e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1e      	ldr	r2, [pc, #120]	@ (80060c8 <HAL_GPIO_Init+0x248>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <HAL_GPIO_Init+0x22a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1d      	ldr	r2, [pc, #116]	@ (80060cc <HAL_GPIO_Init+0x24c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d025      	beq.n	80060a6 <HAL_GPIO_Init+0x226>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1c      	ldr	r2, [pc, #112]	@ (80060d0 <HAL_GPIO_Init+0x250>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <HAL_GPIO_Init+0x222>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <HAL_GPIO_Init+0x254>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d019      	beq.n	800609e <HAL_GPIO_Init+0x21e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_GPIO_Init+0x258>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_GPIO_Init+0x21a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <HAL_GPIO_Init+0x25c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00d      	beq.n	8006096 <HAL_GPIO_Init+0x216>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <HAL_GPIO_Init+0x260>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <HAL_GPIO_Init+0x212>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a17      	ldr	r2, [pc, #92]	@ (80060e4 <HAL_GPIO_Init+0x264>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_GPIO_Init+0x20e>
 800608a:	2309      	movs	r3, #9
 800608c:	e02d      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800608e:	230a      	movs	r3, #10
 8006090:	e02b      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 8006092:	2308      	movs	r3, #8
 8006094:	e029      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 8006096:	2307      	movs	r3, #7
 8006098:	e027      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800609a:	2306      	movs	r3, #6
 800609c:	e025      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800609e:	2305      	movs	r3, #5
 80060a0:	e023      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060a2:	2304      	movs	r3, #4
 80060a4:	e021      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060a6:	2303      	movs	r3, #3
 80060a8:	e01f      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e01d      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e01b      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060b2:	bf00      	nop
 80060b4:	58000080 	.word	0x58000080
 80060b8:	58024400 	.word	0x58024400
 80060bc:	58000400 	.word	0x58000400
 80060c0:	58020000 	.word	0x58020000
 80060c4:	58020400 	.word	0x58020400
 80060c8:	58020800 	.word	0x58020800
 80060cc:	58020c00 	.word	0x58020c00
 80060d0:	58021000 	.word	0x58021000
 80060d4:	58021400 	.word	0x58021400
 80060d8:	58021800 	.word	0x58021800
 80060dc:	58021c00 	.word	0x58021c00
 80060e0:	58022000 	.word	0x58022000
 80060e4:	58022400 	.word	0x58022400
 80060e8:	2300      	movs	r3, #0
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	f002 0203 	and.w	r2, r2, #3
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	4093      	lsls	r3, r2
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060fa:	4938      	ldr	r1, [pc, #224]	@ (80061dc <HAL_GPIO_Init+0x35c>)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	3302      	adds	r3, #2
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800612e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f ae63 	bne.w	8005e94 <HAL_GPIO_Init+0x14>
  }
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3724      	adds	r7, #36	@ 0x24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	58000400 	.word	0x58000400

080061e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	807b      	strh	r3, [r7, #2]
 80061ec:	4613      	mov	r3, r2
 80061ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061f0:	787b      	ldrb	r3, [r7, #1]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061f6:	887a      	ldrh	r2, [r7, #2]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061fc:	e003      	b.n	8006206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	041a      	lsls	r2, r3, #16
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	619a      	str	r2, [r3, #24]
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e08b      	b.n	800633e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fd04 	bl	8002c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	@ 0x24
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	e006      	b.n	800629c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800629a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d108      	bne.n	80062b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062b2:	605a      	str	r2, [r3, #4]
 80062b4:	e007      	b.n	80062c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <HAL_I2C_Init+0x134>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69d9      	ldr	r1, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	02008000 	.word	0x02008000

0800634c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	607a      	str	r2, [r7, #4]
 8006356:	461a      	mov	r2, r3
 8006358:	460b      	mov	r3, r1
 800635a:	817b      	strh	r3, [r7, #10]
 800635c:	4613      	mov	r3, r2
 800635e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b20      	cmp	r3, #32
 800636a:	f040 80fd 	bne.w	8006568 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_I2C_Master_Transmit+0x30>
 8006378:	2302      	movs	r3, #2
 800637a:	e0f6      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006384:	f7fd fc00 	bl	8003b88 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2319      	movs	r3, #25
 8006390:	2201      	movs	r2, #1
 8006392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa0a 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e0e1      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2221      	movs	r2, #33	@ 0x21
 80063aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2210      	movs	r2, #16
 80063b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	893a      	ldrh	r2, [r7, #8]
 80063c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2bff      	cmp	r3, #255	@ 0xff
 80063d6:	d906      	bls.n	80063e6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	22ff      	movs	r2, #255	@ 0xff
 80063dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80063de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e007      	b.n	80063f6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80063f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063f4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d024      	beq.n	8006448 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006432:	b2db      	uxtb	r3, r3
 8006434:	3301      	adds	r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	4b4e      	ldr	r3, [pc, #312]	@ (8006574 <HAL_I2C_Master_Transmit+0x228>)
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fc05 	bl	8006c50 <I2C_TransferConfig>
 8006446:	e066      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644c:	b2da      	uxtb	r2, r3
 800644e:	8979      	ldrh	r1, [r7, #10]
 8006450:	4b48      	ldr	r3, [pc, #288]	@ (8006574 <HAL_I2C_Master_Transmit+0x228>)
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fbfa 	bl	8006c50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800645c:	e05b      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f9fd 	bl	8006862 <I2C_WaitOnTXISFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e07b      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d034      	beq.n	8006516 <HAL_I2C_Master_Transmit+0x1ca>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d130      	bne.n	8006516 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2180      	movs	r1, #128	@ 0x80
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f976 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e04d      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2bff      	cmp	r3, #255	@ 0xff
 80064d6:	d90e      	bls.n	80064f6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	22ff      	movs	r2, #255	@ 0xff
 80064dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	8979      	ldrh	r1, [r7, #10]
 80064e6:	2300      	movs	r3, #0
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fbae 	bl	8006c50 <I2C_TransferConfig>
 80064f4:	e00f      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006504:	b2da      	uxtb	r2, r3
 8006506:	8979      	ldrh	r1, [r7, #10]
 8006508:	2300      	movs	r3, #0
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fb9d 	bl	8006c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d19e      	bne.n	800645e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	6a39      	ldr	r1, [r7, #32]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f9e3 	bl	80068f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e01a      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2220      	movs	r2, #32
 800653a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6859      	ldr	r1, [r3, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <HAL_I2C_Master_Transmit+0x22c>)
 8006548:	400b      	ands	r3, r1
 800654a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	80002000 	.word	0x80002000
 8006578:	fe00e800 	.word	0xfe00e800

0800657c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	461a      	mov	r2, r3
 8006588:	460b      	mov	r3, r1
 800658a:	817b      	strh	r3, [r7, #10]
 800658c:	4613      	mov	r3, r2
 800658e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b20      	cmp	r3, #32
 800659a:	f040 80db 	bne.w	8006754 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_I2C_Master_Receive+0x30>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0d4      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065b4:	f7fd fae8 	bl	8003b88 <HAL_GetTick>
 80065b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2319      	movs	r3, #25
 80065c0:	2201      	movs	r2, #1
 80065c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f8f2 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e0bf      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2222      	movs	r2, #34	@ 0x22
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2210      	movs	r2, #16
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	893a      	ldrh	r2, [r7, #8]
 80065f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	2bff      	cmp	r3, #255	@ 0xff
 8006606:	d90e      	bls.n	8006626 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	22ff      	movs	r2, #255	@ 0xff
 800660c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006612:	b2da      	uxtb	r2, r3
 8006614:	8979      	ldrh	r1, [r7, #10]
 8006616:	4b52      	ldr	r3, [pc, #328]	@ (8006760 <HAL_I2C_Master_Receive+0x1e4>)
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb16 	bl	8006c50 <I2C_TransferConfig>
 8006624:	e06d      	b.n	8006702 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006634:	b2da      	uxtb	r2, r3
 8006636:	8979      	ldrh	r1, [r7, #10]
 8006638:	4b49      	ldr	r3, [pc, #292]	@ (8006760 <HAL_I2C_Master_Receive+0x1e4>)
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fb05 	bl	8006c50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006646:	e05c      	b.n	8006702 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	6a39      	ldr	r1, [r7, #32]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f993 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e07c      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d034      	beq.n	8006702 <HAL_I2C_Master_Receive+0x186>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d130      	bne.n	8006702 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	2200      	movs	r2, #0
 80066a8:	2180      	movs	r1, #128	@ 0x80
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f880 	bl	80067b0 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e04d      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2bff      	cmp	r3, #255	@ 0xff
 80066c2:	d90e      	bls.n	80066e2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	22ff      	movs	r2, #255	@ 0xff
 80066c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	8979      	ldrh	r1, [r7, #10]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fab8 	bl	8006c50 <I2C_TransferConfig>
 80066e0:	e00f      	b.n	8006702 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	8979      	ldrh	r1, [r7, #10]
 80066f4:	2300      	movs	r3, #0
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 faa7 	bl	8006c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d19d      	bne.n	8006648 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	6a39      	ldr	r1, [r7, #32]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f8ed 	bl	80068f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e01a      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2220      	movs	r2, #32
 8006726:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6859      	ldr	r1, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <HAL_I2C_Master_Receive+0x1e8>)
 8006734:	400b      	ands	r3, r1
 8006736:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	80002400 	.word	0x80002400
 8006764:	fe00e800 	.word	0xfe00e800

08006768 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d103      	bne.n	8006786 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d007      	beq.n	80067a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	619a      	str	r2, [r3, #24]
  }
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c0:	e03b      	b.n	800683a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f962 	bl	8006a90 <I2C_IsErrorOccurred>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e041      	b.n	800685a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d02d      	beq.n	800683a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fd f9d3 	bl	8003b88 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d122      	bne.n	800683a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	d113      	bne.n	800683a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e00f      	b.n	800685a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d0b4      	beq.n	80067c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800686e:	e033      	b.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f90b 	bl	8006a90 <I2C_IsErrorOccurred>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e031      	b.n	80068e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d025      	beq.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688c:	f7fd f97c 	bl	8003b88 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d11a      	bne.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d013      	beq.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e007      	b.n	80068e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d1c4      	bne.n	8006870 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068fc:	e02f      	b.n	800695e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f8c4 	bl	8006a90 <I2C_IsErrorOccurred>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e02d      	b.n	800696e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fd f939 	bl	8003b88 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11a      	bne.n	800695e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b20      	cmp	r3, #32
 8006934:	d013      	beq.n	800695e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	f043 0220 	orr.w	r2, r3, #32
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e007      	b.n	800696e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b20      	cmp	r3, #32
 800696a:	d1c8      	bne.n	80068fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006988:	e071      	b.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f87e 	bl	8006a90 <I2C_IsErrorOccurred>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d13b      	bne.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d138      	bne.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d105      	bne.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d121      	bne.n	8006a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2204      	movs	r2, #4
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2220      	movs	r2, #32
 80069ee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b24      	ldr	r3, [pc, #144]	@ (8006a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80069fc:	400b      	ands	r3, r1
 80069fe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75fb      	strb	r3, [r7, #23]
 8006a1c:	e002      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006a24:	f7fd f8b0 	bl	8003b88 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d119      	bne.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d116      	bne.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d00f      	beq.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	f043 0220 	orr.w	r2, r3, #32
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d002      	beq.n	8006a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d083      	beq.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	fe00e800 	.word	0xfe00e800

08006a90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	@ 0x28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d068      	beq.n	8006b8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ac4:	e049      	b.n	8006b5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d045      	beq.n	8006b5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fd f85b 	bl	8003b88 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <I2C_IsErrorOccurred+0x54>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d13a      	bne.n	8006b5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b06:	d121      	bne.n	8006b4c <I2C_IsErrorOccurred+0xbc>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b0e:	d01d      	beq.n	8006b4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d01a      	beq.n	8006b4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b26:	f7fd f82f 	bl	8003b88 <HAL_GetTick>
 8006b2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b2c:	e00e      	b.n	8006b4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b2e:	f7fd f82b 	bl	8003b88 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b19      	cmp	r3, #25
 8006b3a:	d907      	bls.n	8006b4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f043 0320 	orr.w	r3, r3, #32
 8006b42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006b4a:	e006      	b.n	8006b5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d1e9      	bne.n	8006b2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d003      	beq.n	8006b70 <I2C_IsErrorOccurred+0xe0>
 8006b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0aa      	beq.n	8006ac6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f043 0304 	orr.w	r3, r3, #4
 8006b86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f043 0308 	orr.w	r3, r3, #8
 8006bc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f043 0302 	orr.w	r3, r3, #2
 8006bea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01c      	beq.n	8006c3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fdaf 	bl	8006768 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <I2C_IsErrorOccurred+0x1bc>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3728      	adds	r7, #40	@ 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	fe00e800 	.word	0xfe00e800

08006c50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	817b      	strh	r3, [r7, #10]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c68:	7a7b      	ldrb	r3, [r7, #9]
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	0d5b      	lsrs	r3, r3, #21
 8006c8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c8e:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <I2C_TransferConfig+0x60>)
 8006c90:	430b      	orrs	r3, r1
 8006c92:	43db      	mvns	r3, r3
 8006c94:	ea02 0103 	and.w	r1, r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	03ff63ff 	.word	0x03ff63ff

08006cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b20      	cmp	r3, #32
 8006cc8:	d138      	bne.n	8006d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e032      	b.n	8006d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2224      	movs	r2, #36	@ 0x24
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e000      	b.n	8006d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d3c:	2302      	movs	r3, #2
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d139      	bne.n	8006dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e033      	b.n	8006dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2224      	movs	r2, #36	@ 0x24
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e0bf      	b.n	8006f76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fb ffac 	bl	8002d68 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006e26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6899      	ldr	r1, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b4a      	ldr	r3, [pc, #296]	@ (8006f80 <HAL_LTDC_Init+0x19c>)
 8006e58:	400b      	ands	r3, r1
 8006e5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68d9      	ldr	r1, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4b3e      	ldr	r3, [pc, #248]	@ (8006f80 <HAL_LTDC_Init+0x19c>)
 8006e86:	400b      	ands	r3, r1
 8006e88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68d9      	ldr	r1, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1a      	ldr	r2, [r3, #32]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6919      	ldr	r1, [r3, #16]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b33      	ldr	r3, [pc, #204]	@ (8006f80 <HAL_LTDC_Init+0x19c>)
 8006eb4:	400b      	ands	r3, r1
 8006eb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6919      	ldr	r1, [r3, #16]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6959      	ldr	r1, [r3, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4b27      	ldr	r3, [pc, #156]	@ (8006f80 <HAL_LTDC_Init+0x19c>)
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6959      	ldr	r1, [r3, #20]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0206 	orr.w	r2, r2, #6
 8006f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	f000f800 	.word	0xf000f800

08006f84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f84:	b5b0      	push	{r4, r5, r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_LTDC_ConfigLayer+0x1a>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e02c      	b.n	8006ff8 <HAL_LTDC_ConfigLayer+0x74>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2134      	movs	r1, #52	@ 0x34
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	4413      	add	r3, r2
 8006fba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f811 	bl	8007000 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bdb0      	pop	{r4, r5, r7, pc}

08007000 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	@ 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800701c:	4413      	add	r3, r2
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	01db      	lsls	r3, r3, #7
 800702c:	4413      	add	r3, r2
 800702e:	3384      	adds	r3, #132	@ 0x84
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	4611      	mov	r1, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	01d2      	lsls	r2, r2, #7
 800703c:	440a      	add	r2, r1
 800703e:	3284      	adds	r2, #132	@ 0x84
 8007040:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007044:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007056:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007058:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	440b      	add	r3, r1
 8007066:	3384      	adds	r3, #132	@ 0x84
 8007068:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800706e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800707e:	4413      	add	r3, r2
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	01db      	lsls	r3, r3, #7
 800708e:	4413      	add	r3, r2
 8007090:	3384      	adds	r3, #132	@ 0x84
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	4611      	mov	r1, r2
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	01d2      	lsls	r2, r2, #7
 800709e:	440a      	add	r2, r1
 80070a0:	3284      	adds	r2, #132	@ 0x84
 80070a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80070a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070b6:	4413      	add	r3, r2
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	440b      	add	r3, r1
 80070c6:	3384      	adds	r3, #132	@ 0x84
 80070c8:	4619      	mov	r1, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	01db      	lsls	r3, r3, #7
 80070da:	4413      	add	r3, r2
 80070dc:	3384      	adds	r3, #132	@ 0x84
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	4611      	mov	r1, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	01d2      	lsls	r2, r2, #7
 80070ea:	440a      	add	r2, r1
 80070ec:	3284      	adds	r2, #132	@ 0x84
 80070ee:	f023 0307 	bic.w	r3, r3, #7
 80070f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	01db      	lsls	r3, r3, #7
 80070fe:	4413      	add	r3, r2
 8007100:	3384      	adds	r3, #132	@ 0x84
 8007102:	461a      	mov	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	4413      	add	r3, r2
 8007132:	3384      	adds	r3, #132	@ 0x84
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	01db      	lsls	r3, r3, #7
 8007140:	4413      	add	r3, r2
 8007142:	3384      	adds	r3, #132	@ 0x84
 8007144:	461a      	mov	r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007150:	461a      	mov	r2, r3
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	431a      	orrs	r2, r3
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	440b      	add	r3, r1
 8007166:	3384      	adds	r3, #132	@ 0x84
 8007168:	4619      	mov	r1, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	01db      	lsls	r3, r3, #7
 800717a:	4413      	add	r3, r2
 800717c:	3384      	adds	r3, #132	@ 0x84
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	4611      	mov	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	01d2      	lsls	r2, r2, #7
 800718a:	440a      	add	r2, r1
 800718c:	3284      	adds	r2, #132	@ 0x84
 800718e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007192:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	01db      	lsls	r3, r3, #7
 800719e:	4413      	add	r3, r2
 80071a0:	3384      	adds	r3, #132	@ 0x84
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	01db      	lsls	r3, r3, #7
 80071b4:	4413      	add	r3, r2
 80071b6:	3384      	adds	r3, #132	@ 0x84
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	3384      	adds	r3, #132	@ 0x84
 80071c8:	4619      	mov	r1, r3
 80071ca:	4b58      	ldr	r3, [pc, #352]	@ (800732c <LTDC_SetConfig+0x32c>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	6809      	ldr	r1, [r1, #0]
 80071dc:	4608      	mov	r0, r1
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	01c9      	lsls	r1, r1, #7
 80071e2:	4401      	add	r1, r0
 80071e4:	3184      	adds	r1, #132	@ 0x84
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	4413      	add	r3, r2
 80071f6:	3384      	adds	r3, #132	@ 0x84
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	01db      	lsls	r3, r3, #7
 8007204:	4413      	add	r3, r2
 8007206:	3384      	adds	r3, #132	@ 0x84
 8007208:	461a      	mov	r2, r3
 800720a:	2300      	movs	r3, #0
 800720c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	01db      	lsls	r3, r3, #7
 8007218:	4413      	add	r3, r2
 800721a:	3384      	adds	r3, #132	@ 0x84
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800722c:	2304      	movs	r3, #4
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e01b      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800723a:	2303      	movs	r3, #3
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e014      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b04      	cmp	r3, #4
 8007246:	d00b      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800724c:	2b02      	cmp	r3, #2
 800724e:	d007      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007254:	2b03      	cmp	r3, #3
 8007256:	d003      	beq.n	8007260 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800725c:	2b07      	cmp	r3, #7
 800725e:	d102      	bne.n	8007266 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007260:	2302      	movs	r3, #2
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e001      	b.n	800726a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	4413      	add	r3, r2
 8007276:	3384      	adds	r3, #132	@ 0x84
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	4611      	mov	r1, r2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	01d2      	lsls	r2, r2, #7
 8007284:	440a      	add	r2, r1
 8007286:	3284      	adds	r2, #132	@ 0x84
 8007288:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800728c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	fb02 f303 	mul.w	r3, r2, r3
 8007298:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6859      	ldr	r1, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	1acb      	subs	r3, r1, r3
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	6809      	ldr	r1, [r1, #0]
 80072b0:	4608      	mov	r0, r1
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	01c9      	lsls	r1, r1, #7
 80072b6:	4401      	add	r1, r0
 80072b8:	3184      	adds	r1, #132	@ 0x84
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	01db      	lsls	r3, r3, #7
 80072c8:	4413      	add	r3, r2
 80072ca:	3384      	adds	r3, #132	@ 0x84
 80072cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4619      	mov	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	01db      	lsls	r3, r3, #7
 80072d8:	440b      	add	r3, r1
 80072da:	3384      	adds	r3, #132	@ 0x84
 80072dc:	4619      	mov	r1, r3
 80072de:	4b14      	ldr	r3, [pc, #80]	@ (8007330 <LTDC_SetConfig+0x330>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	01db      	lsls	r3, r3, #7
 80072ee:	4413      	add	r3, r2
 80072f0:	3384      	adds	r3, #132	@ 0x84
 80072f2:	461a      	mov	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	@ 0x84
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	4611      	mov	r1, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	01d2      	lsls	r2, r2, #7
 8007314:	440a      	add	r2, r1
 8007316:	3284      	adds	r2, #132	@ 0x84
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	3724      	adds	r7, #36	@ 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	fffff8f8 	.word	0xfffff8f8
 8007330:	fffff800 	.word	0xfffff800

08007334 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e0fe      	b.n	8007544 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fc f824 	bl	80033a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2203      	movs	r2, #3
 8007364:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f005 ff13 	bl	800d198 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	7c1a      	ldrb	r2, [r3, #16]
 800737a:	f88d 2000 	strb.w	r2, [sp]
 800737e:	3304      	adds	r3, #4
 8007380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007382:	f005 fe97 	bl	800d0b4 <USB_CoreInit>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0d5      	b.n	8007544 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f005 ff0b 	bl	800d1ba <USB_SetCurrentMode>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e0c6      	b.n	8007544 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e04a      	b.n	8007452 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073bc:	7bfa      	ldrb	r2, [r7, #15]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	3315      	adds	r3, #21
 80073cc:	2201      	movs	r2, #1
 80073ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073d0:	7bfa      	ldrb	r2, [r7, #15]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3314      	adds	r3, #20
 80073e0:	7bfa      	ldrb	r2, [r7, #15]
 80073e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073e4:	7bfa      	ldrb	r2, [r7, #15]
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	b298      	uxth	r0, r3
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	332e      	adds	r3, #46	@ 0x2e
 80073f8:	4602      	mov	r2, r0
 80073fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073fc:	7bfa      	ldrb	r2, [r7, #15]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3318      	adds	r3, #24
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007410:	7bfa      	ldrb	r2, [r7, #15]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	331c      	adds	r3, #28
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	3320      	adds	r3, #32
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007438:	7bfa      	ldrb	r2, [r7, #15]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3324      	adds	r3, #36	@ 0x24
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3301      	adds	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	7bfa      	ldrb	r2, [r7, #15]
 8007458:	429a      	cmp	r2, r3
 800745a:	d3af      	bcc.n	80073bc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	e044      	b.n	80074ec <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007462:	7bfa      	ldrb	r2, [r7, #15]
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007478:	7bfa      	ldrb	r2, [r7, #15]
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	4613      	mov	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800748a:	7bfa      	ldrb	r2, [r7, #15]
 800748c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800748e:	7bfa      	ldrb	r2, [r7, #15]
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074ba:	7bfa      	ldrb	r2, [r7, #15]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	3301      	adds	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	791b      	ldrb	r3, [r3, #4]
 80074f0:	7bfa      	ldrb	r2, [r7, #15]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d3b5      	bcc.n	8007462 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	7c1a      	ldrb	r2, [r3, #16]
 80074fe:	f88d 2000 	strb.w	r2, [sp]
 8007502:	3304      	adds	r3, #4
 8007504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007506:	f005 fea5 	bl	800d254 <USB_DevInit>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e013      	b.n	8007544 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7b1b      	ldrb	r3, [r3, #12]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f80a 	bl	800754c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f006 f860 	bl	800d602 <USB_DevDisconnect>

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800757a:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <HAL_PCDEx_ActivateLPM+0x44>)
 800757c:	4313      	orrs	r3, r2
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	10000003 	.word	0x10000003

08007594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800759c:	4b19      	ldr	r3, [pc, #100]	@ (8007604 <HAL_PWREx_ConfigSupply+0x70>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d00a      	beq.n	80075be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075a8:	4b16      	ldr	r3, [pc, #88]	@ (8007604 <HAL_PWREx_ConfigSupply+0x70>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d001      	beq.n	80075ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e01f      	b.n	80075fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e01d      	b.n	80075fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075be:	4b11      	ldr	r3, [pc, #68]	@ (8007604 <HAL_PWREx_ConfigSupply+0x70>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f023 0207 	bic.w	r2, r3, #7
 80075c6:	490f      	ldr	r1, [pc, #60]	@ (8007604 <HAL_PWREx_ConfigSupply+0x70>)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80075ce:	f7fc fadb 	bl	8003b88 <HAL_GetTick>
 80075d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075d4:	e009      	b.n	80075ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075d6:	f7fc fad7 	bl	8003b88 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075e4:	d901      	bls.n	80075ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e007      	b.n	80075fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075ea:	4b06      	ldr	r3, [pc, #24]	@ (8007604 <HAL_PWREx_ConfigSupply+0x70>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f6:	d1ee      	bne.n	80075d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	58024800 	.word	0x58024800

08007608 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800760c:	4b05      	ldr	r3, [pc, #20]	@ (8007624 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a04      	ldr	r2, [pc, #16]	@ (8007624 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007616:	60d3      	str	r3, [r2, #12]
}
 8007618:	bf00      	nop
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	58024800 	.word	0x58024800

08007628 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007630:	f7fc faaa 	bl	8003b88 <HAL_GetTick>
 8007634:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e05f      	b.n	8007700 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d107      	bne.n	800765c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fb fc79 	bl	8002f44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007652:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f85a 	bl	8007710 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	3b01      	subs	r3, #1
 800766c:	021a      	lsls	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	2120      	movs	r1, #32
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f852 	bl	800772c <QSPI_WaitFlagStateUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d135      	bne.n	80076fe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <HAL_QSPI_Init+0xe0>)
 800769a:	4013      	ands	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6852      	ldr	r2, [r2, #4]
 80076a0:	0611      	lsls	r1, r2, #24
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68d2      	ldr	r2, [r2, #12]
 80076a6:	4311      	orrs	r1, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	69d2      	ldr	r2, [r2, #28]
 80076ac:	4311      	orrs	r1, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6a12      	ldr	r2, [r2, #32]
 80076b2:	4311      	orrs	r1, r2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	4b12      	ldr	r3, [pc, #72]	@ (800770c <HAL_QSPI_Init+0xe4>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6912      	ldr	r2, [r2, #16]
 80076ca:	0411      	lsls	r1, r2, #16
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6952      	ldr	r2, [r2, #20]
 80076d0:	4311      	orrs	r1, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6992      	ldr	r2, [r2, #24]
 80076d6:	4311      	orrs	r1, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	430b      	orrs	r3, r1
 80076de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80076fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	00ffff2f 	.word	0x00ffff2f
 800770c:	ffe0f8fe 	.word	0xffe0f8fe

08007710 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800773c:	e01a      	b.n	8007774 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d016      	beq.n	8007774 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fc fa1f 	bl	8003b88 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10b      	bne.n	8007774 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2204      	movs	r2, #4
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007768:	f043 0201 	orr.w	r2, r3, #1
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e00e      	b.n	8007792 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4013      	ands	r3, r2
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf14      	ite	ne
 8007782:	2301      	movne	r3, #1
 8007784:	2300      	moveq	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	429a      	cmp	r2, r3
 800778e:	d1d6      	bne.n	800773e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08c      	sub	sp, #48	@ 0x30
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	f000 bc48 	b.w	8008040 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8088 	beq.w	80078ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077be:	4b99      	ldr	r3, [pc, #612]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077c8:	4b96      	ldr	r3, [pc, #600]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d007      	beq.n	80077e4 <HAL_RCC_OscConfig+0x48>
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	2b18      	cmp	r3, #24
 80077d8:	d111      	bne.n	80077fe <HAL_RCC_OscConfig+0x62>
 80077da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d10c      	bne.n	80077fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d06d      	beq.n	80078cc <HAL_RCC_OscConfig+0x130>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d169      	bne.n	80078cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f000 bc21 	b.w	8008040 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x7a>
 8007808:	4b86      	ldr	r3, [pc, #536]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a85      	ldr	r2, [pc, #532]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800780e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e02e      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x9c>
 800781e:	4b81      	ldr	r3, [pc, #516]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a80      	ldr	r2, [pc, #512]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4b7e      	ldr	r3, [pc, #504]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a7d      	ldr	r2, [pc, #500]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	e01d      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0xc0>
 8007842:	4b78      	ldr	r3, [pc, #480]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a77      	ldr	r2, [pc, #476]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	4b75      	ldr	r3, [pc, #468]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a74      	ldr	r2, [pc, #464]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e00b      	b.n	8007874 <HAL_RCC_OscConfig+0xd8>
 800785c:	4b71      	ldr	r3, [pc, #452]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a70      	ldr	r2, [pc, #448]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	4b6e      	ldr	r3, [pc, #440]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6d      	ldr	r2, [pc, #436]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800786e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787c:	f7fc f984 	bl	8003b88 <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007884:	f7fc f980 	bl	8003b88 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	@ 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e3d4      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007896:	4b63      	ldr	r3, [pc, #396]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0xe8>
 80078a2:	e014      	b.n	80078ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a4:	f7fc f970 	bl	8003b88 <HAL_GetTick>
 80078a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ac:	f7fc f96c 	bl	8003b88 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	@ 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e3c0      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078be:	4b59      	ldr	r3, [pc, #356]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x110>
 80078ca:	e000      	b.n	80078ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80ca 	beq.w	8007a70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078dc:	4b51      	ldr	r3, [pc, #324]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80078e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <HAL_RCC_OscConfig+0x166>
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	2b18      	cmp	r3, #24
 80078f6:	d156      	bne.n	80079a6 <HAL_RCC_OscConfig+0x20a>
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d151      	bne.n	80079a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007902:	4b48      	ldr	r3, [pc, #288]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_RCC_OscConfig+0x17e>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e392      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800791a:	4b42      	ldr	r3, [pc, #264]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f023 0219 	bic.w	r2, r3, #25
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	493f      	ldr	r1, [pc, #252]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007928:	4313      	orrs	r3, r2
 800792a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800792c:	f7fc f92c 	bl	8003b88 <HAL_GetTick>
 8007930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007934:	f7fc f928 	bl	8003b88 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e37c      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007946:	4b37      	ldr	r3, [pc, #220]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007952:	f7fc f949 	bl	8003be8 <HAL_GetREVID>
 8007956:	4603      	mov	r3, r0
 8007958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800795c:	4293      	cmp	r3, r2
 800795e:	d817      	bhi.n	8007990 <HAL_RCC_OscConfig+0x1f4>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d108      	bne.n	800797a <HAL_RCC_OscConfig+0x1de>
 8007968:	4b2e      	ldr	r3, [pc, #184]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007970:	4a2c      	ldr	r2, [pc, #176]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007976:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007978:	e07a      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b2a      	ldr	r3, [pc, #168]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	031b      	lsls	r3, r3, #12
 8007988:	4926      	ldr	r1, [pc, #152]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 800798a:	4313      	orrs	r3, r2
 800798c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800798e:	e06f      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007990:	4b24      	ldr	r3, [pc, #144]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	4921      	ldr	r1, [pc, #132]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a4:	e064      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d047      	beq.n	8007a3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f023 0219 	bic.w	r2, r3, #25
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	491a      	ldr	r1, [pc, #104]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c0:	f7fc f8e2 	bl	8003b88 <HAL_GetTick>
 80079c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079c8:	f7fc f8de 	bl	8003b88 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e332      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079da:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0f0      	beq.n	80079c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e6:	f7fc f8ff 	bl	8003be8 <HAL_GetREVID>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d819      	bhi.n	8007a28 <HAL_RCC_OscConfig+0x28c>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b40      	cmp	r3, #64	@ 0x40
 80079fa:	d108      	bne.n	8007a0e <HAL_RCC_OscConfig+0x272>
 80079fc:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007a04:	4a07      	ldr	r2, [pc, #28]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a0a:	6053      	str	r3, [r2, #4]
 8007a0c:	e030      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	031b      	lsls	r3, r3, #12
 8007a1c:	4901      	ldr	r1, [pc, #4]	@ (8007a24 <HAL_RCC_OscConfig+0x288>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	604b      	str	r3, [r1, #4]
 8007a22:	e025      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
 8007a24:	58024400 	.word	0x58024400
 8007a28:	4b9a      	ldr	r3, [pc, #616]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	4997      	ldr	r1, [pc, #604]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	604b      	str	r3, [r1, #4]
 8007a3c:	e018      	b.n	8007a70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3e:	4b95      	ldr	r3, [pc, #596]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a94      	ldr	r2, [pc, #592]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4a:	f7fc f89d 	bl	8003b88 <HAL_GetTick>
 8007a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a50:	e008      	b.n	8007a64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a52:	f7fc f899 	bl	8003b88 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e2ed      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a64:	4b8b      	ldr	r3, [pc, #556]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f0      	bne.n	8007a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80a9 	beq.w	8007bd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a7e:	4b85      	ldr	r3, [pc, #532]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a88:	4b82      	ldr	r3, [pc, #520]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d007      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x308>
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b18      	cmp	r3, #24
 8007a98:	d13a      	bne.n	8007b10 <HAL_RCC_OscConfig+0x374>
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d135      	bne.n	8007b10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_RCC_OscConfig+0x320>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b80      	cmp	r3, #128	@ 0x80
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e2c1      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007abc:	f7fc f894 	bl	8003be8 <HAL_GetREVID>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d817      	bhi.n	8007afa <HAL_RCC_OscConfig+0x35e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d108      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x348>
 8007ad2:	4b70      	ldr	r3, [pc, #448]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007ada:	4a6e      	ldr	r2, [pc, #440]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ae0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ae2:	e075      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	069b      	lsls	r3, r3, #26
 8007af2:	4968      	ldr	r1, [pc, #416]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007af8:	e06a      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007afa:	4b66      	ldr	r3, [pc, #408]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	4962      	ldr	r1, [pc, #392]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b0e:	e05f      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d042      	beq.n	8007b9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b18:	4b5e      	ldr	r3, [pc, #376]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b24:	f7fc f830 	bl	8003b88 <HAL_GetTick>
 8007b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b2c:	f7fc f82c 	bl	8003b88 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e280      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b3e:	4b55      	ldr	r3, [pc, #340]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f0      	beq.n	8007b2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b4a:	f7fc f84d 	bl	8003be8 <HAL_GetREVID>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d817      	bhi.n	8007b88 <HAL_RCC_OscConfig+0x3ec>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d108      	bne.n	8007b72 <HAL_RCC_OscConfig+0x3d6>
 8007b60:	4b4c      	ldr	r3, [pc, #304]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007b68:	4a4a      	ldr	r2, [pc, #296]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b6e:	6053      	str	r3, [r2, #4]
 8007b70:	e02e      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
 8007b72:	4b48      	ldr	r3, [pc, #288]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	069b      	lsls	r3, r3, #26
 8007b80:	4944      	ldr	r1, [pc, #272]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	604b      	str	r3, [r1, #4]
 8007b86:	e023      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
 8007b88:	4b42      	ldr	r3, [pc, #264]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	061b      	lsls	r3, r3, #24
 8007b96:	493f      	ldr	r1, [pc, #252]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60cb      	str	r3, [r1, #12]
 8007b9c:	e018      	b.n	8007bd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007baa:	f7fb ffed 	bl	8003b88 <HAL_GetTick>
 8007bae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bb2:	f7fb ffe9 	bl	8003b88 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e23d      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bc4:	4b33      	ldr	r3, [pc, #204]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d036      	beq.n	8007c4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d019      	beq.n	8007c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be8:	4a2a      	ldr	r2, [pc, #168]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf0:	f7fb ffca 	bl	8003b88 <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bf8:	f7fb ffc6 	bl	8003b88 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e21a      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c0a:	4b22      	ldr	r3, [pc, #136]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0f0      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x45c>
 8007c16:	e018      	b.n	8007c4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c24:	f7fb ffb0 	bl	8003b88 <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c2c:	f7fb ffac 	bl	8003b88 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e200      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c3e:	4b15      	ldr	r3, [pc, #84]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f0      	bne.n	8007c2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d039      	beq.n	8007cca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01c      	beq.n	8007c98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c6a:	f7fb ff8d 	bl	8003b88 <HAL_GetTick>
 8007c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c72:	f7fb ff89 	bl	8003b88 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e1dd      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c84:	4b03      	ldr	r3, [pc, #12]	@ (8007c94 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
 8007c90:	e01b      	b.n	8007cca <HAL_RCC_OscConfig+0x52e>
 8007c92:	bf00      	nop
 8007c94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c98:	4b9b      	ldr	r3, [pc, #620]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a9a      	ldr	r2, [pc, #616]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ca4:	f7fb ff70 	bl	8003b88 <HAL_GetTick>
 8007ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cac:	f7fb ff6c 	bl	8003b88 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e1c0      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cbe:	4b92      	ldr	r3, [pc, #584]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f0      	bne.n	8007cac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0304 	and.w	r3, r3, #4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8081 	beq.w	8007dda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8007f0c <HAL_RCC_OscConfig+0x770>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8007f0c <HAL_RCC_OscConfig+0x770>)
 8007cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce4:	f7fb ff50 	bl	8003b88 <HAL_GetTick>
 8007ce8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cec:	f7fb ff4c 	bl	8003b88 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b64      	cmp	r3, #100	@ 0x64
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e1a0      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cfe:	4b83      	ldr	r3, [pc, #524]	@ (8007f0c <HAL_RCC_OscConfig+0x770>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f0      	beq.n	8007cec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d106      	bne.n	8007d20 <HAL_RCC_OscConfig+0x584>
 8007d12:	4b7d      	ldr	r3, [pc, #500]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d16:	4a7c      	ldr	r2, [pc, #496]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d1e:	e02d      	b.n	8007d7c <HAL_RCC_OscConfig+0x5e0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10c      	bne.n	8007d42 <HAL_RCC_OscConfig+0x5a6>
 8007d28:	4b77      	ldr	r3, [pc, #476]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2c:	4a76      	ldr	r2, [pc, #472]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d34:	4b74      	ldr	r3, [pc, #464]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d38:	4a73      	ldr	r2, [pc, #460]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	f023 0304 	bic.w	r3, r3, #4
 8007d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d40:	e01c      	b.n	8007d7c <HAL_RCC_OscConfig+0x5e0>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCC_OscConfig+0x5c8>
 8007d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d50:	f043 0304 	orr.w	r3, r3, #4
 8007d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d56:	4b6c      	ldr	r3, [pc, #432]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d62:	e00b      	b.n	8007d7c <HAL_RCC_OscConfig+0x5e0>
 8007d64:	4b68      	ldr	r3, [pc, #416]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d68:	4a67      	ldr	r2, [pc, #412]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d6a:	f023 0301 	bic.w	r3, r3, #1
 8007d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d70:	4b65      	ldr	r3, [pc, #404]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d74:	4a64      	ldr	r2, [pc, #400]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007d76:	f023 0304 	bic.w	r3, r3, #4
 8007d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d84:	f7fb ff00 	bl	8003b88 <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d8a:	e00a      	b.n	8007da2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d8c:	f7fb fefc 	bl	8003b88 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e14e      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da2:	4b59      	ldr	r3, [pc, #356]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0ee      	beq.n	8007d8c <HAL_RCC_OscConfig+0x5f0>
 8007dae:	e014      	b.n	8007dda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db0:	f7fb feea 	bl	8003b88 <HAL_GetTick>
 8007db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db8:	f7fb fee6 	bl	8003b88 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e138      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dce:	4b4e      	ldr	r3, [pc, #312]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1ee      	bne.n	8007db8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 812d 	beq.w	800803e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007de4:	4b48      	ldr	r3, [pc, #288]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dec:	2b18      	cmp	r3, #24
 8007dee:	f000 80bd 	beq.w	8007f6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	f040 809e 	bne.w	8007f38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dfc:	4b42      	ldr	r3, [pc, #264]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a41      	ldr	r2, [pc, #260]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e08:	f7fb febe 	bl	8003b88 <HAL_GetTick>
 8007e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e10:	f7fb feba 	bl	8003b88 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e10e      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e22:	4b39      	ldr	r3, [pc, #228]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e2e:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e32:	4b37      	ldr	r3, [pc, #220]	@ (8007f10 <HAL_RCC_OscConfig+0x774>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e3e:	0112      	lsls	r2, r2, #4
 8007e40:	430a      	orrs	r2, r1
 8007e42:	4931      	ldr	r1, [pc, #196]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	3b01      	subs	r3, #1
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	3b01      	subs	r3, #1
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e70:	3b01      	subs	r3, #1
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007e78:	4923      	ldr	r1, [pc, #140]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e7e:	4b22      	ldr	r3, [pc, #136]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	4a21      	ldr	r2, [pc, #132]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e8e:	4b21      	ldr	r3, [pc, #132]	@ (8007f14 <HAL_RCC_OscConfig+0x778>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e96:	00d2      	lsls	r2, r2, #3
 8007e98:	491b      	ldr	r1, [pc, #108]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	f023 020c 	bic.w	r2, r3, #12
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	4917      	ldr	r1, [pc, #92]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007eb0:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	f023 0202 	bic.w	r2, r3, #2
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebc:	4912      	ldr	r1, [pc, #72]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ec2:	4b11      	ldr	r3, [pc, #68]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	4a10      	ldr	r2, [pc, #64]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ece:	4b0e      	ldr	r3, [pc, #56]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007eda:	4b0b      	ldr	r3, [pc, #44]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ede:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007ee6:	4b08      	ldr	r3, [pc, #32]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	4a07      	ldr	r2, [pc, #28]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef2:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a04      	ldr	r2, [pc, #16]	@ (8007f08 <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efe:	f7fb fe43 	bl	8003b88 <HAL_GetTick>
 8007f02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f04:	e011      	b.n	8007f2a <HAL_RCC_OscConfig+0x78e>
 8007f06:	bf00      	nop
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	58024800 	.word	0x58024800
 8007f10:	fffffc0c 	.word	0xfffffc0c
 8007f14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f18:	f7fb fe36 	bl	8003b88 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e08a      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f2a:	4b47      	ldr	r3, [pc, #284]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0x77c>
 8007f36:	e082      	b.n	800803e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f38:	4b43      	ldr	r3, [pc, #268]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a42      	ldr	r2, [pc, #264]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7fb fe20 	bl	8003b88 <HAL_GetTick>
 8007f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f4c:	f7fb fe1c 	bl	8003b88 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e070      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f0      	bne.n	8007f4c <HAL_RCC_OscConfig+0x7b0>
 8007f6a:	e068      	b.n	800803e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f6c:	4b36      	ldr	r3, [pc, #216]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f72:	4b35      	ldr	r3, [pc, #212]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d031      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f003 0203 	and.w	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d12a      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d122      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d11a      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	0a5b      	lsrs	r3, r3, #9
 8007fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d111      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d108      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	0e1b      	lsrs	r3, r3, #24
 8007fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d001      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e02b      	b.n	8008040 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007fe8:	4b17      	ldr	r3, [pc, #92]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8007fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ff2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d01f      	beq.n	800803e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ffe:	4b12      	ldr	r3, [pc, #72]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	4a11      	ldr	r2, [pc, #68]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8008004:	f023 0301 	bic.w	r3, r3, #1
 8008008:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800800a:	f7fb fdbd 	bl	8003b88 <HAL_GetTick>
 800800e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008010:	bf00      	nop
 8008012:	f7fb fdb9 	bl	8003b88 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	4293      	cmp	r3, r2
 800801c:	d0f9      	beq.n	8008012 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8008020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008022:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <HAL_RCC_OscConfig+0x8b0>)
 8008024:	4013      	ands	r3, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800802a:	00d2      	lsls	r2, r2, #3
 800802c:	4906      	ldr	r1, [pc, #24]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 800802e:	4313      	orrs	r3, r2
 8008030:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008032:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	4a04      	ldr	r2, [pc, #16]	@ (8008048 <HAL_RCC_OscConfig+0x8ac>)
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3730      	adds	r7, #48	@ 0x30
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	58024400 	.word	0x58024400
 800804c:	ffff0007 	.word	0xffff0007

08008050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e19c      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008064:	4b8a      	ldr	r3, [pc, #552]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d910      	bls.n	8008094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008072:	4b87      	ldr	r3, [pc, #540]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f023 020f 	bic.w	r2, r3, #15
 800807a:	4985      	ldr	r1, [pc, #532]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	4313      	orrs	r3, r2
 8008080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008082:	4b83      	ldr	r3, [pc, #524]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e184      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d010      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	4b7b      	ldr	r3, [pc, #492]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d908      	bls.n	80080c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080b0:	4b78      	ldr	r3, [pc, #480]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	4975      	ldr	r1, [pc, #468]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d010      	beq.n	80080f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695a      	ldr	r2, [r3, #20]
 80080d2:	4b70      	ldr	r3, [pc, #448]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080da:	429a      	cmp	r2, r3
 80080dc:	d908      	bls.n	80080f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080de:	4b6d      	ldr	r3, [pc, #436]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	496a      	ldr	r1, [pc, #424]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d010      	beq.n	800811e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	4b64      	ldr	r3, [pc, #400]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008108:	429a      	cmp	r2, r3
 800810a:	d908      	bls.n	800811e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800810c:	4b61      	ldr	r3, [pc, #388]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	495e      	ldr	r1, [pc, #376]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800811a:	4313      	orrs	r3, r2
 800811c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69da      	ldr	r2, [r3, #28]
 800812e:	4b59      	ldr	r3, [pc, #356]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008136:	429a      	cmp	r2, r3
 8008138:	d908      	bls.n	800814c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800813a:	4b56      	ldr	r3, [pc, #344]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	4953      	ldr	r1, [pc, #332]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008148:	4313      	orrs	r3, r2
 800814a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d010      	beq.n	800817a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	4b4d      	ldr	r3, [pc, #308]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f003 030f 	and.w	r3, r3, #15
 8008164:	429a      	cmp	r2, r3
 8008166:	d908      	bls.n	800817a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008168:	4b4a      	ldr	r3, [pc, #296]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f023 020f 	bic.w	r2, r3, #15
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	4947      	ldr	r1, [pc, #284]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008176:	4313      	orrs	r3, r2
 8008178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d055      	beq.n	8008232 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008186:	4b43      	ldr	r3, [pc, #268]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	4940      	ldr	r1, [pc, #256]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008194:	4313      	orrs	r3, r2
 8008196:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d107      	bne.n	80081b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d121      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e0f6      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d107      	bne.n	80081c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081b8:	4b36      	ldr	r3, [pc, #216]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d115      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0ea      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d107      	bne.n	80081e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081d0:	4b30      	ldr	r3, [pc, #192]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d109      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0de      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e0:	4b2c      	ldr	r3, [pc, #176]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e0d6      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081f0:	4b28      	ldr	r3, [pc, #160]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	f023 0207 	bic.w	r2, r3, #7
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4925      	ldr	r1, [pc, #148]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008202:	f7fb fcc1 	bl	8003b88 <HAL_GetTick>
 8008206:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008208:	e00a      	b.n	8008220 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800820a:	f7fb fcbd 	bl	8003b88 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008218:	4293      	cmp	r3, r2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e0be      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008220:	4b1c      	ldr	r3, [pc, #112]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	429a      	cmp	r2, r3
 8008230:	d1eb      	bne.n	800820a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	429a      	cmp	r2, r3
 800824c:	d208      	bcs.n	8008260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800824e:	4b11      	ldr	r3, [pc, #68]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f023 020f 	bic.w	r2, r3, #15
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	490e      	ldr	r1, [pc, #56]	@ (8008294 <HAL_RCC_ClockConfig+0x244>)
 800825c:	4313      	orrs	r3, r2
 800825e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008260:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d214      	bcs.n	8008298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b08      	ldr	r3, [pc, #32]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f023 020f 	bic.w	r2, r3, #15
 8008276:	4906      	ldr	r1, [pc, #24]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800827e:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <HAL_RCC_ClockConfig+0x240>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d005      	beq.n	8008298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e086      	b.n	800839e <HAL_RCC_ClockConfig+0x34e>
 8008290:	52002000 	.word	0x52002000
 8008294:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d010      	beq.n	80082c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	4b3f      	ldr	r3, [pc, #252]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d208      	bcs.n	80082c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082b4:	4b3c      	ldr	r3, [pc, #240]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	4939      	ldr	r1, [pc, #228]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d010      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695a      	ldr	r2, [r3, #20]
 80082d6:	4b34      	ldr	r3, [pc, #208]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082de:	429a      	cmp	r2, r3
 80082e0:	d208      	bcs.n	80082f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80082e2:	4b31      	ldr	r3, [pc, #196]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	492e      	ldr	r1, [pc, #184]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d010      	beq.n	8008322 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	4b28      	ldr	r3, [pc, #160]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800830c:	429a      	cmp	r2, r3
 800830e:	d208      	bcs.n	8008322 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008310:	4b25      	ldr	r3, [pc, #148]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	4922      	ldr	r1, [pc, #136]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 800831e:	4313      	orrs	r3, r2
 8008320:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d010      	beq.n	8008350 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69da      	ldr	r2, [r3, #28]
 8008332:	4b1d      	ldr	r3, [pc, #116]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800833a:	429a      	cmp	r2, r3
 800833c:	d208      	bcs.n	8008350 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800833e:	4b1a      	ldr	r3, [pc, #104]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	4917      	ldr	r1, [pc, #92]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 800834c:	4313      	orrs	r3, r2
 800834e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008350:	f000 f834 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 8008354:	4602      	mov	r2, r0
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	f003 030f 	and.w	r3, r3, #15
 8008360:	4912      	ldr	r1, [pc, #72]	@ (80083ac <HAL_RCC_ClockConfig+0x35c>)
 8008362:	5ccb      	ldrb	r3, [r1, r3]
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800836e:	4b0e      	ldr	r3, [pc, #56]	@ (80083a8 <HAL_RCC_ClockConfig+0x358>)
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	4a0d      	ldr	r2, [pc, #52]	@ (80083ac <HAL_RCC_ClockConfig+0x35c>)
 8008378:	5cd3      	ldrb	r3, [r2, r3]
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	fa22 f303 	lsr.w	r3, r2, r3
 8008384:	4a0a      	ldr	r2, [pc, #40]	@ (80083b0 <HAL_RCC_ClockConfig+0x360>)
 8008386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008388:	4a0a      	ldr	r2, [pc, #40]	@ (80083b4 <HAL_RCC_ClockConfig+0x364>)
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800838e:	4b0a      	ldr	r3, [pc, #40]	@ (80083b8 <HAL_RCC_ClockConfig+0x368>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fb fbae 	bl	8003af4 <HAL_InitTick>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	58024400 	.word	0x58024400
 80083ac:	0800ebac 	.word	0x0800ebac
 80083b0:	24000004 	.word	0x24000004
 80083b4:	24000000 	.word	0x24000000
 80083b8:	24000008 	.word	0x24000008

080083bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083bc:	b480      	push	{r7}
 80083be:	b089      	sub	sp, #36	@ 0x24
 80083c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c2:	4bb3      	ldr	r3, [pc, #716]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083ca:	2b18      	cmp	r3, #24
 80083cc:	f200 8155 	bhi.w	800867a <HAL_RCC_GetSysClockFreq+0x2be>
 80083d0:	a201      	add	r2, pc, #4	@ (adr r2, 80083d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	0800867b 	.word	0x0800867b
 80083e0:	0800867b 	.word	0x0800867b
 80083e4:	0800867b 	.word	0x0800867b
 80083e8:	0800867b 	.word	0x0800867b
 80083ec:	0800867b 	.word	0x0800867b
 80083f0:	0800867b 	.word	0x0800867b
 80083f4:	0800867b 	.word	0x0800867b
 80083f8:	08008463 	.word	0x08008463
 80083fc:	0800867b 	.word	0x0800867b
 8008400:	0800867b 	.word	0x0800867b
 8008404:	0800867b 	.word	0x0800867b
 8008408:	0800867b 	.word	0x0800867b
 800840c:	0800867b 	.word	0x0800867b
 8008410:	0800867b 	.word	0x0800867b
 8008414:	0800867b 	.word	0x0800867b
 8008418:	08008469 	.word	0x08008469
 800841c:	0800867b 	.word	0x0800867b
 8008420:	0800867b 	.word	0x0800867b
 8008424:	0800867b 	.word	0x0800867b
 8008428:	0800867b 	.word	0x0800867b
 800842c:	0800867b 	.word	0x0800867b
 8008430:	0800867b 	.word	0x0800867b
 8008434:	0800867b 	.word	0x0800867b
 8008438:	0800846f 	.word	0x0800846f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800843c:	4b94      	ldr	r3, [pc, #592]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008448:	4b91      	ldr	r3, [pc, #580]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	08db      	lsrs	r3, r3, #3
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	4a90      	ldr	r2, [pc, #576]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800845a:	e111      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800845c:	4b8d      	ldr	r3, [pc, #564]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800845e:	61bb      	str	r3, [r7, #24]
      break;
 8008460:	e10e      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008462:	4b8d      	ldr	r3, [pc, #564]	@ (8008698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008464:	61bb      	str	r3, [r7, #24]
      break;
 8008466:	e10b      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008468:	4b8c      	ldr	r3, [pc, #560]	@ (800869c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800846a:	61bb      	str	r3, [r7, #24]
      break;
 800846c:	e108      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800846e:	4b88      	ldr	r3, [pc, #544]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008478:	4b85      	ldr	r3, [pc, #532]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008482:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008484:	4b82      	ldr	r3, [pc, #520]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800848e:	4b80      	ldr	r3, [pc, #512]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008492:	08db      	lsrs	r3, r3, #3
 8008494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 80e1 	beq.w	8008674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	f000 8083 	beq.w	80085c0 <HAL_RCC_GetSysClockFreq+0x204>
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	f200 80a1 	bhi.w	8008604 <HAL_RCC_GetSysClockFreq+0x248>
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_RCC_GetSysClockFreq+0x114>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d056      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x1c0>
 80084ce:	e099      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d02d      	beq.n	8008538 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084dc:	4b6c      	ldr	r3, [pc, #432]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	08db      	lsrs	r3, r3, #3
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	4a6b      	ldr	r2, [pc, #428]	@ (8008694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084e8:	fa22 f303 	lsr.w	r3, r2, r3
 80084ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008506:	4b62      	ldr	r3, [pc, #392]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008516:	ed97 6a02 	vldr	s12, [r7, #8]
 800851a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80086a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800851e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800852a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008532:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008536:	e087      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008542:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80086a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800854a:	4b51      	ldr	r3, [pc, #324]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800854c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800855a:	ed97 6a02 	vldr	s12, [r7, #8]
 800855e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80086a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800856a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800856e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800857a:	e065      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	ee07 3a90 	vmov	s15, r3
 8008582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008586:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80086a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858e:	4b40      	ldr	r3, [pc, #256]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859e:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80086a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085be:	e043      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80086ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80086a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008602:	e021      	b.n	8008648 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80086a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b1e      	ldr	r3, [pc, #120]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a02 	vldr	s12, [r7, #8]
 800862a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80086a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008646:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008648:	4b11      	ldr	r3, [pc, #68]	@ (8008690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	0a5b      	lsrs	r3, r3, #9
 800864e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008652:	3301      	adds	r3, #1
 8008654:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008660:	edd7 6a07 	vldr	s13, [r7, #28]
 8008664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800866c:	ee17 3a90 	vmov	r3, s15
 8008670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008672:	e005      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
      break;
 8008678:	e002      	b.n	8008680 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800867a:	4b07      	ldr	r3, [pc, #28]	@ (8008698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800867c:	61bb      	str	r3, [r7, #24]
      break;
 800867e:	bf00      	nop
  }

  return sysclockfreq;
 8008680:	69bb      	ldr	r3, [r7, #24]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3724      	adds	r7, #36	@ 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	58024400 	.word	0x58024400
 8008694:	03d09000 	.word	0x03d09000
 8008698:	003d0900 	.word	0x003d0900
 800869c:	017d7840 	.word	0x017d7840
 80086a0:	46000000 	.word	0x46000000
 80086a4:	4c742400 	.word	0x4c742400
 80086a8:	4a742400 	.word	0x4a742400
 80086ac:	4bbebc20 	.word	0x4bbebc20

080086b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80086b6:	f7ff fe81 	bl	80083bc <HAL_RCC_GetSysClockFreq>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b10      	ldr	r3, [pc, #64]	@ (8008700 <HAL_RCC_GetHCLKFreq+0x50>)
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	490f      	ldr	r1, [pc, #60]	@ (8008704 <HAL_RCC_GetHCLKFreq+0x54>)
 80086c8:	5ccb      	ldrb	r3, [r1, r3]
 80086ca:	f003 031f 	and.w	r3, r3, #31
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008700 <HAL_RCC_GetHCLKFreq+0x50>)
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	4a09      	ldr	r2, [pc, #36]	@ (8008704 <HAL_RCC_GetHCLKFreq+0x54>)
 80086de:	5cd3      	ldrb	r3, [r2, r3]
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	4a07      	ldr	r2, [pc, #28]	@ (8008708 <HAL_RCC_GetHCLKFreq+0x58>)
 80086ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086ee:	4a07      	ldr	r2, [pc, #28]	@ (800870c <HAL_RCC_GetHCLKFreq+0x5c>)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086f4:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <HAL_RCC_GetHCLKFreq+0x58>)
 80086f6:	681b      	ldr	r3, [r3, #0]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58024400 	.word	0x58024400
 8008704:	0800ebac 	.word	0x0800ebac
 8008708:	24000004 	.word	0x24000004
 800870c:	24000000 	.word	0x24000000

08008710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008714:	f7ff ffcc 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 8008718:	4602      	mov	r2, r0
 800871a:	4b06      	ldr	r3, [pc, #24]	@ (8008734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	4904      	ldr	r1, [pc, #16]	@ (8008738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008726:	5ccb      	ldrb	r3, [r1, r3]
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008730:	4618      	mov	r0, r3
 8008732:	bd80      	pop	{r7, pc}
 8008734:	58024400 	.word	0x58024400
 8008738:	0800ebac 	.word	0x0800ebac

0800873c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008740:	f7ff ffb6 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 8008744:	4602      	mov	r2, r0
 8008746:	4b06      	ldr	r3, [pc, #24]	@ (8008760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	4904      	ldr	r1, [pc, #16]	@ (8008764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008752:	5ccb      	ldrb	r3, [r1, r3]
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800875c:	4618      	mov	r0, r3
 800875e:	bd80      	pop	{r7, pc}
 8008760:	58024400 	.word	0x58024400
 8008764:	0800ebac 	.word	0x0800ebac

08008768 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800876c:	b0ca      	sub	sp, #296	@ 0x128
 800876e:	af00      	add	r7, sp, #0
 8008770:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008774:	2300      	movs	r3, #0
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800877a:	2300      	movs	r3, #0
 800877c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800878c:	2500      	movs	r5, #0
 800878e:	ea54 0305 	orrs.w	r3, r4, r5
 8008792:	d049      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800879a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800879e:	d02f      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a4:	d828      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087aa:	d01a      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087b0:	d822      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087ba:	d007      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087bc:	e01c      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087be:	4bb8      	ldr	r3, [pc, #736]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4ab7      	ldr	r2, [pc, #732]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087ca:	e01a      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d0:	3308      	adds	r3, #8
 80087d2:	2102      	movs	r1, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f002 fb61 	bl	800ae9c <RCCEx_PLL2_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087e0:	e00f      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	3328      	adds	r3, #40	@ 0x28
 80087e8:	2102      	movs	r1, #2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f002 fc08 	bl	800b000 <RCCEx_PLL3_Config>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087f6:	e004      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087fe:	e000      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800880a:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800880c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800880e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008818:	4aa1      	ldr	r2, [pc, #644]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800881a:	430b      	orrs	r3, r1
 800881c:	6513      	str	r3, [r2, #80]	@ 0x50
 800881e:	e003      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008834:	f04f 0900 	mov.w	r9, #0
 8008838:	ea58 0309 	orrs.w	r3, r8, r9
 800883c:	d047      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800883e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008844:	2b04      	cmp	r3, #4
 8008846:	d82a      	bhi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008848:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008865 	.word	0x08008865
 8008854:	08008873 	.word	0x08008873
 8008858:	08008889 	.word	0x08008889
 800885c:	080088a7 	.word	0x080088a7
 8008860:	080088a7 	.word	0x080088a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008864:	4b8e      	ldr	r3, [pc, #568]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008868:	4a8d      	ldr	r2, [pc, #564]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800886a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800886e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008870:	e01a      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008876:	3308      	adds	r3, #8
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f002 fb0e 	bl	800ae9c <RCCEx_PLL2_Config>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008886:	e00f      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888c:	3328      	adds	r3, #40	@ 0x28
 800888e:	2100      	movs	r1, #0
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fbb5 	bl	800b000 <RCCEx_PLL3_Config>
 8008896:	4603      	mov	r3, r0
 8008898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800889c:	e004      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088a4:	e000      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088b0:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b4:	f023 0107 	bic.w	r1, r3, #7
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088be:	4a78      	ldr	r2, [pc, #480]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088c0:	430b      	orrs	r3, r1
 80088c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80088c4:	e003      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80088da:	f04f 0b00 	mov.w	fp, #0
 80088de:	ea5a 030b 	orrs.w	r3, sl, fp
 80088e2:	d04c      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ee:	d030      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80088f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088f4:	d829      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80088f8:	d02d      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80088fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80088fc:	d825      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80088fe:	2b80      	cmp	r3, #128	@ 0x80
 8008900:	d018      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008902:	2b80      	cmp	r3, #128	@ 0x80
 8008904:	d821      	bhi.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800890a:	2b40      	cmp	r3, #64	@ 0x40
 800890c:	d007      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800890e:	e01c      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008910:	4b63      	ldr	r3, [pc, #396]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	4a62      	ldr	r2, [pc, #392]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800891a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800891c:	e01c      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800891e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008922:	3308      	adds	r3, #8
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fab8 	bl	800ae9c <RCCEx_PLL2_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008932:	e011      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008938:	3328      	adds	r3, #40	@ 0x28
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f002 fb5f 	bl	800b000 <RCCEx_PLL3_Config>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008948:	e006      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008950:	e002      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008960:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008964:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800896e:	4a4c      	ldr	r2, [pc, #304]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008970:	430b      	orrs	r3, r1
 8008972:	6513      	str	r3, [r2, #80]	@ 0x50
 8008974:	e003      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800897a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800898a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800898e:	2300      	movs	r3, #0
 8008990:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008994:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008998:	460b      	mov	r3, r1
 800899a:	4313      	orrs	r3, r2
 800899c:	d053      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089aa:	d035      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80089ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089b0:	d82e      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089b6:	d031      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80089b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80089bc:	d828      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c2:	d01a      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80089c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c8:	d822      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80089ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089d2:	d007      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80089d4:	e01c      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d6:	4b32      	ldr	r3, [pc, #200]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	4a31      	ldr	r2, [pc, #196]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089e2:	e01c      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e8:	3308      	adds	r3, #8
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f002 fa55 	bl	800ae9c <RCCEx_PLL2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80089f8:	e011      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fe:	3328      	adds	r3, #40	@ 0x28
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f002 fafc 	bl	800b000 <RCCEx_PLL3_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a0e:	e006      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a16:	e002      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a26:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a36:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a3c:	e003      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008a52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008a5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008a60:	460b      	mov	r3, r1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	d056      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008a6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a72:	d038      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a78:	d831      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a7e:	d034      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008a80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008a84:	d82b      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a8a:	d01d      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008a8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a90:	d825      	bhi.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d006      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a9a:	d00a      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008a9c:	e01f      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aa4:	4ba2      	ldr	r3, [pc, #648]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ab0:	e01c      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f002 f9ee 	bl	800ae9c <RCCEx_PLL2_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ac6:	e011      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008acc:	3328      	adds	r3, #40	@ 0x28
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f002 fa95 	bl	800b000 <RCCEx_PLL3_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008adc:	e006      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ae4:	e002      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008af4:	4b8e      	ldr	r3, [pc, #568]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b04:	4a8a      	ldr	r2, [pc, #552]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b06:	430b      	orrs	r3, r1
 8008b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b0a:	e003      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4313      	orrs	r3, r2
 8008b32:	d03a      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b3a:	2b30      	cmp	r3, #48	@ 0x30
 8008b3c:	d01f      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008b3e:	2b30      	cmp	r3, #48	@ 0x30
 8008b40:	d819      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d00c      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d815      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d019      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d111      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b52:	4b77      	ldr	r3, [pc, #476]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	4a76      	ldr	r2, [pc, #472]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b5e:	e011      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b64:	3308      	adds	r3, #8
 8008b66:	2102      	movs	r1, #2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f002 f997 	bl	800ae9c <RCCEx_PLL2_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b74:	e006      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b8c:	4b68      	ldr	r3, [pc, #416]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9a:	4a65      	ldr	r2, [pc, #404]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008bb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	d051      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd4:	d035      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bda:	d82e      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be0:	d031      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008be2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be6:	d828      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bec:	d01a      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008bee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf2:	d822      	bhi.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bfc:	d007      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008bfe:	e01c      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c00:	4b4b      	ldr	r3, [pc, #300]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	4a4a      	ldr	r2, [pc, #296]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c12:	3308      	adds	r3, #8
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f002 f940 	bl	800ae9c <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c22:	e011      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c28:	3328      	adds	r3, #40	@ 0x28
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 f9e7 	bl	800b000 <RCCEx_PLL3_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c50:	4b37      	ldr	r3, [pc, #220]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c5e:	4a34      	ldr	r2, [pc, #208]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c64:	e003      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	d056      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c98:	d033      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c9e:	d82c      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ca0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ca4:	d02f      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008ca6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008caa:	d826      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cb0:	d02b      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008cb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008cb6:	d820      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cbc:	d012      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc2:	d81a      	bhi.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d022      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ccc:	d115      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 f8e0 	bl	800ae9c <RCCEx_PLL2_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ce2:	e015      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce8:	3328      	adds	r3, #40	@ 0x28
 8008cea:	2101      	movs	r1, #1
 8008cec:	4618      	mov	r0, r3
 8008cee:	f002 f987 	bl	800b000 <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008cf8:	e00a      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d00:	e006      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d02:	bf00      	nop
 8008d04:	e004      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10d      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d26:	4a02      	ldr	r2, [pc, #8]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d2c:	e006      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d2e:	bf00      	nop
 8008d30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d055      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d68:	d033      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d6e:	d82c      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d74:	d02f      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d7a:	d826      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d80:	d02b      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008d82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d86:	d820      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d8c:	d012      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d92:	d81a      	bhi.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d022      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9c:	d115      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	3308      	adds	r3, #8
 8008da4:	2101      	movs	r1, #1
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 f878 	bl	800ae9c <RCCEx_PLL2_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008db2:	e015      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db8:	3328      	adds	r3, #40	@ 0x28
 8008dba:	2101      	movs	r1, #1
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 f91f 	bl	800b000 <RCCEx_PLL3_Config>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008dc8:	e00a      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dd0:	e006      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dd2:	bf00      	nop
 8008dd4:	e004      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dd6:	bf00      	nop
 8008dd8:	e002      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10b      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008de8:	4ba3      	ldr	r3, [pc, #652]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008df8:	4a9f      	ldr	r2, [pc, #636]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dfe:	e003      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008e14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e22:	460b      	mov	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d037      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e32:	d00e      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e38:	d816      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d018      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e42:	d111      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e44:	4b8c      	ldr	r3, [pc, #560]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	4a8b      	ldr	r2, [pc, #556]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	3308      	adds	r3, #8
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 f81e 	bl	800ae9c <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e88:	4a7b      	ldr	r2, [pc, #492]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e8e:	e003      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d039      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d81c      	bhi.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008f05 	.word	0x08008f05
 8008ecc:	08008ed9 	.word	0x08008ed9
 8008ed0:	08008ee7 	.word	0x08008ee7
 8008ed4:	08008f05 	.word	0x08008f05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed8:	4b67      	ldr	r3, [pc, #412]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	4a66      	ldr	r2, [pc, #408]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ee4:	e00f      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	3308      	adds	r3, #8
 8008eec:	2102      	movs	r1, #2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 ffd4 	bl	800ae9c <RCCEx_PLL2_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008efa:	e004      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f02:	e000      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10a      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f12:	f023 0103 	bic.w	r1, r3, #3
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1c:	4a56      	ldr	r2, [pc, #344]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f22:	e003      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008f46:	460b      	mov	r3, r1
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	f000 809f 	beq.w	800908c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a4a      	ldr	r2, [pc, #296]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f5a:	f7fa fe15 	bl	8003b88 <HAL_GetTick>
 8008f5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f62:	e00b      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f64:	f7fa fe10 	bl	8003b88 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b64      	cmp	r3, #100	@ 0x64
 8008f72:	d903      	bls.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f7a:	e005      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0ed      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d179      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f90:	4b39      	ldr	r3, [pc, #228]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008f9c:	4053      	eors	r3, r2
 8008f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d015      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fa6:	4b34      	ldr	r3, [pc, #208]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fb2:	4b31      	ldr	r3, [pc, #196]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb6:	4a30      	ldr	r2, [pc, #192]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008fca:	4a2b      	ldr	r2, [pc, #172]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008fd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fde:	d118      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe0:	f7fa fdd2 	bl	8003b88 <HAL_GetTick>
 8008fe4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fe8:	e00d      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fea:	f7fa fdcd 	bl	8003b88 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008ff4:	1ad2      	subs	r2, r2, r3
 8008ff6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d903      	bls.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009004:	e005      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009006:	4b1c      	ldr	r3, [pc, #112]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0eb      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009016:	2b00      	cmp	r3, #0
 8009018:	d129      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800901a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800902a:	d10e      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800902c:	4b12      	ldr	r3, [pc, #72]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800903c:	091a      	lsrs	r2, r3, #4
 800903e:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009040:	4013      	ands	r3, r2
 8009042:	4a0d      	ldr	r2, [pc, #52]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009044:	430b      	orrs	r3, r1
 8009046:	6113      	str	r3, [r2, #16]
 8009048:	e005      	b.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800904a:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	4a0a      	ldr	r2, [pc, #40]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009054:	6113      	str	r3, [r2, #16]
 8009056:	4b08      	ldr	r3, [pc, #32]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009058:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009066:	4a04      	ldr	r2, [pc, #16]	@ (8009078 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009068:	430b      	orrs	r3, r1
 800906a:	6713      	str	r3, [r2, #112]	@ 0x70
 800906c:	e00e      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800906e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009072:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009076:	e009      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009078:	58024400 	.word	0x58024400
 800907c:	58024800 	.word	0x58024800
 8009080:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f002 0301 	and.w	r3, r2, #1
 8009098:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800909c:	2300      	movs	r3, #0
 800909e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4313      	orrs	r3, r2
 80090aa:	f000 8089 	beq.w	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090b4:	2b28      	cmp	r3, #40	@ 0x28
 80090b6:	d86b      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80090b8:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	08009199 	.word	0x08009199
 80090c4:	08009191 	.word	0x08009191
 80090c8:	08009191 	.word	0x08009191
 80090cc:	08009191 	.word	0x08009191
 80090d0:	08009191 	.word	0x08009191
 80090d4:	08009191 	.word	0x08009191
 80090d8:	08009191 	.word	0x08009191
 80090dc:	08009191 	.word	0x08009191
 80090e0:	08009165 	.word	0x08009165
 80090e4:	08009191 	.word	0x08009191
 80090e8:	08009191 	.word	0x08009191
 80090ec:	08009191 	.word	0x08009191
 80090f0:	08009191 	.word	0x08009191
 80090f4:	08009191 	.word	0x08009191
 80090f8:	08009191 	.word	0x08009191
 80090fc:	08009191 	.word	0x08009191
 8009100:	0800917b 	.word	0x0800917b
 8009104:	08009191 	.word	0x08009191
 8009108:	08009191 	.word	0x08009191
 800910c:	08009191 	.word	0x08009191
 8009110:	08009191 	.word	0x08009191
 8009114:	08009191 	.word	0x08009191
 8009118:	08009191 	.word	0x08009191
 800911c:	08009191 	.word	0x08009191
 8009120:	08009199 	.word	0x08009199
 8009124:	08009191 	.word	0x08009191
 8009128:	08009191 	.word	0x08009191
 800912c:	08009191 	.word	0x08009191
 8009130:	08009191 	.word	0x08009191
 8009134:	08009191 	.word	0x08009191
 8009138:	08009191 	.word	0x08009191
 800913c:	08009191 	.word	0x08009191
 8009140:	08009199 	.word	0x08009199
 8009144:	08009191 	.word	0x08009191
 8009148:	08009191 	.word	0x08009191
 800914c:	08009191 	.word	0x08009191
 8009150:	08009191 	.word	0x08009191
 8009154:	08009191 	.word	0x08009191
 8009158:	08009191 	.word	0x08009191
 800915c:	08009191 	.word	0x08009191
 8009160:	08009199 	.word	0x08009199
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009168:	3308      	adds	r3, #8
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f001 fe95 	bl	800ae9c <RCCEx_PLL2_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	3328      	adds	r3, #40	@ 0x28
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f001 ff3c 	bl	800b000 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091a2:	4bbf      	ldr	r3, [pc, #764]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80091aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091b0:	4abb      	ldr	r2, [pc, #748]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f002 0302 	and.w	r3, r2, #2
 80091cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80091d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80091da:	460b      	mov	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	d041      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d824      	bhi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	0800923d 	.word	0x0800923d
 80091f4:	08009209 	.word	0x08009209
 80091f8:	0800921f 	.word	0x0800921f
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	0800923d 	.word	0x0800923d
 8009204:	0800923d 	.word	0x0800923d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	3308      	adds	r3, #8
 800920e:	2101      	movs	r1, #1
 8009210:	4618      	mov	r0, r3
 8009212:	f001 fe43 	bl	800ae9c <RCCEx_PLL2_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800921c:	e00f      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	3328      	adds	r3, #40	@ 0x28
 8009224:	2101      	movs	r1, #1
 8009226:	4618      	mov	r0, r3
 8009228:	f001 feea 	bl	800b000 <RCCEx_PLL3_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009232:	e004      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923a:	e000      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800923c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800923e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009246:	4b96      	ldr	r3, [pc, #600]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800924a:	f023 0107 	bic.w	r1, r3, #7
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009252:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009254:	4a92      	ldr	r2, [pc, #584]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009256:	430b      	orrs	r3, r1
 8009258:	6553      	str	r3, [r2, #84]	@ 0x54
 800925a:	e003      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f002 0304 	and.w	r3, r2, #4
 8009270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009274:	2300      	movs	r3, #0
 8009276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800927a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800927e:	460b      	mov	r3, r1
 8009280:	4313      	orrs	r3, r2
 8009282:	d044      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800928c:	2b05      	cmp	r3, #5
 800928e:	d825      	bhi.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009290:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092e5 	.word	0x080092e5
 800929c:	080092b1 	.word	0x080092b1
 80092a0:	080092c7 	.word	0x080092c7
 80092a4:	080092e5 	.word	0x080092e5
 80092a8:	080092e5 	.word	0x080092e5
 80092ac:	080092e5 	.word	0x080092e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	3308      	adds	r3, #8
 80092b6:	2101      	movs	r1, #1
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 fdef 	bl	800ae9c <RCCEx_PLL2_Config>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092c4:	e00f      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ca:	3328      	adds	r3, #40	@ 0x28
 80092cc:	2101      	movs	r1, #1
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 fe96 	bl	800b000 <RCCEx_PLL3_Config>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092da:	e004      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092e2:	e000      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80092e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092ee:	4b6c      	ldr	r3, [pc, #432]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f2:	f023 0107 	bic.w	r1, r3, #7
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092fe:	4a68      	ldr	r2, [pc, #416]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009300:	430b      	orrs	r3, r1
 8009302:	6593      	str	r3, [r2, #88]	@ 0x58
 8009304:	e003      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f002 0320 	and.w	r3, r2, #32
 800931a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800931e:	2300      	movs	r3, #0
 8009320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009328:	460b      	mov	r3, r1
 800932a:	4313      	orrs	r3, r2
 800932c:	d055      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800933a:	d033      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800933c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009340:	d82c      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009346:	d02f      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800934c:	d826      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800934e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009352:	d02b      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009354:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009358:	d820      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800935a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935e:	d012      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009364:	d81a      	bhi.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d022      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800936a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800936e:	d115      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009374:	3308      	adds	r3, #8
 8009376:	2100      	movs	r1, #0
 8009378:	4618      	mov	r0, r3
 800937a:	f001 fd8f 	bl	800ae9c <RCCEx_PLL2_Config>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009384:	e015      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938a:	3328      	adds	r3, #40	@ 0x28
 800938c:	2102      	movs	r1, #2
 800938e:	4618      	mov	r0, r3
 8009390:	f001 fe36 	bl	800b000 <RCCEx_PLL3_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800939a:	e00a      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a2:	e006      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093a4:	bf00      	nop
 80093a6:	e004      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093a8:	bf00      	nop
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093ac:	bf00      	nop
 80093ae:	e000      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093ba:	4b39      	ldr	r3, [pc, #228]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ca:	4a35      	ldr	r2, [pc, #212]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80093e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80093f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4313      	orrs	r3, r2
 80093f8:	d058      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009402:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009406:	d033      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009408:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800940c:	d82c      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800940e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009412:	d02f      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009418:	d826      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800941a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800941e:	d02b      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009420:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009424:	d820      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800942a:	d012      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800942c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009430:	d81a      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d022      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800943a:	d115      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800943c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009440:	3308      	adds	r3, #8
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f001 fd29 	bl	800ae9c <RCCEx_PLL2_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009450:	e015      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	3328      	adds	r3, #40	@ 0x28
 8009458:	2102      	movs	r1, #2
 800945a:	4618      	mov	r0, r3
 800945c:	f001 fdd0 	bl	800b000 <RCCEx_PLL3_Config>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009466:	e00a      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800946e:	e006      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009470:	bf00      	nop
 8009472:	e004      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009474:	bf00      	nop
 8009476:	e002      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009478:	bf00      	nop
 800947a:	e000      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800947c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800947e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10e      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009486:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800948e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009492:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009496:	4a02      	ldr	r2, [pc, #8]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009498:	430b      	orrs	r3, r1
 800949a:	6593      	str	r3, [r2, #88]	@ 0x58
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80094c6:	460b      	mov	r3, r1
 80094c8:	4313      	orrs	r3, r2
 80094ca:	d055      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80094d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094d8:	d033      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80094da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80094de:	d82c      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094e4:	d02f      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80094e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ea:	d826      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80094f0:	d02b      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80094f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80094f6:	d820      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80094f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094fc:	d012      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80094fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009502:	d81a      	bhi.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d022      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800950c:	d115      	bne.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800950e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009512:	3308      	adds	r3, #8
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fcc0 	bl	800ae9c <RCCEx_PLL2_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009522:	e015      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009528:	3328      	adds	r3, #40	@ 0x28
 800952a:	2102      	movs	r1, #2
 800952c:	4618      	mov	r0, r3
 800952e:	f001 fd67 	bl	800b000 <RCCEx_PLL3_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009538:	e00a      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009540:	e006      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009542:	bf00      	nop
 8009544:	e004      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009546:	bf00      	nop
 8009548:	e002      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800954a:	bf00      	nop
 800954c:	e000      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800954e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10b      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009558:	4ba1      	ldr	r3, [pc, #644]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800955a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009568:	4a9d      	ldr	r2, [pc, #628]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800956a:	430b      	orrs	r3, r1
 800956c:	6593      	str	r3, [r2, #88]	@ 0x58
 800956e:	e003      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f002 0308 	and.w	r3, r2, #8
 8009584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009588:	2300      	movs	r3, #0
 800958a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800958e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009592:	460b      	mov	r3, r1
 8009594:	4313      	orrs	r3, r2
 8009596:	d01e      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095a4:	d10c      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095aa:	3328      	adds	r3, #40	@ 0x28
 80095ac:	2102      	movs	r1, #2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 fd26 	bl	800b000 <RCCEx_PLL3_Config>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095c0:	4b87      	ldr	r3, [pc, #540]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d0:	4a83      	ldr	r2, [pc, #524]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095d2:	430b      	orrs	r3, r1
 80095d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f002 0310 	and.w	r3, r2, #16
 80095e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80095ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80095f0:	460b      	mov	r3, r1
 80095f2:	4313      	orrs	r3, r2
 80095f4:	d01e      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80095f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009602:	d10c      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009608:	3328      	adds	r3, #40	@ 0x28
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fcf7 	bl	800b000 <RCCEx_PLL3_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800961e:	4b70      	ldr	r3, [pc, #448]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009622:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800962a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800962e:	4a6c      	ldr	r2, [pc, #432]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009630:	430b      	orrs	r3, r1
 8009632:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009644:	2300      	movs	r3, #0
 8009646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800964a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800964e:	460b      	mov	r3, r1
 8009650:	4313      	orrs	r3, r2
 8009652:	d03e      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800965c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009660:	d022      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009666:	d81b      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800966c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009670:	d00b      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009672:	e015      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009678:	3308      	adds	r3, #8
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f001 fc0d 	bl	800ae9c <RCCEx_PLL2_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009688:	e00f      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968e:	3328      	adds	r3, #40	@ 0x28
 8009690:	2102      	movs	r1, #2
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fcb4 	bl	800b000 <RCCEx_PLL3_Config>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800969e:	e004      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096a6:	e000      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80096a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10b      	bne.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096b2:	4b4b      	ldr	r3, [pc, #300]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096c2:	4a47      	ldr	r2, [pc, #284]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096c4:	430b      	orrs	r3, r1
 80096c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80096c8:	e003      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80096de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096e0:	2300      	movs	r3, #0
 80096e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80096e8:	460b      	mov	r3, r1
 80096ea:	4313      	orrs	r3, r2
 80096ec:	d03b      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80096ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096fa:	d01f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80096fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009700:	d818      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009706:	d003      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800970c:	d007      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800970e:	e011      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009710:	4b33      	ldr	r3, [pc, #204]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	4a32      	ldr	r2, [pc, #200]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800971a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800971c:	e00f      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009722:	3328      	adds	r3, #40	@ 0x28
 8009724:	2101      	movs	r1, #1
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fc6a 	bl	800b000 <RCCEx_PLL3_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009732:	e004      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800973c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009746:	4b26      	ldr	r3, [pc, #152]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009756:	4a22      	ldr	r2, [pc, #136]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009758:	430b      	orrs	r3, r1
 800975a:	6553      	str	r3, [r2, #84]	@ 0x54
 800975c:	e003      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009772:	673b      	str	r3, [r7, #112]	@ 0x70
 8009774:	2300      	movs	r3, #0
 8009776:	677b      	str	r3, [r7, #116]	@ 0x74
 8009778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800977c:	460b      	mov	r3, r1
 800977e:	4313      	orrs	r3, r2
 8009780:	d034      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800978c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009790:	d007      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009792:	e011      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009794:	4b12      	ldr	r3, [pc, #72]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	4a11      	ldr	r2, [pc, #68]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800979a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800979e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097a0:	e00e      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a6:	3308      	adds	r3, #8
 80097a8:	2102      	movs	r1, #2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 fb76 	bl	800ae9c <RCCEx_PLL2_Config>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097b6:	e003      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10d      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097c8:	4b05      	ldr	r3, [pc, #20]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097d6:	4a02      	ldr	r2, [pc, #8]	@ (80097e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097d8:	430b      	orrs	r3, r1
 80097da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097dc:	e006      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80097de:	bf00      	nop
 80097e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80097f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097fa:	2300      	movs	r3, #0
 80097fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009802:	460b      	mov	r3, r1
 8009804:	4313      	orrs	r3, r2
 8009806:	d00c      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980c:	3328      	adds	r3, #40	@ 0x28
 800980e:	2102      	movs	r1, #2
 8009810:	4618      	mov	r0, r3
 8009812:	f001 fbf5 	bl	800b000 <RCCEx_PLL3_Config>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800982e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009830:	2300      	movs	r3, #0
 8009832:	667b      	str	r3, [r7, #100]	@ 0x64
 8009834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d038      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800984a:	d018      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800984c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009850:	d811      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009856:	d014      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800985c:	d80b      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d011      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009866:	d106      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009868:	4bc3      	ldr	r3, [pc, #780]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	4ac2      	ldr	r2, [pc, #776]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800986e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009874:	e008      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987c:	e004      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800987e:	bf00      	nop
 8009880:	e002      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009890:	4bb9      	ldr	r3, [pc, #740]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009894:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a0:	4ab5      	ldr	r2, [pc, #724]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a2:	430b      	orrs	r3, r1
 80098a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80098a6:	e003      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80098bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098be:	2300      	movs	r3, #0
 80098c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d009      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098cc:	4baa      	ldr	r3, [pc, #680]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098da:	4aa7      	ldr	r2, [pc, #668]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80098ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80098ee:	2300      	movs	r3, #0
 80098f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80098f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80098f6:	460b      	mov	r3, r1
 80098f8:	4313      	orrs	r3, r2
 80098fa:	d00a      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098fc:	4b9e      	ldr	r3, [pc, #632]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800990c:	4a9a      	ldr	r2, [pc, #616]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990e:	430b      	orrs	r3, r1
 8009910:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800991e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009920:	2300      	movs	r3, #0
 8009922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009924:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009928:	460b      	mov	r3, r1
 800992a:	4313      	orrs	r3, r2
 800992c:	d009      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800992e:	4b92      	ldr	r3, [pc, #584]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009932:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800993c:	4a8e      	ldr	r2, [pc, #568]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800993e:	430b      	orrs	r3, r1
 8009940:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800994e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009950:	2300      	movs	r3, #0
 8009952:	647b      	str	r3, [r7, #68]	@ 0x44
 8009954:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009958:	460b      	mov	r3, r1
 800995a:	4313      	orrs	r3, r2
 800995c:	d00e      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800995e:	4b86      	ldr	r3, [pc, #536]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	4a85      	ldr	r2, [pc, #532]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009964:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009968:	6113      	str	r3, [r2, #16]
 800996a:	4b83      	ldr	r3, [pc, #524]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800996c:	6919      	ldr	r1, [r3, #16]
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009976:	4a80      	ldr	r2, [pc, #512]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009978:	430b      	orrs	r3, r1
 800997a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800998a:	2300      	movs	r3, #0
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800998e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009992:	460b      	mov	r3, r1
 8009994:	4313      	orrs	r3, r2
 8009996:	d009      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009998:	4b77      	ldr	r3, [pc, #476]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800999a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800999c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a6:	4a74      	ldr	r2, [pc, #464]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099a8:	430b      	orrs	r3, r1
 80099aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80099b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80099ba:	2300      	movs	r3, #0
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80099c2:	460b      	mov	r3, r1
 80099c4:	4313      	orrs	r3, r2
 80099c6:	d00a      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099c8:	4b6b      	ldr	r3, [pc, #428]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099d8:	4a67      	ldr	r2, [pc, #412]	@ (8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099da:	430b      	orrs	r3, r1
 80099dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	2100      	movs	r1, #0
 80099e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80099f4:	460b      	mov	r3, r1
 80099f6:	4313      	orrs	r3, r2
 80099f8:	d011      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fe:	3308      	adds	r3, #8
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fa4a 	bl	800ae9c <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	2100      	movs	r1, #0
 8009a28:	6239      	str	r1, [r7, #32]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d011      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3e:	3308      	adds	r3, #8
 8009a40:	2101      	movs	r1, #1
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fa2a 	bl	800ae9c <RCCEx_PLL2_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	2100      	movs	r1, #0
 8009a68:	61b9      	str	r1, [r7, #24]
 8009a6a:	f003 0304 	and.w	r3, r3, #4
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a74:	460b      	mov	r3, r1
 8009a76:	4313      	orrs	r3, r2
 8009a78:	d011      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a7e:	3308      	adds	r3, #8
 8009a80:	2102      	movs	r1, #2
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fa0a 	bl	800ae9c <RCCEx_PLL2_Config>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6139      	str	r1, [r7, #16]
 8009aaa:	f003 0308 	and.w	r3, r3, #8
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	d011      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009abe:	3328      	adds	r3, #40	@ 0x28
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fa9c 	bl	800b000 <RCCEx_PLL3_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	f003 0310 	and.w	r3, r3, #16
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009af4:	460b      	mov	r3, r1
 8009af6:	4313      	orrs	r3, r2
 8009af8:	d011      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009afe:	3328      	adds	r3, #40	@ 0x28
 8009b00:	2101      	movs	r1, #1
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fa7c 	bl	800b000 <RCCEx_PLL3_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	2100      	movs	r1, #0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009b34:	460b      	mov	r3, r1
 8009b36:	4313      	orrs	r3, r2
 8009b38:	d011      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3e:	3328      	adds	r3, #40	@ 0x28
 8009b40:	2102      	movs	r1, #2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fa5c 	bl	800b000 <RCCEx_PLL3_Config>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009b5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	e000      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009b72:	46bd      	mov	sp, r7
 8009b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b78:	58024400 	.word	0x58024400

08009b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b090      	sub	sp, #64	@ 0x40
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009b86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b8a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	f040 8094 	bne.w	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009b94:	4b9e      	ldr	r3, [pc, #632]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	f200 8087 	bhi.w	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bc1 	.word	0x08009bc1
 8009bb0:	08009be9 	.word	0x08009be9
 8009bb4:	08009c11 	.word	0x08009c11
 8009bb8:	08009cad 	.word	0x08009cad
 8009bbc:	08009c39 	.word	0x08009c39
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bc0:	4b93      	ldr	r3, [pc, #588]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bcc:	d108      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 f810 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bdc:	f000 bd45 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be4:	f000 bd41 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009be8:	4b89      	ldr	r3, [pc, #548]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bf4:	d108      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf6:	f107 0318 	add.w	r3, r7, #24
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fd54 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c04:	f000 bd31 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c0c:	f000 bd2d 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c10:	4b7f      	ldr	r3, [pc, #508]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c1c:	d108      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c1e:	f107 030c 	add.w	r3, r7, #12
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fe94 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c2c:	f000 bd1d 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c34:	f000 bd19 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c38:	4b75      	ldr	r3, [pc, #468]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c42:	4b73      	ldr	r3, [pc, #460]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d10c      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c54:	4b6e      	ldr	r3, [pc, #440]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	08db      	lsrs	r3, r3, #3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c66:	e01f      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c68:	4b69      	ldr	r3, [pc, #420]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c74:	d106      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c7c:	d102      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c7e:	4b66      	ldr	r3, [pc, #408]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c82:	e011      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c84:	4b62      	ldr	r3, [pc, #392]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c90:	d106      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c98:	d102      	bne.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c9a:	4b60      	ldr	r3, [pc, #384]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ca4:	f000 bce1 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ca8:	f000 bcdf 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cac:	4b5c      	ldr	r3, [pc, #368]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb0:	f000 bcdb 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb8:	f000 bcd7 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	f040 80ad 	bne.w	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009cca:	4b51      	ldr	r3, [pc, #324]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cda:	d056      	beq.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce2:	f200 8090 	bhi.w	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cea:	f000 8088 	beq.w	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cf2:	f200 8088 	bhi.w	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	2b80      	cmp	r3, #128	@ 0x80
 8009cfa:	d032      	beq.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	2b80      	cmp	r3, #128	@ 0x80
 8009d00:	f200 8081 	bhi.w	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	2b40      	cmp	r3, #64	@ 0x40
 8009d0e:	d014      	beq.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009d10:	e079      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d12:	4b3f      	ldr	r3, [pc, #252]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d1e:	d108      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 ff67 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d2e:	f000 bc9c 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d36:	f000 bc98 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d3a:	4b35      	ldr	r3, [pc, #212]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d46:	d108      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d48:	f107 0318 	add.w	r3, r7, #24
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fcab 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d56:	f000 bc88 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d5e:	f000 bc84 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d62:	4b2b      	ldr	r3, [pc, #172]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d6e:	d108      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d70:	f107 030c 	add.w	r3, r7, #12
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fdeb 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d7e:	f000 bc74 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d86:	f000 bc70 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d8a:	4b21      	ldr	r3, [pc, #132]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d94:	4b1e      	ldr	r3, [pc, #120]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d10c      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009da6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	4a18      	ldr	r2, [pc, #96]	@ (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009db2:	fa22 f303 	lsr.w	r3, r2, r3
 8009db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db8:	e01f      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dba:	4b15      	ldr	r3, [pc, #84]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc6:	d106      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dce:	d102      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009dd0:	4b11      	ldr	r3, [pc, #68]	@ (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd4:	e011      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009de2:	d106      	bne.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dea:	d102      	bne.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dec:	4b0b      	ldr	r3, [pc, #44]	@ (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009df6:	f000 bc38 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dfa:	f000 bc36 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009dfe:	4b08      	ldr	r3, [pc, #32]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e02:	f000 bc32 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e0a:	f000 bc2e 	b.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e0e:	bf00      	nop
 8009e10:	58024400 	.word	0x58024400
 8009e14:	03d09000 	.word	0x03d09000
 8009e18:	003d0900 	.word	0x003d0900
 8009e1c:	017d7840 	.word	0x017d7840
 8009e20:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e28:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	f040 809c 	bne.w	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009e32:	4b9e      	ldr	r3, [pc, #632]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e36:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009e3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e42:	d054      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e4a:	f200 808b 	bhi.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e54:	f000 8083 	beq.w	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e5e:	f200 8081 	bhi.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e68:	d02f      	beq.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e70:	d878      	bhi.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e7e:	d012      	beq.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009e80:	e070      	b.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e82:	4b8a      	ldr	r3, [pc, #552]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e8e:	d107      	bne.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 feaf 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e9e:	e3e4      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea4:	e3e1      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ea6:	4b81      	ldr	r3, [pc, #516]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eb2:	d107      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb4:	f107 0318 	add.w	r3, r7, #24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fbf5 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec2:	e3d2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec8:	e3cf      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009eca:	4b78      	ldr	r3, [pc, #480]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ed6:	d107      	bne.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed8:	f107 030c 	add.w	r3, r7, #12
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fd37 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee6:	e3c0      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eec:	e3bd      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009eee:	4b6f      	ldr	r3, [pc, #444]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ef6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ef8:	4b6c      	ldr	r3, [pc, #432]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d10c      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f0a:	4b68      	ldr	r3, [pc, #416]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	08db      	lsrs	r3, r3, #3
 8009f10:	f003 0303 	and.w	r3, r3, #3
 8009f14:	4a66      	ldr	r2, [pc, #408]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f16:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f1c:	e01e      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f1e:	4b63      	ldr	r3, [pc, #396]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f32:	d102      	bne.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f34:	4b5f      	ldr	r3, [pc, #380]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f38:	e010      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f3a:	4b5c      	ldr	r3, [pc, #368]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f46:	d106      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f4e:	d102      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f50:	4b59      	ldr	r3, [pc, #356]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f54:	e002      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f5a:	e386      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f5c:	e385      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f5e:	4b57      	ldr	r3, [pc, #348]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f62:	e382      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f68:	e37f      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009f72:	430b      	orrs	r3, r1
 8009f74:	f040 80a7 	bne.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f78:	4b4c      	ldr	r3, [pc, #304]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009f80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f88:	d055      	beq.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f90:	f200 8096 	bhi.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f9a:	f000 8084 	beq.w	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fa4:	f200 808c 	bhi.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fae:	d030      	beq.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb6:	f200 8083 	bhi.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fc6:	d012      	beq.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009fc8:	e07a      	b.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fca:	4b38      	ldr	r3, [pc, #224]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fd6:	d107      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 fe0b 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe6:	e340      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fec:	e33d      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fee:	4b2f      	ldr	r3, [pc, #188]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffa:	d107      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ffc:	f107 0318 	add.w	r3, r7, #24
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fb51 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00a:	e32e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a010:	e32b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a012:	4b26      	ldr	r3, [pc, #152]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a01a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a01e:	d107      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a020:	f107 030c 	add.w	r3, r7, #12
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fc93 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a02e:	e31c      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a034:	e319      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a036:	4b1d      	ldr	r3, [pc, #116]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a03a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a03e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a040:	4b1a      	ldr	r3, [pc, #104]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d10c      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d109      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a052:	4b16      	ldr	r3, [pc, #88]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	08db      	lsrs	r3, r3, #3
 800a058:	f003 0303 	and.w	r3, r3, #3
 800a05c:	4a14      	ldr	r2, [pc, #80]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a05e:	fa22 f303 	lsr.w	r3, r2, r3
 800a062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a064:	e01e      	b.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a066:	4b11      	ldr	r3, [pc, #68]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a06e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a072:	d106      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a07a:	d102      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a07c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a080:	e010      	b.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a08a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a08e:	d106      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a096:	d102      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a098:	4b07      	ldr	r3, [pc, #28]	@ (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0a2:	e2e2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0a4:	e2e1      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0a6:	4b05      	ldr	r3, [pc, #20]	@ (800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0aa:	e2de      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	03d09000 	.word	0x03d09000
 800a0b4:	003d0900 	.word	0x003d0900
 800a0b8:	017d7840 	.word	0x017d7840
 800a0bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c4:	e2d1      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ca:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a0ce:	430b      	orrs	r3, r1
 800a0d0:	f040 809c 	bne.w	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a0d4:	4b93      	ldr	r3, [pc, #588]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a0dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0e4:	d054      	beq.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0ec:	f200 808b 	bhi.w	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0f6:	f000 8083 	beq.w	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a100:	f200 8081 	bhi.w	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a10a:	d02f      	beq.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a112:	d878      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	2b00      	cmp	r3, #0
 800a118:	d004      	beq.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a120:	d012      	beq.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a122:	e070      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a124:	4b7f      	ldr	r3, [pc, #508]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a12c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a130:	d107      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fd5e 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a140:	e293      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a146:	e290      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a148:	4b76      	ldr	r3, [pc, #472]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a154:	d107      	bne.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a156:	f107 0318 	add.w	r3, r7, #24
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 faa4 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a164:	e281      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16a:	e27e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a16c:	4b6d      	ldr	r3, [pc, #436]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a178:	d107      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17a:	f107 030c 	add.w	r3, r7, #12
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fbe6 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a188:	e26f      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18e:	e26c      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a190:	4b64      	ldr	r3, [pc, #400]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a198:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a19a:	4b62      	ldr	r3, [pc, #392]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d10c      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d109      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ac:	4b5d      	ldr	r3, [pc, #372]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	08db      	lsrs	r3, r3, #3
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	4a5c      	ldr	r2, [pc, #368]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1be:	e01e      	b.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c0:	4b58      	ldr	r3, [pc, #352]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1cc:	d106      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d4:	d102      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1d6:	4b55      	ldr	r3, [pc, #340]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1da:	e010      	b.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1dc:	4b51      	ldr	r3, [pc, #324]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1e8:	d106      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f0:	d102      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1f2:	4b4f      	ldr	r3, [pc, #316]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f6:	e002      	b.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1fc:	e235      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1fe:	e234      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a200:	4b4c      	ldr	r3, [pc, #304]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a204:	e231      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20a:	e22e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a210:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a214:	430b      	orrs	r3, r1
 800a216:	f040 808f 	bne.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a21a:	4b42      	ldr	r3, [pc, #264]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a222:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a22a:	d06b      	beq.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a232:	d874      	bhi.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a23a:	d056      	beq.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a242:	d86c      	bhi.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a24a:	d03b      	beq.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a252:	d864      	bhi.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a25a:	d021      	beq.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a262:	d85c      	bhi.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a270:	d004      	beq.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a272:	e054      	b.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a274:	f7fe fa4c 	bl	8008710 <HAL_RCC_GetPCLK1Freq>
 800a278:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a27a:	e1f6      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a27c:	4b29      	ldr	r3, [pc, #164]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a288:	d107      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a28a:	f107 0318 	add.w	r3, r7, #24
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fa0a 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a298:	e1e7      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29e:	e1e4      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2a0:	4b20      	ldr	r3, [pc, #128]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ac:	d107      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ae:	f107 030c 	add.w	r3, r7, #12
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fb4c 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2bc:	e1d5      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c2:	e1d2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2c4:	4b17      	ldr	r3, [pc, #92]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d109      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2d0:	4b14      	ldr	r3, [pc, #80]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	4a13      	ldr	r2, [pc, #76]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e2:	e1c2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e8:	e1bf      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f6:	d102      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fc:	e1b5      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a302:	e1b2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a304:	4b07      	ldr	r3, [pc, #28]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a30c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a310:	d102      	bne.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a312:	4b07      	ldr	r3, [pc, #28]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a316:	e1a8      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e1a5      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a322:	e1a2      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a324:	58024400 	.word	0x58024400
 800a328:	03d09000 	.word	0x03d09000
 800a32c:	003d0900 	.word	0x003d0900
 800a330:	017d7840 	.word	0x017d7840
 800a334:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a33c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a340:	430b      	orrs	r3, r1
 800a342:	d173      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a344:	4b9c      	ldr	r3, [pc, #624]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a348:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a34c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a354:	d02f      	beq.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a35c:	d863      	bhi.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36a:	d012      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a36c:	e05b      	b.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a36e:	4b92      	ldr	r3, [pc, #584]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a37a:	d107      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37c:	f107 0318 	add.w	r3, r7, #24
 800a380:	4618      	mov	r0, r3
 800a382:	f000 f991 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38a:	e16e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a390:	e16b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a392:	4b89      	ldr	r3, [pc, #548]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a39a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a39e:	d107      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fad3 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ae:	e15c      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b4:	e159      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3b6:	4b80      	ldr	r3, [pc, #512]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d10c      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d2:	4b79      	ldr	r3, [pc, #484]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	08db      	lsrs	r3, r3, #3
 800a3d8:	f003 0303 	and.w	r3, r3, #3
 800a3dc:	4a77      	ldr	r2, [pc, #476]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a3de:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e4:	e01e      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3e6:	4b74      	ldr	r3, [pc, #464]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3f2:	d106      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3fa:	d102      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3fc:	4b70      	ldr	r3, [pc, #448]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a400:	e010      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a402:	4b6d      	ldr	r3, [pc, #436]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a40e:	d106      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a416:	d102      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a418:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a41c:	e002      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a422:	e122      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a424:	e121      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42a:	e11e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a42c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a430:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a434:	430b      	orrs	r3, r1
 800a436:	d133      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a438:	4b5f      	ldr	r3, [pc, #380]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a43a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a43c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a440:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a44e:	d012      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a450:	e023      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a452:	4b59      	ldr	r3, [pc, #356]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a45a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a45e:	d107      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fbc7 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46e:	e0fc      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a474:	e0f9      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a476:	4b50      	ldr	r3, [pc, #320]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a47e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a482:	d107      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a484:	f107 0318 	add.w	r3, r7, #24
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f90d 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a492:	e0ea      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a498:	e0e7      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49e:	e0e4      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	f040 808d 	bne.w	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a4ae:	4b42      	ldr	r3, [pc, #264]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4be:	d06b      	beq.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4c6:	d874      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ce:	d056      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d6:	d86c      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4de:	d03b      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4e6:	d864      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ee:	d021      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d85c      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a504:	d004      	beq.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a506:	e054      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a508:	f000 f8b8 	bl	800a67c <HAL_RCCEx_GetD3PCLK1Freq>
 800a50c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a50e:	e0ac      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a510:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a51c:	d107      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51e:	f107 0318 	add.w	r3, r7, #24
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f8c0 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52c:	e09d      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a532:	e09a      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a534:	4b20      	ldr	r3, [pc, #128]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a53c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a540:	d107      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fa02 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a550:	e08b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a556:	e088      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a558:	4b17      	ldr	r3, [pc, #92]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b04      	cmp	r3, #4
 800a562:	d109      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a564:	4b14      	ldr	r3, [pc, #80]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	08db      	lsrs	r3, r3, #3
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a576:	e078      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57c:	e075      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a57e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58a:	d102      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a58c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a590:	e06b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a596:	e068      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a598:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5a4:	d102      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a5a6:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e05e      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e05b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e058      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	03d09000 	.word	0x03d09000
 800a5c0:	003d0900 	.word	0x003d0900
 800a5c4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	d148      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a5d4:	4b27      	ldr	r3, [pc, #156]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e4:	d02a      	beq.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ec:	d838      	bhi.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d004      	beq.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5fa:	d00d      	beq.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a5fc:	e030      	b.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a60a:	d102      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a60c:	4b1a      	ldr	r3, [pc, #104]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a610:	e02b      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a616:	e028      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a618:	4b16      	ldr	r3, [pc, #88]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a624:	d107      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fae4 	bl	800abf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a634:	e019      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63a:	e016      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a63c:	4b0d      	ldr	r3, [pc, #52]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a648:	d107      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a64a:	f107 0318 	add.w	r3, r7, #24
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f82a 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a658:	e007      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65e:	e004      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a664:	e001      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3740      	adds	r7, #64	@ 0x40
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	58024400 	.word	0x58024400
 800a678:	017d7840 	.word	0x017d7840

0800a67c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a680:	f7fe f816 	bl	80086b0 <HAL_RCC_GetHCLKFreq>
 800a684:	4602      	mov	r2, r0
 800a686:	4b06      	ldr	r3, [pc, #24]	@ (800a6a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	091b      	lsrs	r3, r3, #4
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	4904      	ldr	r1, [pc, #16]	@ (800a6a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a692:	5ccb      	ldrb	r3, [r1, r3]
 800a694:	f003 031f 	and.w	r3, r3, #31
 800a698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	0800ebac 	.word	0x0800ebac

0800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b089      	sub	sp, #36	@ 0x24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6b0:	4ba1      	ldr	r3, [pc, #644]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a6ba:	4b9f      	ldr	r3, [pc, #636]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6be:	0b1b      	lsrs	r3, r3, #12
 800a6c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a6c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6c6:	4b9c      	ldr	r3, [pc, #624]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ca:	091b      	lsrs	r3, r3, #4
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a6d2:	4b99      	ldr	r3, [pc, #612]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d6:	08db      	lsrs	r3, r3, #3
 800a6d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8111 	beq.w	800a918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	f000 8083 	beq.w	800a804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b02      	cmp	r3, #2
 800a702:	f200 80a1 	bhi.w	800a848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d056      	beq.n	800a7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a712:	e099      	b.n	800a848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a714:	4b88      	ldr	r3, [pc, #544]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d02d      	beq.n	800a77c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a720:	4b85      	ldr	r3, [pc, #532]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	4a84      	ldr	r2, [pc, #528]	@ (800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
 800a730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	ee07 3a90 	vmov	s15, r3
 800a738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74a:	4b7b      	ldr	r3, [pc, #492]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a75e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a76a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a77a:	e087      	b.n	800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a786:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78e:	4b6a      	ldr	r3, [pc, #424]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7be:	e065      	b.n	800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d2:	4b59      	ldr	r3, [pc, #356]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a802:	e043      	b.n	800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a816:	4b48      	ldr	r3, [pc, #288]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a826:	ed97 6a03 	vldr	s12, [r7, #12]
 800a82a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a846:	e021      	b.n	800a88c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a852:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a85a:	4b37      	ldr	r3, [pc, #220]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a86a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a86e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a87a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a882:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a88a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a88c:	4b2a      	ldr	r3, [pc, #168]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a890:	0a5b      	lsrs	r3, r3, #9
 800a892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b2:	ee17 2a90 	vmov	r2, s15
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a8ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8be:	0c1b      	lsrs	r3, r3, #16
 800a8c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c4:	ee07 3a90 	vmov	s15, r3
 800a8c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e0:	ee17 2a90 	vmov	r2, s15
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a8e8:	4b13      	ldr	r3, [pc, #76]	@ (800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ec:	0e1b      	lsrs	r3, r3, #24
 800a8ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8f2:	ee07 3a90 	vmov	s15, r3
 800a8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a902:	edd7 6a07 	vldr	s13, [r7, #28]
 800a906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a90e:	ee17 2a90 	vmov	r2, s15
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a916:	e008      	b.n	800a92a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	609a      	str	r2, [r3, #8]
}
 800a92a:	bf00      	nop
 800a92c:	3724      	adds	r7, #36	@ 0x24
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	58024400 	.word	0x58024400
 800a93c:	03d09000 	.word	0x03d09000
 800a940:	46000000 	.word	0x46000000
 800a944:	4c742400 	.word	0x4c742400
 800a948:	4a742400 	.word	0x4a742400
 800a94c:	4bbebc20 	.word	0x4bbebc20

0800a950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a950:	b480      	push	{r7}
 800a952:	b089      	sub	sp, #36	@ 0x24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a958:	4ba1      	ldr	r3, [pc, #644]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a962:	4b9f      	ldr	r3, [pc, #636]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a966:	0d1b      	lsrs	r3, r3, #20
 800a968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a96c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a96e:	4b9c      	ldr	r3, [pc, #624]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a972:	0a1b      	lsrs	r3, r3, #8
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a97a:	4b99      	ldr	r3, [pc, #612]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a97e:	08db      	lsrs	r3, r3, #3
 800a980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 8111 	beq.w	800abc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	f000 8083 	beq.w	800aaac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f200 80a1 	bhi.w	800aaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d056      	beq.n	800aa68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a9ba:	e099      	b.n	800aaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9bc:	4b88      	ldr	r3, [pc, #544]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02d      	beq.n	800aa24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c8:	4b85      	ldr	r3, [pc, #532]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	08db      	lsrs	r3, r3, #3
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	4a84      	ldr	r2, [pc, #528]	@ (800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f2:	4b7b      	ldr	r3, [pc, #492]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa02:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa22:	e087      	b.n	800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa36:	4b6a      	ldr	r3, [pc, #424]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa46:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa66:	e065      	b.n	800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7a:	4b59      	ldr	r3, [pc, #356]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaaa:	e043      	b.n	800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabe:	4b48      	ldr	r3, [pc, #288]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aace:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaee:	e021      	b.n	800ab34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab02:	4b37      	ldr	r3, [pc, #220]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ab34:	4b2a      	ldr	r3, [pc, #168]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab38:	0a5b      	lsrs	r3, r3, #9
 800ab3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5a:	ee17 2a90 	vmov	r2, s15
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab62:	4b1f      	ldr	r3, [pc, #124]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab66:	0c1b      	lsrs	r3, r3, #16
 800ab68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab88:	ee17 2a90 	vmov	r2, s15
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab90:	4b13      	ldr	r3, [pc, #76]	@ (800abe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab94:	0e1b      	lsrs	r3, r3, #24
 800ab96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800abae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb6:	ee17 2a90 	vmov	r2, s15
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abbe:	e008      	b.n	800abd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	609a      	str	r2, [r3, #8]
}
 800abd2:	bf00      	nop
 800abd4:	3724      	adds	r7, #36	@ 0x24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	58024400 	.word	0x58024400
 800abe4:	03d09000 	.word	0x03d09000
 800abe8:	46000000 	.word	0x46000000
 800abec:	4c742400 	.word	0x4c742400
 800abf0:	4a742400 	.word	0x4a742400
 800abf4:	4bbebc20 	.word	0x4bbebc20

0800abf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b089      	sub	sp, #36	@ 0x24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac00:	4ba0      	ldr	r3, [pc, #640]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac04:	f003 0303 	and.w	r3, r3, #3
 800ac08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ac0a:	4b9e      	ldr	r3, [pc, #632]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0e:	091b      	lsrs	r3, r3, #4
 800ac10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac16:	4b9b      	ldr	r3, [pc, #620]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac20:	4b98      	ldr	r3, [pc, #608]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac24:	08db      	lsrs	r3, r3, #3
 800ac26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	fb02 f303 	mul.w	r3, r2, r3
 800ac30:	ee07 3a90 	vmov	s15, r3
 800ac34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 8111 	beq.w	800ae66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	f000 8083 	beq.w	800ad52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	f200 80a1 	bhi.w	800ad96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d056      	beq.n	800ad0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac60:	e099      	b.n	800ad96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac62:	4b88      	ldr	r3, [pc, #544]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d02d      	beq.n	800acca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac6e:	4b85      	ldr	r3, [pc, #532]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	08db      	lsrs	r3, r3, #3
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	4a83      	ldr	r2, [pc, #524]	@ (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac98:	4b7a      	ldr	r3, [pc, #488]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca0:	ee07 3a90 	vmov	s15, r3
 800aca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca8:	ed97 6a03 	vldr	s12, [r7, #12]
 800acac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acc8:	e087      	b.n	800adda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	ee07 3a90 	vmov	s15, r3
 800acd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800acd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acdc:	4b69      	ldr	r3, [pc, #420]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acec:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad0c:	e065      	b.n	800adda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ae94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad20:	4b58      	ldr	r3, [pc, #352]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad30:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad50:	e043      	b.n	800adda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ae98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad64:	4b47      	ldr	r3, [pc, #284]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad74:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad94:	e021      	b.n	800adda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	ee07 3a90 	vmov	s15, r3
 800ad9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ae90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ada4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada8:	4b36      	ldr	r3, [pc, #216]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb0:	ee07 3a90 	vmov	s15, r3
 800adb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adbc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ae8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800add8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800adda:	4b2a      	ldr	r3, [pc, #168]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800addc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adde:	0a5b      	lsrs	r3, r3, #9
 800ade0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ade4:	ee07 3a90 	vmov	s15, r3
 800ade8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae00:	ee17 2a90 	vmov	r2, s15
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae0c:	0c1b      	lsrs	r3, r3, #16
 800ae0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae2e:	ee17 2a90 	vmov	r2, s15
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ae36:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3a:	0e1b      	lsrs	r3, r3, #24
 800ae3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae40:	ee07 3a90 	vmov	s15, r3
 800ae44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae5c:	ee17 2a90 	vmov	r2, s15
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae64:	e008      	b.n	800ae78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	609a      	str	r2, [r3, #8]
}
 800ae78:	bf00      	nop
 800ae7a:	3724      	adds	r7, #36	@ 0x24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	58024400 	.word	0x58024400
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	46000000 	.word	0x46000000
 800ae90:	4c742400 	.word	0x4c742400
 800ae94:	4a742400 	.word	0x4a742400
 800ae98:	4bbebc20 	.word	0x4bbebc20

0800ae9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aeaa:	4b53      	ldr	r3, [pc, #332]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aeac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeae:	f003 0303 	and.w	r3, r3, #3
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d101      	bne.n	800aeba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e099      	b.n	800afee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aeba:	4b4f      	ldr	r3, [pc, #316]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a4e      	ldr	r2, [pc, #312]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aec0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aec6:	f7f8 fe5f 	bl	8003b88 <HAL_GetTick>
 800aeca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aecc:	e008      	b.n	800aee0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aece:	f7f8 fe5b 	bl	8003b88 <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d901      	bls.n	800aee0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e086      	b.n	800afee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aee0:	4b45      	ldr	r3, [pc, #276]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1f0      	bne.n	800aece <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aeec:	4b42      	ldr	r3, [pc, #264]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aeee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	031b      	lsls	r3, r3, #12
 800aefa:	493f      	ldr	r1, [pc, #252]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800aefc:	4313      	orrs	r3, r2
 800aefe:	628b      	str	r3, [r1, #40]	@ 0x28
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	3b01      	subs	r3, #1
 800af06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	3b01      	subs	r3, #1
 800af10:	025b      	lsls	r3, r3, #9
 800af12:	b29b      	uxth	r3, r3
 800af14:	431a      	orrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	041b      	lsls	r3, r3, #16
 800af1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af22:	431a      	orrs	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	3b01      	subs	r3, #1
 800af2a:	061b      	lsls	r3, r3, #24
 800af2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af30:	4931      	ldr	r1, [pc, #196]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af32:	4313      	orrs	r3, r2
 800af34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af36:	4b30      	ldr	r3, [pc, #192]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	492d      	ldr	r1, [pc, #180]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af44:	4313      	orrs	r3, r2
 800af46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af48:	4b2b      	ldr	r3, [pc, #172]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4c:	f023 0220 	bic.w	r2, r3, #32
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	4928      	ldr	r1, [pc, #160]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af56:	4313      	orrs	r3, r2
 800af58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af5a:	4b27      	ldr	r3, [pc, #156]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5e:	4a26      	ldr	r2, [pc, #152]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af60:	f023 0310 	bic.w	r3, r3, #16
 800af64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af66:	4b24      	ldr	r3, [pc, #144]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af6a:	4b24      	ldr	r3, [pc, #144]	@ (800affc <RCCEx_PLL2_Config+0x160>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	69d2      	ldr	r2, [r2, #28]
 800af72:	00d2      	lsls	r2, r2, #3
 800af74:	4920      	ldr	r1, [pc, #128]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af76:	4313      	orrs	r3, r2
 800af78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af7a:	4b1f      	ldr	r3, [pc, #124]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7e:	4a1e      	ldr	r2, [pc, #120]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af80:	f043 0310 	orr.w	r3, r3, #16
 800af84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d106      	bne.n	800af9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af8c:	4b1a      	ldr	r3, [pc, #104]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af90:	4a19      	ldr	r2, [pc, #100]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800af92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af98:	e00f      	b.n	800afba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d106      	bne.n	800afae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800afa0:	4b15      	ldr	r3, [pc, #84]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa4:	4a14      	ldr	r2, [pc, #80]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afac:	e005      	b.n	800afba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afae:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb2:	4a11      	ldr	r2, [pc, #68]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800afb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afba:	4b0f      	ldr	r3, [pc, #60]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a0e      	ldr	r2, [pc, #56]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800afc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc6:	f7f8 fddf 	bl	8003b88 <HAL_GetTick>
 800afca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afcc:	e008      	b.n	800afe0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800afce:	f7f8 fddb 	bl	8003b88 <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d901      	bls.n	800afe0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e006      	b.n	800afee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afe0:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <RCCEx_PLL2_Config+0x15c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0f0      	beq.n	800afce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	58024400 	.word	0x58024400
 800affc:	ffff0007 	.word	0xffff0007

0800b000 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b00e:	4b53      	ldr	r3, [pc, #332]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d101      	bne.n	800b01e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e099      	b.n	800b152 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b01e:	4b4f      	ldr	r3, [pc, #316]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a4e      	ldr	r2, [pc, #312]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b02a:	f7f8 fdad 	bl	8003b88 <HAL_GetTick>
 800b02e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b030:	e008      	b.n	800b044 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b032:	f7f8 fda9 	bl	8003b88 <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d901      	bls.n	800b044 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e086      	b.n	800b152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b044:	4b45      	ldr	r3, [pc, #276]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f0      	bne.n	800b032 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b050:	4b42      	ldr	r3, [pc, #264]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b054:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	051b      	lsls	r3, r3, #20
 800b05e:	493f      	ldr	r1, [pc, #252]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b060:	4313      	orrs	r3, r2
 800b062:	628b      	str	r3, [r1, #40]	@ 0x28
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	3b01      	subs	r3, #1
 800b06a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	3b01      	subs	r3, #1
 800b074:	025b      	lsls	r3, r3, #9
 800b076:	b29b      	uxth	r3, r3
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	3b01      	subs	r3, #1
 800b080:	041b      	lsls	r3, r3, #16
 800b082:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	061b      	lsls	r3, r3, #24
 800b090:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b094:	4931      	ldr	r1, [pc, #196]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b096:	4313      	orrs	r3, r2
 800b098:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b09a:	4b30      	ldr	r3, [pc, #192]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	492d      	ldr	r1, [pc, #180]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	4928      	ldr	r1, [pc, #160]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0be:	4b27      	ldr	r3, [pc, #156]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c2:	4a26      	ldr	r2, [pc, #152]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0ca:	4b24      	ldr	r3, [pc, #144]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ce:	4b24      	ldr	r3, [pc, #144]	@ (800b160 <RCCEx_PLL3_Config+0x160>)
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	69d2      	ldr	r2, [r2, #28]
 800b0d6:	00d2      	lsls	r2, r2, #3
 800b0d8:	4920      	ldr	r1, [pc, #128]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0de:	4b1f      	ldr	r3, [pc, #124]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d106      	bne.n	800b0fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f4:	4a19      	ldr	r2, [pc, #100]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b0f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b0fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b0fc:	e00f      	b.n	800b11e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d106      	bne.n	800b112 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b104:	4b15      	ldr	r3, [pc, #84]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	4a14      	ldr	r2, [pc, #80]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b10a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b10e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b110:	e005      	b.n	800b11e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b112:	4b12      	ldr	r3, [pc, #72]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	4a11      	ldr	r2, [pc, #68]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b11c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b11e:	4b0f      	ldr	r3, [pc, #60]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a0e      	ldr	r2, [pc, #56]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b12a:	f7f8 fd2d 	bl	8003b88 <HAL_GetTick>
 800b12e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b130:	e008      	b.n	800b144 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b132:	f7f8 fd29 	bl	8003b88 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d901      	bls.n	800b144 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b140:	2303      	movs	r3, #3
 800b142:	e006      	b.n	800b152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b144:	4b05      	ldr	r3, [pc, #20]	@ (800b15c <RCCEx_PLL3_Config+0x15c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0f0      	beq.n	800b132 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	58024400 	.word	0x58024400
 800b160:	ffff0007 	.word	0xffff0007

0800b164 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d071      	beq.n	800b25a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7f7 ffa6 	bl	80030dc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2202      	movs	r2, #2
 800b194:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f003 0310 	and.w	r3, r3, #16
 800b1a2:	2b10      	cmp	r3, #16
 800b1a4:	d050      	beq.n	800b248 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	22ca      	movs	r2, #202	@ 0xca
 800b1ac:	625a      	str	r2, [r3, #36]	@ 0x24
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2253      	movs	r2, #83	@ 0x53
 800b1b4:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f87a 	bl	800b2b0 <RTC_EnterInitMode>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d124      	bne.n	800b210 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6899      	ldr	r1, [r3, #8]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b24      	ldr	r3, [pc, #144]	@ (800b264 <HAL_RTC_Init+0x100>)
 800b1d2:	400b      	ands	r3, r1
 800b1d4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6899      	ldr	r1, [r3, #8]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	0419      	lsls	r1, r3, #16
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68da      	ldr	r2, [r3, #12]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f886 	bl	800b318 <RTC_ExitInitMode>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d113      	bne.n	800b23e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f022 0203 	bic.w	r2, r2, #3
 800b224:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	431a      	orrs	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	430a      	orrs	r2, r1
 800b23c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	22ff      	movs	r2, #255	@ 0xff
 800b244:	625a      	str	r2, [r3, #36]	@ 0x24
 800b246:	e001      	b.n	800b24c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b248:	2300      	movs	r3, #0
 800b24a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d103      	bne.n	800b25a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	ff8fffbf 	.word	0xff8fffbf

0800b268 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a0d      	ldr	r2, [pc, #52]	@ (800b2ac <HAL_RTC_WaitForSynchro+0x44>)
 800b276:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b278:	f7f8 fc86 	bl	8003b88 <HAL_GetTick>
 800b27c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b27e:	e009      	b.n	800b294 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b280:	f7f8 fc82 	bl	8003b88 <HAL_GetTick>
 800b284:	4602      	mov	r2, r0
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b28e:	d901      	bls.n	800b294 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e007      	b.n	800b2a4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	f003 0320 	and.w	r3, r3, #32
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0ee      	beq.n	800b280 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	0003ff5f 	.word	0x0003ff5f

0800b2b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d120      	bne.n	800b30c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b2d4:	f7f8 fc58 	bl	8003b88 <HAL_GetTick>
 800b2d8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b2da:	e00d      	b.n	800b2f8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b2dc:	f7f8 fc54 	bl	8003b88 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2ea:	d905      	bls.n	800b2f8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <RTC_EnterInitMode+0x5c>
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d1e7      	bne.n	800b2dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b324:	4b1a      	ldr	r3, [pc, #104]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	4a19      	ldr	r2, [pc, #100]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b32e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b330:	4b17      	ldr	r3, [pc, #92]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10c      	bne.n	800b356 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff ff93 	bl	800b268 <HAL_RTC_WaitForSynchro>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01e      	beq.n	800b386 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2203      	movs	r2, #3
 800b34c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	73fb      	strb	r3, [r7, #15]
 800b354:	e017      	b.n	800b386 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b356:	4b0e      	ldr	r3, [pc, #56]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	4a0d      	ldr	r2, [pc, #52]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b35c:	f023 0320 	bic.w	r3, r3, #32
 800b360:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff ff80 	bl	800b268 <HAL_RTC_WaitForSynchro>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d005      	beq.n	800b37a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2203      	movs	r2, #3
 800b372:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	4a04      	ldr	r2, [pc, #16]	@ (800b390 <RTC_ExitInitMode+0x78>)
 800b380:	f043 0320 	orr.w	r3, r3, #32
 800b384:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	58004000 	.word	0x58004000

0800b394 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b08a      	sub	sp, #40	@ 0x28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e28e      	b.n	800b8c4 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b3a6:	f7f8 fc1f 	bl	8003be8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d113      	bne.n	800b3dc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a96      	ldr	r2, [pc, #600]	@ (800b614 <HAL_SAI_Init+0x280>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d004      	beq.n	800b3c8 <HAL_SAI_Init+0x34>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a95      	ldr	r2, [pc, #596]	@ (800b618 <HAL_SAI_Init+0x284>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d107      	bne.n	800b3d8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d103      	bne.n	800b3d8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e273      	b.n	800b8c4 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a8c      	ldr	r2, [pc, #560]	@ (800b614 <HAL_SAI_Init+0x280>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d004      	beq.n	800b3f0 <HAL_SAI_Init+0x5c>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a8c      	ldr	r2, [pc, #560]	@ (800b61c <HAL_SAI_Init+0x288>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d102      	bne.n	800b3f6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b3f0:	4b8b      	ldr	r3, [pc, #556]	@ (800b620 <HAL_SAI_Init+0x28c>)
 800b3f2:	61bb      	str	r3, [r7, #24]
 800b3f4:	e028      	b.n	800b448 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a8a      	ldr	r2, [pc, #552]	@ (800b624 <HAL_SAI_Init+0x290>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d004      	beq.n	800b40a <HAL_SAI_Init+0x76>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a88      	ldr	r2, [pc, #544]	@ (800b628 <HAL_SAI_Init+0x294>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d102      	bne.n	800b410 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b40a:	4b88      	ldr	r3, [pc, #544]	@ (800b62c <HAL_SAI_Init+0x298>)
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e01b      	b.n	800b448 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a86      	ldr	r2, [pc, #536]	@ (800b630 <HAL_SAI_Init+0x29c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d004      	beq.n	800b424 <HAL_SAI_Init+0x90>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a85      	ldr	r2, [pc, #532]	@ (800b634 <HAL_SAI_Init+0x2a0>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d102      	bne.n	800b42a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b424:	4b84      	ldr	r3, [pc, #528]	@ (800b638 <HAL_SAI_Init+0x2a4>)
 800b426:	61bb      	str	r3, [r7, #24]
 800b428:	e00e      	b.n	800b448 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a7a      	ldr	r2, [pc, #488]	@ (800b618 <HAL_SAI_Init+0x284>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d004      	beq.n	800b43e <HAL_SAI_Init+0xaa>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a80      	ldr	r2, [pc, #512]	@ (800b63c <HAL_SAI_Init+0x2a8>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d102      	bne.n	800b444 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b43e:	4b80      	ldr	r3, [pc, #512]	@ (800b640 <HAL_SAI_Init+0x2ac>)
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	e001      	b.n	800b448 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e23d      	b.n	800b8c4 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7f8 f8e5 	bl	800362c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa40 	bl	800b8e8 <SAI_Disable>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e228      	b.n	800b8c4 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2202      	movs	r2, #2
 800b476:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d00c      	beq.n	800b49c <HAL_SAI_Init+0x108>
 800b482:	2b02      	cmp	r3, #2
 800b484:	d80d      	bhi.n	800b4a2 <HAL_SAI_Init+0x10e>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <HAL_SAI_Init+0xfc>
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d003      	beq.n	800b496 <HAL_SAI_Init+0x102>
 800b48e:	e008      	b.n	800b4a2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b494:	e008      	b.n	800b4a8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b496:	2310      	movs	r3, #16
 800b498:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b49a:	e005      	b.n	800b4a8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b49c:	2320      	movs	r3, #32
 800b49e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4a0:	e002      	b.n	800b4a8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4a6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	2b05      	cmp	r3, #5
 800b4ae:	d832      	bhi.n	800b516 <HAL_SAI_Init+0x182>
 800b4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b4b8 <HAL_SAI_Init+0x124>)
 800b4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b6:	bf00      	nop
 800b4b8:	0800b4d1 	.word	0x0800b4d1
 800b4bc:	0800b4d7 	.word	0x0800b4d7
 800b4c0:	0800b4df 	.word	0x0800b4df
 800b4c4:	0800b4e7 	.word	0x0800b4e7
 800b4c8:	0800b4f7 	.word	0x0800b4f7
 800b4cc:	0800b507 	.word	0x0800b507
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61fb      	str	r3, [r7, #28]
      break;
 800b4d4:	e022      	b.n	800b51c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4da:	61fb      	str	r3, [r7, #28]
      break;
 800b4dc:	e01e      	b.n	800b51c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4e2:	61fb      	str	r3, [r7, #28]
      break;
 800b4e4:	e01a      	b.n	800b51c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	f043 0301 	orr.w	r3, r3, #1
 800b4f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b4f4:	e012      	b.n	800b51c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b4f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b4fa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fe:	f043 0302 	orr.w	r3, r3, #2
 800b502:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b504:	e00a      	b.n	800b51c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b50a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50e:	f043 0303 	orr.w	r3, r3, #3
 800b512:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b514:	e002      	b.n	800b51c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	61fb      	str	r3, [r7, #28]
      break;
 800b51a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b520:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 80c5 	beq.w	800b6b6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a37      	ldr	r2, [pc, #220]	@ (800b614 <HAL_SAI_Init+0x280>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d004      	beq.n	800b544 <HAL_SAI_Init+0x1b0>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a37      	ldr	r2, [pc, #220]	@ (800b61c <HAL_SAI_Init+0x288>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d106      	bne.n	800b552 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b544:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b548:	f04f 0100 	mov.w	r1, #0
 800b54c:	f7fe fb16 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b550:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a33      	ldr	r2, [pc, #204]	@ (800b624 <HAL_SAI_Init+0x290>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d004      	beq.n	800b566 <HAL_SAI_Init+0x1d2>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a31      	ldr	r2, [pc, #196]	@ (800b628 <HAL_SAI_Init+0x294>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d106      	bne.n	800b574 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b56a:	f04f 0100 	mov.w	r1, #0
 800b56e:	f7fe fb05 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b572:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a2d      	ldr	r2, [pc, #180]	@ (800b630 <HAL_SAI_Init+0x29c>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_SAI_Init+0x1f4>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a2c      	ldr	r2, [pc, #176]	@ (800b634 <HAL_SAI_Init+0x2a0>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d106      	bne.n	800b596 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b588:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b58c:	f04f 0100 	mov.w	r1, #0
 800b590:	f7fe faf4 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b594:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a1f      	ldr	r2, [pc, #124]	@ (800b618 <HAL_SAI_Init+0x284>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d106      	bne.n	800b5ae <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b5a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b5a4:	f04f 0100 	mov.w	r1, #0
 800b5a8:	f7fe fae8 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b5ac:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a22      	ldr	r2, [pc, #136]	@ (800b63c <HAL_SAI_Init+0x2a8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d106      	bne.n	800b5c6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b5b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b5bc:	f04f 0100 	mov.w	r1, #0
 800b5c0:	f7fe fadc 	bl	8009b7c <HAL_RCCEx_GetPeriphCLKFreq>
 800b5c4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b5ce:	d139      	bne.n	800b644 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d102      	bne.n	800b5de <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b5d8:	2340      	movs	r3, #64	@ 0x40
 800b5da:	60fb      	str	r3, [r7, #12]
 800b5dc:	e00a      	b.n	800b5f4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d103      	bne.n	800b5ee <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b5e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	e002      	b.n	800b5f4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5f2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	005b      	lsls	r3, r3, #1
 800b5fe:	4619      	mov	r1, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	fb02 f303 	mul.w	r3, r2, r3
 800b60a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	e030      	b.n	800b674 <HAL_SAI_Init+0x2e0>
 800b612:	bf00      	nop
 800b614:	40015804 	.word	0x40015804
 800b618:	58005404 	.word	0x58005404
 800b61c:	40015824 	.word	0x40015824
 800b620:	40015800 	.word	0x40015800
 800b624:	40015c04 	.word	0x40015c04
 800b628:	40015c24 	.word	0x40015c24
 800b62c:	40015c00 	.word	0x40015c00
 800b630:	40016004 	.word	0x40016004
 800b634:	40016024 	.word	0x40016024
 800b638:	40016000 	.word	0x40016000
 800b63c:	58005424 	.word	0x58005424
 800b640:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b64c:	d101      	bne.n	800b652 <HAL_SAI_Init+0x2be>
 800b64e:	2302      	movs	r3, #2
 800b650:	e000      	b.n	800b654 <HAL_SAI_Init+0x2c0>
 800b652:	2301      	movs	r3, #1
 800b654:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	4619      	mov	r1, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	fb02 f303 	mul.w	r3, r2, r3
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b672:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	4a95      	ldr	r2, [pc, #596]	@ (800b8cc <HAL_SAI_Init+0x538>)
 800b678:	fba2 2303 	umull	r2, r3, r2, r3
 800b67c:	08da      	lsrs	r2, r3, #3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b682:	6939      	ldr	r1, [r7, #16]
 800b684:	4b91      	ldr	r3, [pc, #580]	@ (800b8cc <HAL_SAI_Init+0x538>)
 800b686:	fba3 2301 	umull	r2, r3, r3, r1
 800b68a:	08da      	lsrs	r2, r3, #3
 800b68c:	4613      	mov	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	4413      	add	r3, r2
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	1aca      	subs	r2, r1, r3
 800b696:	2a08      	cmp	r2, #8
 800b698:	d904      	bls.n	800b6a4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d104      	bne.n	800b6b6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b0:	085a      	lsrs	r2, r3, #1
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_SAI_Init+0x332>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d109      	bne.n	800b6da <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d101      	bne.n	800b6d2 <HAL_SAI_Init+0x33e>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e001      	b.n	800b6d6 <HAL_SAI_Init+0x342>
 800b6d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6d6:	623b      	str	r3, [r7, #32]
 800b6d8:	e008      	b.n	800b6ec <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d102      	bne.n	800b6e8 <HAL_SAI_Init+0x354>
 800b6e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6e6:	e000      	b.n	800b6ea <HAL_SAI_Init+0x356>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b6ec:	f7f8 fa7c 	bl	8003be8 <HAL_GetREVID>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6f6:	d331      	bcc.n	800b75c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6819      	ldr	r1, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	4b73      	ldr	r3, [pc, #460]	@ (800b8d0 <HAL_SAI_Init+0x53c>)
 800b704:	400b      	ands	r3, r1
 800b706:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b716:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b71c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b722:	431a      	orrs	r2, r3
 800b724:	6a3b      	ldr	r3, [r7, #32]
 800b726:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b730:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	695b      	ldr	r3, [r3, #20]
 800b736:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b73c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b742:	051b      	lsls	r3, r3, #20
 800b744:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b74a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	e02d      	b.n	800b7b8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	4b5b      	ldr	r3, [pc, #364]	@ (800b8d4 <HAL_SAI_Init+0x540>)
 800b768:	400b      	ands	r3, r1
 800b76a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6819      	ldr	r1, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b77a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b780:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b786:	431a      	orrs	r2, r3
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800b794:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b7a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a6:	051b      	lsls	r3, r3, #20
 800b7a8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b7ae:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6859      	ldr	r1, [r3, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	4b45      	ldr	r3, [pc, #276]	@ (800b8d8 <HAL_SAI_Init+0x544>)
 800b7c4:	400b      	ands	r3, r1
 800b7c6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6859      	ldr	r1, [r3, #4]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	69da      	ldr	r2, [r3, #28]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6899      	ldr	r1, [r3, #8]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	4b3a      	ldr	r3, [pc, #232]	@ (800b8dc <HAL_SAI_Init+0x548>)
 800b7f2:	400b      	ands	r3, r1
 800b7f4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6899      	ldr	r1, [r3, #8]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b800:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b806:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b80c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b812:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b818:	3b01      	subs	r3, #1
 800b81a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b81c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68d9      	ldr	r1, [r3, #12]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b834:	400b      	ands	r3, r1
 800b836:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68d9      	ldr	r1, [r3, #12]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b846:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b84c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b84e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b854:	3b01      	subs	r3, #1
 800b856:	021b      	lsls	r3, r3, #8
 800b858:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	430a      	orrs	r2, r1
 800b860:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a1e      	ldr	r2, [pc, #120]	@ (800b8e0 <HAL_SAI_Init+0x54c>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d004      	beq.n	800b876 <HAL_SAI_Init+0x4e2>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e4 <HAL_SAI_Init+0x550>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d119      	bne.n	800b8aa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b87a:	f023 0201 	bic.w	r2, r3, #1
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d10e      	bne.n	800b8aa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b894:	3b01      	subs	r3, #1
 800b896:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b898:	431a      	orrs	r2, r3
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8a2:	f043 0201 	orr.w	r2, r3, #1
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3728      	adds	r7, #40	@ 0x28
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	cccccccd 	.word	0xcccccccd
 800b8d0:	f005c010 	.word	0xf005c010
 800b8d4:	f805c010 	.word	0xf805c010
 800b8d8:	ffff1ff0 	.word	0xffff1ff0
 800b8dc:	fff88000 	.word	0xfff88000
 800b8e0:	40015804 	.word	0x40015804
 800b8e4:	58005404 	.word	0x58005404

0800b8e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b8f0:	4b18      	ldr	r3, [pc, #96]	@ (800b954 <SAI_Disable+0x6c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a18      	ldr	r2, [pc, #96]	@ (800b958 <SAI_Disable+0x70>)
 800b8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fa:	0b1b      	lsrs	r3, r3, #12
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b912:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b920:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b92a:	2303      	movs	r3, #3
 800b92c:	72fb      	strb	r3, [r7, #11]
      break;
 800b92e:	e009      	b.n	800b944 <SAI_Disable+0x5c>
    }
    count--;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3b01      	subs	r3, #1
 800b934:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e7      	bne.n	800b914 <SAI_Disable+0x2c>

  return status;
 800b944:	7afb      	ldrb	r3, [r7, #11]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	24000000 	.word	0x24000000
 800b958:	95cbec1b 	.word	0x95cbec1b

0800b95c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e02b      	b.n	800b9c8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f7 fe47 	bl	8003618 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2202      	movs	r2, #2
 800b98e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f001 fac3 	bl	800cf28 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	f001 fb17 	bl	800cfe0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b9b2:	4b07      	ldr	r3, [pc, #28]	@ (800b9d0 <HAL_SDRAM_Init+0x74>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a06      	ldr	r2, [pc, #24]	@ (800b9d0 <HAL_SDRAM_Init+0x74>)
 800b9b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9bc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	52004000 	.word	0x52004000

0800b9d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e10f      	b.n	800bc06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a87      	ldr	r2, [pc, #540]	@ (800bc10 <HAL_SPI_Init+0x23c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00f      	beq.n	800ba16 <HAL_SPI_Init+0x42>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a86      	ldr	r2, [pc, #536]	@ (800bc14 <HAL_SPI_Init+0x240>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d00a      	beq.n	800ba16 <HAL_SPI_Init+0x42>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a84      	ldr	r2, [pc, #528]	@ (800bc18 <HAL_SPI_Init+0x244>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d005      	beq.n	800ba16 <HAL_SPI_Init+0x42>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	2b0f      	cmp	r3, #15
 800ba10:	d901      	bls.n	800ba16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e0f7      	b.n	800bc06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f900 	bl	800bc1c <SPI_GetPacketSize>
 800ba1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a7b      	ldr	r2, [pc, #492]	@ (800bc10 <HAL_SPI_Init+0x23c>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d00c      	beq.n	800ba42 <HAL_SPI_Init+0x6e>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a79      	ldr	r2, [pc, #484]	@ (800bc14 <HAL_SPI_Init+0x240>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d007      	beq.n	800ba42 <HAL_SPI_Init+0x6e>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a78      	ldr	r2, [pc, #480]	@ (800bc18 <HAL_SPI_Init+0x244>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d002      	beq.n	800ba42 <HAL_SPI_Init+0x6e>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b08      	cmp	r3, #8
 800ba40:	d811      	bhi.n	800ba66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba46:	4a72      	ldr	r2, [pc, #456]	@ (800bc10 <HAL_SPI_Init+0x23c>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d009      	beq.n	800ba60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a70      	ldr	r2, [pc, #448]	@ (800bc14 <HAL_SPI_Init+0x240>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d004      	beq.n	800ba60 <HAL_SPI_Init+0x8c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a6f      	ldr	r2, [pc, #444]	@ (800bc18 <HAL_SPI_Init+0x244>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d104      	bne.n	800ba6a <HAL_SPI_Init+0x96>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b10      	cmp	r3, #16
 800ba64:	d901      	bls.n	800ba6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e0cd      	b.n	800bc06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d106      	bne.n	800ba84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7f7 fb5e 	bl	8003140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2202      	movs	r2, #2
 800ba88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f022 0201 	bic.w	r2, r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800baa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bab0:	d119      	bne.n	800bae6 <HAL_SPI_Init+0x112>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800baba:	d103      	bne.n	800bac4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d008      	beq.n	800bad6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10c      	bne.n	800bae6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bad4:	d107      	bne.n	800bae6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00f      	beq.n	800bb12 <HAL_SPI_Init+0x13e>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	2b06      	cmp	r3, #6
 800baf8:	d90b      	bls.n	800bb12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	e007      	b.n	800bb22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	69da      	ldr	r2, [r3, #28]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb34:	ea42 0103 	orr.w	r1, r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	431a      	orrs	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	431a      	orrs	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb76:	431a      	orrs	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb82:	ea42 0103 	orr.w	r1, r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d113      	bne.n	800bbc2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bbc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f022 0201 	bic.w	r2, r2, #1
 800bbd0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00a      	beq.n	800bbf4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	40013000 	.word	0x40013000
 800bc14:	40003800 	.word	0x40003800
 800bc18:	40003c00 	.word	0x40003c00

0800bc1c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc28:	095b      	lsrs	r3, r3, #5
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	3307      	adds	r3, #7
 800bc3a:	08db      	lsrs	r3, r3, #3
 800bc3c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b082      	sub	sp, #8
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e042      	b.n	800bcea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f7 fb2c 	bl	80032d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2224      	movs	r2, #36	@ 0x24
 800bc80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 0201 	bic.w	r2, r2, #1
 800bc92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fe1f 	bl	800c8e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f8b4 	bl	800be10 <UART_SetConfig>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e01b      	b.n	800bcea <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	689a      	ldr	r2, [r3, #8]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f042 0201 	orr.w	r2, r2, #1
 800bce0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fe9e 	bl	800ca24 <UART_CheckIdleState>
 800bce8:	4603      	mov	r3, r0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b08a      	sub	sp, #40	@ 0x28
 800bcf6:	af02      	add	r7, sp, #8
 800bcf8:	60f8      	str	r0, [r7, #12]
 800bcfa:	60b9      	str	r1, [r7, #8]
 800bcfc:	603b      	str	r3, [r7, #0]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd08:	2b20      	cmp	r3, #32
 800bd0a:	d17b      	bne.n	800be04 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <HAL_UART_Transmit+0x26>
 800bd12:	88fb      	ldrh	r3, [r7, #6]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e074      	b.n	800be06 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2221      	movs	r2, #33	@ 0x21
 800bd28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd2c:	f7f7 ff2c 	bl	8003b88 <HAL_GetTick>
 800bd30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	88fa      	ldrh	r2, [r7, #6]
 800bd36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	88fa      	ldrh	r2, [r7, #6]
 800bd3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd4a:	d108      	bne.n	800bd5e <HAL_UART_Transmit+0x6c>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d104      	bne.n	800bd5e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	61bb      	str	r3, [r7, #24]
 800bd5c:	e003      	b.n	800bd66 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bd66:	e030      	b.n	800bdca <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2180      	movs	r1, #128	@ 0x80
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 ff00 	bl	800cb78 <UART_WaitOnFlagUntilTimeout>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2220      	movs	r2, #32
 800bd82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e03d      	b.n	800be06 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10b      	bne.n	800bda8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	461a      	mov	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	3302      	adds	r3, #2
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	e007      	b.n	800bdb8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1c8      	bne.n	800bd68 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2200      	movs	r2, #0
 800bdde:	2140      	movs	r1, #64	@ 0x40
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 fec9 	bl	800cb78 <UART_WaitOnFlagUntilTimeout>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2220      	movs	r2, #32
 800bdf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e006      	b.n	800be06 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e000      	b.n	800be06 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800be04:	2302      	movs	r3, #2
  }
}
 800be06:	4618      	mov	r0, r3
 800be08:	3720      	adds	r7, #32
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be14:	b092      	sub	sp, #72	@ 0x48
 800be16:	af00      	add	r7, sp, #0
 800be18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	689a      	ldr	r2, [r3, #8]
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	431a      	orrs	r2, r3
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	431a      	orrs	r2, r3
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	4313      	orrs	r3, r2
 800be36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4bbe      	ldr	r3, [pc, #760]	@ (800c138 <UART_SetConfig+0x328>)
 800be40:	4013      	ands	r3, r2
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	6812      	ldr	r2, [r2, #0]
 800be46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be48:	430b      	orrs	r3, r1
 800be4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	430a      	orrs	r2, r1
 800be60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4ab3      	ldr	r2, [pc, #716]	@ (800c13c <UART_SetConfig+0x32c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d004      	beq.n	800be7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be78:	4313      	orrs	r3, r2
 800be7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	4baf      	ldr	r3, [pc, #700]	@ (800c140 <UART_SetConfig+0x330>)
 800be84:	4013      	ands	r3, r2
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be96:	f023 010f 	bic.w	r1, r3, #15
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4aa6      	ldr	r2, [pc, #664]	@ (800c144 <UART_SetConfig+0x334>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d177      	bne.n	800bfa0 <UART_SetConfig+0x190>
 800beb0:	4ba5      	ldr	r3, [pc, #660]	@ (800c148 <UART_SetConfig+0x338>)
 800beb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beb8:	2b28      	cmp	r3, #40	@ 0x28
 800beba:	d86d      	bhi.n	800bf98 <UART_SetConfig+0x188>
 800bebc:	a201      	add	r2, pc, #4	@ (adr r2, 800bec4 <UART_SetConfig+0xb4>)
 800bebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec2:	bf00      	nop
 800bec4:	0800bf69 	.word	0x0800bf69
 800bec8:	0800bf99 	.word	0x0800bf99
 800becc:	0800bf99 	.word	0x0800bf99
 800bed0:	0800bf99 	.word	0x0800bf99
 800bed4:	0800bf99 	.word	0x0800bf99
 800bed8:	0800bf99 	.word	0x0800bf99
 800bedc:	0800bf99 	.word	0x0800bf99
 800bee0:	0800bf99 	.word	0x0800bf99
 800bee4:	0800bf71 	.word	0x0800bf71
 800bee8:	0800bf99 	.word	0x0800bf99
 800beec:	0800bf99 	.word	0x0800bf99
 800bef0:	0800bf99 	.word	0x0800bf99
 800bef4:	0800bf99 	.word	0x0800bf99
 800bef8:	0800bf99 	.word	0x0800bf99
 800befc:	0800bf99 	.word	0x0800bf99
 800bf00:	0800bf99 	.word	0x0800bf99
 800bf04:	0800bf79 	.word	0x0800bf79
 800bf08:	0800bf99 	.word	0x0800bf99
 800bf0c:	0800bf99 	.word	0x0800bf99
 800bf10:	0800bf99 	.word	0x0800bf99
 800bf14:	0800bf99 	.word	0x0800bf99
 800bf18:	0800bf99 	.word	0x0800bf99
 800bf1c:	0800bf99 	.word	0x0800bf99
 800bf20:	0800bf99 	.word	0x0800bf99
 800bf24:	0800bf81 	.word	0x0800bf81
 800bf28:	0800bf99 	.word	0x0800bf99
 800bf2c:	0800bf99 	.word	0x0800bf99
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf99 	.word	0x0800bf99
 800bf38:	0800bf99 	.word	0x0800bf99
 800bf3c:	0800bf99 	.word	0x0800bf99
 800bf40:	0800bf99 	.word	0x0800bf99
 800bf44:	0800bf89 	.word	0x0800bf89
 800bf48:	0800bf99 	.word	0x0800bf99
 800bf4c:	0800bf99 	.word	0x0800bf99
 800bf50:	0800bf99 	.word	0x0800bf99
 800bf54:	0800bf99 	.word	0x0800bf99
 800bf58:	0800bf99 	.word	0x0800bf99
 800bf5c:	0800bf99 	.word	0x0800bf99
 800bf60:	0800bf99 	.word	0x0800bf99
 800bf64:	0800bf91 	.word	0x0800bf91
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf6e:	e222      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf70:	2304      	movs	r3, #4
 800bf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf76:	e21e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf78:	2308      	movs	r3, #8
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7e:	e21a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf80:	2310      	movs	r3, #16
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf86:	e216      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf88:	2320      	movs	r3, #32
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8e:	e212      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf90:	2340      	movs	r3, #64	@ 0x40
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e20e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bf98:	2380      	movs	r3, #128	@ 0x80
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e20a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a69      	ldr	r2, [pc, #420]	@ (800c14c <UART_SetConfig+0x33c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d130      	bne.n	800c00c <UART_SetConfig+0x1fc>
 800bfaa:	4b67      	ldr	r3, [pc, #412]	@ (800c148 <UART_SetConfig+0x338>)
 800bfac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfae:	f003 0307 	and.w	r3, r3, #7
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d826      	bhi.n	800c004 <UART_SetConfig+0x1f4>
 800bfb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfbc <UART_SetConfig+0x1ac>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800bfd5 	.word	0x0800bfd5
 800bfc0:	0800bfdd 	.word	0x0800bfdd
 800bfc4:	0800bfe5 	.word	0x0800bfe5
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bff5 	.word	0x0800bff5
 800bfd0:	0800bffd 	.word	0x0800bffd
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfda:	e1ec      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bfdc:	2304      	movs	r3, #4
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe2:	e1e8      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfea:	e1e4      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bfec:	2310      	movs	r3, #16
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff2:	e1e0      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bff4:	2320      	movs	r3, #32
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffa:	e1dc      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800bffc:	2340      	movs	r3, #64	@ 0x40
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c002:	e1d8      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c004:	2380      	movs	r3, #128	@ 0x80
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00a:	e1d4      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a4f      	ldr	r2, [pc, #316]	@ (800c150 <UART_SetConfig+0x340>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d130      	bne.n	800c078 <UART_SetConfig+0x268>
 800c016:	4b4c      	ldr	r3, [pc, #304]	@ (800c148 <UART_SetConfig+0x338>)
 800c018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	2b05      	cmp	r3, #5
 800c020:	d826      	bhi.n	800c070 <UART_SetConfig+0x260>
 800c022:	a201      	add	r2, pc, #4	@ (adr r2, 800c028 <UART_SetConfig+0x218>)
 800c024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c028:	0800c041 	.word	0x0800c041
 800c02c:	0800c049 	.word	0x0800c049
 800c030:	0800c051 	.word	0x0800c051
 800c034:	0800c059 	.word	0x0800c059
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c069 	.word	0x0800c069
 800c040:	2300      	movs	r3, #0
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c046:	e1b6      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c048:	2304      	movs	r3, #4
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c04e:	e1b2      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c050:	2308      	movs	r3, #8
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c056:	e1ae      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c058:	2310      	movs	r3, #16
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05e:	e1aa      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c060:	2320      	movs	r3, #32
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c066:	e1a6      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c068:	2340      	movs	r3, #64	@ 0x40
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06e:	e1a2      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c070:	2380      	movs	r3, #128	@ 0x80
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c076:	e19e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a35      	ldr	r2, [pc, #212]	@ (800c154 <UART_SetConfig+0x344>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d130      	bne.n	800c0e4 <UART_SetConfig+0x2d4>
 800c082:	4b31      	ldr	r3, [pc, #196]	@ (800c148 <UART_SetConfig+0x338>)
 800c084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c086:	f003 0307 	and.w	r3, r3, #7
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	d826      	bhi.n	800c0dc <UART_SetConfig+0x2cc>
 800c08e:	a201      	add	r2, pc, #4	@ (adr r2, 800c094 <UART_SetConfig+0x284>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0ad 	.word	0x0800c0ad
 800c098:	0800c0b5 	.word	0x0800c0b5
 800c09c:	0800c0bd 	.word	0x0800c0bd
 800c0a0:	0800c0c5 	.word	0x0800c0c5
 800c0a4:	0800c0cd 	.word	0x0800c0cd
 800c0a8:	0800c0d5 	.word	0x0800c0d5
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0b2:	e180      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0b4:	2304      	movs	r3, #4
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ba:	e17c      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0bc:	2308      	movs	r3, #8
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c2:	e178      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0c4:	2310      	movs	r3, #16
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ca:	e174      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0cc:	2320      	movs	r3, #32
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d2:	e170      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0d4:	2340      	movs	r3, #64	@ 0x40
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0da:	e16c      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0dc:	2380      	movs	r3, #128	@ 0x80
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e2:	e168      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c158 <UART_SetConfig+0x348>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d142      	bne.n	800c174 <UART_SetConfig+0x364>
 800c0ee:	4b16      	ldr	r3, [pc, #88]	@ (800c148 <UART_SetConfig+0x338>)
 800c0f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	2b05      	cmp	r3, #5
 800c0f8:	d838      	bhi.n	800c16c <UART_SetConfig+0x35c>
 800c0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c100 <UART_SetConfig+0x2f0>)
 800c0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c100:	0800c119 	.word	0x0800c119
 800c104:	0800c121 	.word	0x0800c121
 800c108:	0800c129 	.word	0x0800c129
 800c10c:	0800c131 	.word	0x0800c131
 800c110:	0800c15d 	.word	0x0800c15d
 800c114:	0800c165 	.word	0x0800c165
 800c118:	2300      	movs	r3, #0
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11e:	e14a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c120:	2304      	movs	r3, #4
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c126:	e146      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c128:	2308      	movs	r3, #8
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12e:	e142      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c130:	2310      	movs	r3, #16
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c136:	e13e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c138:	cfff69f3 	.word	0xcfff69f3
 800c13c:	58000c00 	.word	0x58000c00
 800c140:	11fff4ff 	.word	0x11fff4ff
 800c144:	40011000 	.word	0x40011000
 800c148:	58024400 	.word	0x58024400
 800c14c:	40004400 	.word	0x40004400
 800c150:	40004800 	.word	0x40004800
 800c154:	40004c00 	.word	0x40004c00
 800c158:	40005000 	.word	0x40005000
 800c15c:	2320      	movs	r3, #32
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c162:	e128      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c164:	2340      	movs	r3, #64	@ 0x40
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16a:	e124      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c16c:	2380      	movs	r3, #128	@ 0x80
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c172:	e120      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4acb      	ldr	r2, [pc, #812]	@ (800c4a8 <UART_SetConfig+0x698>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d176      	bne.n	800c26c <UART_SetConfig+0x45c>
 800c17e:	4bcb      	ldr	r3, [pc, #812]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c186:	2b28      	cmp	r3, #40	@ 0x28
 800c188:	d86c      	bhi.n	800c264 <UART_SetConfig+0x454>
 800c18a:	a201      	add	r2, pc, #4	@ (adr r2, 800c190 <UART_SetConfig+0x380>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c235 	.word	0x0800c235
 800c194:	0800c265 	.word	0x0800c265
 800c198:	0800c265 	.word	0x0800c265
 800c19c:	0800c265 	.word	0x0800c265
 800c1a0:	0800c265 	.word	0x0800c265
 800c1a4:	0800c265 	.word	0x0800c265
 800c1a8:	0800c265 	.word	0x0800c265
 800c1ac:	0800c265 	.word	0x0800c265
 800c1b0:	0800c23d 	.word	0x0800c23d
 800c1b4:	0800c265 	.word	0x0800c265
 800c1b8:	0800c265 	.word	0x0800c265
 800c1bc:	0800c265 	.word	0x0800c265
 800c1c0:	0800c265 	.word	0x0800c265
 800c1c4:	0800c265 	.word	0x0800c265
 800c1c8:	0800c265 	.word	0x0800c265
 800c1cc:	0800c265 	.word	0x0800c265
 800c1d0:	0800c245 	.word	0x0800c245
 800c1d4:	0800c265 	.word	0x0800c265
 800c1d8:	0800c265 	.word	0x0800c265
 800c1dc:	0800c265 	.word	0x0800c265
 800c1e0:	0800c265 	.word	0x0800c265
 800c1e4:	0800c265 	.word	0x0800c265
 800c1e8:	0800c265 	.word	0x0800c265
 800c1ec:	0800c265 	.word	0x0800c265
 800c1f0:	0800c24d 	.word	0x0800c24d
 800c1f4:	0800c265 	.word	0x0800c265
 800c1f8:	0800c265 	.word	0x0800c265
 800c1fc:	0800c265 	.word	0x0800c265
 800c200:	0800c265 	.word	0x0800c265
 800c204:	0800c265 	.word	0x0800c265
 800c208:	0800c265 	.word	0x0800c265
 800c20c:	0800c265 	.word	0x0800c265
 800c210:	0800c255 	.word	0x0800c255
 800c214:	0800c265 	.word	0x0800c265
 800c218:	0800c265 	.word	0x0800c265
 800c21c:	0800c265 	.word	0x0800c265
 800c220:	0800c265 	.word	0x0800c265
 800c224:	0800c265 	.word	0x0800c265
 800c228:	0800c265 	.word	0x0800c265
 800c22c:	0800c265 	.word	0x0800c265
 800c230:	0800c25d 	.word	0x0800c25d
 800c234:	2301      	movs	r3, #1
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23a:	e0bc      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c23c:	2304      	movs	r3, #4
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c242:	e0b8      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c244:	2308      	movs	r3, #8
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24a:	e0b4      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c24c:	2310      	movs	r3, #16
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c252:	e0b0      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c254:	2320      	movs	r3, #32
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25a:	e0ac      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c25c:	2340      	movs	r3, #64	@ 0x40
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c262:	e0a8      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c264:	2380      	movs	r3, #128	@ 0x80
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26a:	e0a4      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a8f      	ldr	r2, [pc, #572]	@ (800c4b0 <UART_SetConfig+0x6a0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d130      	bne.n	800c2d8 <UART_SetConfig+0x4c8>
 800c276:	4b8d      	ldr	r3, [pc, #564]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	2b05      	cmp	r3, #5
 800c280:	d826      	bhi.n	800c2d0 <UART_SetConfig+0x4c0>
 800c282:	a201      	add	r2, pc, #4	@ (adr r2, 800c288 <UART_SetConfig+0x478>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c2a1 	.word	0x0800c2a1
 800c28c:	0800c2a9 	.word	0x0800c2a9
 800c290:	0800c2b1 	.word	0x0800c2b1
 800c294:	0800c2b9 	.word	0x0800c2b9
 800c298:	0800c2c1 	.word	0x0800c2c1
 800c29c:	0800c2c9 	.word	0x0800c2c9
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a6:	e086      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2a8:	2304      	movs	r3, #4
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ae:	e082      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2b0:	2308      	movs	r3, #8
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b6:	e07e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2be:	e07a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c6:	e076      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2c8:	2340      	movs	r3, #64	@ 0x40
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ce:	e072      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2d0:	2380      	movs	r3, #128	@ 0x80
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d6:	e06e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a75      	ldr	r2, [pc, #468]	@ (800c4b4 <UART_SetConfig+0x6a4>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d130      	bne.n	800c344 <UART_SetConfig+0x534>
 800c2e2:	4b72      	ldr	r3, [pc, #456]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	2b05      	cmp	r3, #5
 800c2ec:	d826      	bhi.n	800c33c <UART_SetConfig+0x52c>
 800c2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f4 <UART_SetConfig+0x4e4>)
 800c2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f4:	0800c30d 	.word	0x0800c30d
 800c2f8:	0800c315 	.word	0x0800c315
 800c2fc:	0800c31d 	.word	0x0800c31d
 800c300:	0800c325 	.word	0x0800c325
 800c304:	0800c32d 	.word	0x0800c32d
 800c308:	0800c335 	.word	0x0800c335
 800c30c:	2300      	movs	r3, #0
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c312:	e050      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c314:	2304      	movs	r3, #4
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31a:	e04c      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c31c:	2308      	movs	r3, #8
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c322:	e048      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c324:	2310      	movs	r3, #16
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32a:	e044      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c32c:	2320      	movs	r3, #32
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c332:	e040      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c334:	2340      	movs	r3, #64	@ 0x40
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33a:	e03c      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c33c:	2380      	movs	r3, #128	@ 0x80
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c342:	e038      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a5b      	ldr	r2, [pc, #364]	@ (800c4b8 <UART_SetConfig+0x6a8>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d130      	bne.n	800c3b0 <UART_SetConfig+0x5a0>
 800c34e:	4b57      	ldr	r3, [pc, #348]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c352:	f003 0307 	and.w	r3, r3, #7
 800c356:	2b05      	cmp	r3, #5
 800c358:	d826      	bhi.n	800c3a8 <UART_SetConfig+0x598>
 800c35a:	a201      	add	r2, pc, #4	@ (adr r2, 800c360 <UART_SetConfig+0x550>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c379 	.word	0x0800c379
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c389 	.word	0x0800c389
 800c36c:	0800c391 	.word	0x0800c391
 800c370:	0800c399 	.word	0x0800c399
 800c374:	0800c3a1 	.word	0x0800c3a1
 800c378:	2302      	movs	r3, #2
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37e:	e01a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c380:	2304      	movs	r3, #4
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c386:	e016      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c388:	2308      	movs	r3, #8
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38e:	e012      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c390:	2310      	movs	r3, #16
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c396:	e00e      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c398:	2320      	movs	r3, #32
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39e:	e00a      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c3a0:	2340      	movs	r3, #64	@ 0x40
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a6:	e006      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c3a8:	2380      	movs	r3, #128	@ 0x80
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ae:	e002      	b.n	800c3b6 <UART_SetConfig+0x5a6>
 800c3b0:	2380      	movs	r3, #128	@ 0x80
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c4b8 <UART_SetConfig+0x6a8>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	f040 80f8 	bne.w	800c5b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	2b20      	cmp	r3, #32
 800c3c8:	dc46      	bgt.n	800c458 <UART_SetConfig+0x648>
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	f2c0 8082 	blt.w	800c4d4 <UART_SetConfig+0x6c4>
 800c3d0:	3b02      	subs	r3, #2
 800c3d2:	2b1e      	cmp	r3, #30
 800c3d4:	d87e      	bhi.n	800c4d4 <UART_SetConfig+0x6c4>
 800c3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3dc <UART_SetConfig+0x5cc>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c45f 	.word	0x0800c45f
 800c3e0:	0800c4d5 	.word	0x0800c4d5
 800c3e4:	0800c467 	.word	0x0800c467
 800c3e8:	0800c4d5 	.word	0x0800c4d5
 800c3ec:	0800c4d5 	.word	0x0800c4d5
 800c3f0:	0800c4d5 	.word	0x0800c4d5
 800c3f4:	0800c477 	.word	0x0800c477
 800c3f8:	0800c4d5 	.word	0x0800c4d5
 800c3fc:	0800c4d5 	.word	0x0800c4d5
 800c400:	0800c4d5 	.word	0x0800c4d5
 800c404:	0800c4d5 	.word	0x0800c4d5
 800c408:	0800c4d5 	.word	0x0800c4d5
 800c40c:	0800c4d5 	.word	0x0800c4d5
 800c410:	0800c4d5 	.word	0x0800c4d5
 800c414:	0800c487 	.word	0x0800c487
 800c418:	0800c4d5 	.word	0x0800c4d5
 800c41c:	0800c4d5 	.word	0x0800c4d5
 800c420:	0800c4d5 	.word	0x0800c4d5
 800c424:	0800c4d5 	.word	0x0800c4d5
 800c428:	0800c4d5 	.word	0x0800c4d5
 800c42c:	0800c4d5 	.word	0x0800c4d5
 800c430:	0800c4d5 	.word	0x0800c4d5
 800c434:	0800c4d5 	.word	0x0800c4d5
 800c438:	0800c4d5 	.word	0x0800c4d5
 800c43c:	0800c4d5 	.word	0x0800c4d5
 800c440:	0800c4d5 	.word	0x0800c4d5
 800c444:	0800c4d5 	.word	0x0800c4d5
 800c448:	0800c4d5 	.word	0x0800c4d5
 800c44c:	0800c4d5 	.word	0x0800c4d5
 800c450:	0800c4d5 	.word	0x0800c4d5
 800c454:	0800c4c7 	.word	0x0800c4c7
 800c458:	2b40      	cmp	r3, #64	@ 0x40
 800c45a:	d037      	beq.n	800c4cc <UART_SetConfig+0x6bc>
 800c45c:	e03a      	b.n	800c4d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c45e:	f7fe f90d 	bl	800a67c <HAL_RCCEx_GetD3PCLK1Freq>
 800c462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c464:	e03c      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe f91c 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c474:	e034      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c476:	f107 0318 	add.w	r3, r7, #24
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe fa68 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c484:	e02c      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c486:	4b09      	ldr	r3, [pc, #36]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0320 	and.w	r3, r3, #32
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d016      	beq.n	800c4c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c492:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <UART_SetConfig+0x69c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	f003 0303 	and.w	r3, r3, #3
 800c49c:	4a07      	ldr	r2, [pc, #28]	@ (800c4bc <UART_SetConfig+0x6ac>)
 800c49e:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4a4:	e01c      	b.n	800c4e0 <UART_SetConfig+0x6d0>
 800c4a6:	bf00      	nop
 800c4a8:	40011400 	.word	0x40011400
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	40007800 	.word	0x40007800
 800c4b4:	40007c00 	.word	0x40007c00
 800c4b8:	58000c00 	.word	0x58000c00
 800c4bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c4c0:	4b9d      	ldr	r3, [pc, #628]	@ (800c738 <UART_SetConfig+0x928>)
 800c4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4c4:	e00c      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4c6:	4b9d      	ldr	r3, [pc, #628]	@ (800c73c <UART_SetConfig+0x92c>)
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ca:	e009      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4d2:	e005      	b.n	800c4e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c4de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 81de 	beq.w	800c8a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ec:	4a94      	ldr	r2, [pc, #592]	@ (800c740 <UART_SetConfig+0x930>)
 800c4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	4613      	mov	r3, r2
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	4413      	add	r3, r2
 800c506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c508:	429a      	cmp	r2, r3
 800c50a:	d305      	bcc.n	800c518 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c514:	429a      	cmp	r2, r3
 800c516:	d903      	bls.n	800c520 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c51e:	e1c1      	b.n	800c8a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c522:	2200      	movs	r2, #0
 800c524:	60bb      	str	r3, [r7, #8]
 800c526:	60fa      	str	r2, [r7, #12]
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c52c:	4a84      	ldr	r2, [pc, #528]	@ (800c740 <UART_SetConfig+0x930>)
 800c52e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c532:	b29b      	uxth	r3, r3
 800c534:	2200      	movs	r2, #0
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	607a      	str	r2, [r7, #4]
 800c53a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c53e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c542:	f7f3 ff25 	bl	8000390 <__aeabi_uldivmod>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4610      	mov	r0, r2
 800c54c:	4619      	mov	r1, r3
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	020b      	lsls	r3, r1, #8
 800c558:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c55c:	0202      	lsls	r2, r0, #8
 800c55e:	6979      	ldr	r1, [r7, #20]
 800c560:	6849      	ldr	r1, [r1, #4]
 800c562:	0849      	lsrs	r1, r1, #1
 800c564:	2000      	movs	r0, #0
 800c566:	460c      	mov	r4, r1
 800c568:	4605      	mov	r5, r0
 800c56a:	eb12 0804 	adds.w	r8, r2, r4
 800c56e:	eb43 0905 	adc.w	r9, r3, r5
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	469a      	mov	sl, r3
 800c57a:	4693      	mov	fp, r2
 800c57c:	4652      	mov	r2, sl
 800c57e:	465b      	mov	r3, fp
 800c580:	4640      	mov	r0, r8
 800c582:	4649      	mov	r1, r9
 800c584:	f7f3 ff04 	bl	8000390 <__aeabi_uldivmod>
 800c588:	4602      	mov	r2, r0
 800c58a:	460b      	mov	r3, r1
 800c58c:	4613      	mov	r3, r2
 800c58e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c596:	d308      	bcc.n	800c5aa <UART_SetConfig+0x79a>
 800c598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c59e:	d204      	bcs.n	800c5aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5a6:	60da      	str	r2, [r3, #12]
 800c5a8:	e17c      	b.n	800c8a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c5b0:	e178      	b.n	800c8a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5ba:	f040 80c5 	bne.w	800c748 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c5be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5c2:	2b20      	cmp	r3, #32
 800c5c4:	dc48      	bgt.n	800c658 <UART_SetConfig+0x848>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	db7b      	blt.n	800c6c2 <UART_SetConfig+0x8b2>
 800c5ca:	2b20      	cmp	r3, #32
 800c5cc:	d879      	bhi.n	800c6c2 <UART_SetConfig+0x8b2>
 800c5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d4 <UART_SetConfig+0x7c4>)
 800c5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d4:	0800c65f 	.word	0x0800c65f
 800c5d8:	0800c667 	.word	0x0800c667
 800c5dc:	0800c6c3 	.word	0x0800c6c3
 800c5e0:	0800c6c3 	.word	0x0800c6c3
 800c5e4:	0800c66f 	.word	0x0800c66f
 800c5e8:	0800c6c3 	.word	0x0800c6c3
 800c5ec:	0800c6c3 	.word	0x0800c6c3
 800c5f0:	0800c6c3 	.word	0x0800c6c3
 800c5f4:	0800c67f 	.word	0x0800c67f
 800c5f8:	0800c6c3 	.word	0x0800c6c3
 800c5fc:	0800c6c3 	.word	0x0800c6c3
 800c600:	0800c6c3 	.word	0x0800c6c3
 800c604:	0800c6c3 	.word	0x0800c6c3
 800c608:	0800c6c3 	.word	0x0800c6c3
 800c60c:	0800c6c3 	.word	0x0800c6c3
 800c610:	0800c6c3 	.word	0x0800c6c3
 800c614:	0800c68f 	.word	0x0800c68f
 800c618:	0800c6c3 	.word	0x0800c6c3
 800c61c:	0800c6c3 	.word	0x0800c6c3
 800c620:	0800c6c3 	.word	0x0800c6c3
 800c624:	0800c6c3 	.word	0x0800c6c3
 800c628:	0800c6c3 	.word	0x0800c6c3
 800c62c:	0800c6c3 	.word	0x0800c6c3
 800c630:	0800c6c3 	.word	0x0800c6c3
 800c634:	0800c6c3 	.word	0x0800c6c3
 800c638:	0800c6c3 	.word	0x0800c6c3
 800c63c:	0800c6c3 	.word	0x0800c6c3
 800c640:	0800c6c3 	.word	0x0800c6c3
 800c644:	0800c6c3 	.word	0x0800c6c3
 800c648:	0800c6c3 	.word	0x0800c6c3
 800c64c:	0800c6c3 	.word	0x0800c6c3
 800c650:	0800c6c3 	.word	0x0800c6c3
 800c654:	0800c6b5 	.word	0x0800c6b5
 800c658:	2b40      	cmp	r3, #64	@ 0x40
 800c65a:	d02e      	beq.n	800c6ba <UART_SetConfig+0x8aa>
 800c65c:	e031      	b.n	800c6c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c65e:	f7fc f857 	bl	8008710 <HAL_RCC_GetPCLK1Freq>
 800c662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c664:	e033      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c666:	f7fc f869 	bl	800873c <HAL_RCC_GetPCLK2Freq>
 800c66a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c66c:	e02f      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c66e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe f818 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c67c:	e027      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67e:	f107 0318 	add.w	r3, r7, #24
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe f964 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c68c:	e01f      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c68e:	4b2d      	ldr	r3, [pc, #180]	@ (800c744 <UART_SetConfig+0x934>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 0320 	and.w	r3, r3, #32
 800c696:	2b00      	cmp	r3, #0
 800c698:	d009      	beq.n	800c6ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c69a:	4b2a      	ldr	r3, [pc, #168]	@ (800c744 <UART_SetConfig+0x934>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	08db      	lsrs	r3, r3, #3
 800c6a0:	f003 0303 	and.w	r3, r3, #3
 800c6a4:	4a24      	ldr	r2, [pc, #144]	@ (800c738 <UART_SetConfig+0x928>)
 800c6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6ac:	e00f      	b.n	800c6ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6ae:	4b22      	ldr	r3, [pc, #136]	@ (800c738 <UART_SetConfig+0x928>)
 800c6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b2:	e00c      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6b4:	4b21      	ldr	r3, [pc, #132]	@ (800c73c <UART_SetConfig+0x92c>)
 800c6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b8:	e009      	b.n	800c6ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6c0:	e005      	b.n	800c6ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c6cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 80e7 	beq.w	800c8a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6da:	4a19      	ldr	r2, [pc, #100]	@ (800c740 <UART_SetConfig+0x930>)
 800c6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6e8:	005a      	lsls	r2, r3, #1
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	085b      	lsrs	r3, r3, #1
 800c6f0:	441a      	add	r2, r3
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fe:	2b0f      	cmp	r3, #15
 800c700:	d916      	bls.n	800c730 <UART_SetConfig+0x920>
 800c702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c708:	d212      	bcs.n	800c730 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	f023 030f 	bic.w	r3, r3, #15
 800c712:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c716:	085b      	lsrs	r3, r3, #1
 800c718:	b29b      	uxth	r3, r3
 800c71a:	f003 0307 	and.w	r3, r3, #7
 800c71e:	b29a      	uxth	r2, r3
 800c720:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c722:	4313      	orrs	r3, r2
 800c724:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c72c:	60da      	str	r2, [r3, #12]
 800c72e:	e0b9      	b.n	800c8a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c736:	e0b5      	b.n	800c8a4 <UART_SetConfig+0xa94>
 800c738:	03d09000 	.word	0x03d09000
 800c73c:	003d0900 	.word	0x003d0900
 800c740:	0800ebbc 	.word	0x0800ebbc
 800c744:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c748:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c74c:	2b20      	cmp	r3, #32
 800c74e:	dc49      	bgt.n	800c7e4 <UART_SetConfig+0x9d4>
 800c750:	2b00      	cmp	r3, #0
 800c752:	db7c      	blt.n	800c84e <UART_SetConfig+0xa3e>
 800c754:	2b20      	cmp	r3, #32
 800c756:	d87a      	bhi.n	800c84e <UART_SetConfig+0xa3e>
 800c758:	a201      	add	r2, pc, #4	@ (adr r2, 800c760 <UART_SetConfig+0x950>)
 800c75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75e:	bf00      	nop
 800c760:	0800c7eb 	.word	0x0800c7eb
 800c764:	0800c7f3 	.word	0x0800c7f3
 800c768:	0800c84f 	.word	0x0800c84f
 800c76c:	0800c84f 	.word	0x0800c84f
 800c770:	0800c7fb 	.word	0x0800c7fb
 800c774:	0800c84f 	.word	0x0800c84f
 800c778:	0800c84f 	.word	0x0800c84f
 800c77c:	0800c84f 	.word	0x0800c84f
 800c780:	0800c80b 	.word	0x0800c80b
 800c784:	0800c84f 	.word	0x0800c84f
 800c788:	0800c84f 	.word	0x0800c84f
 800c78c:	0800c84f 	.word	0x0800c84f
 800c790:	0800c84f 	.word	0x0800c84f
 800c794:	0800c84f 	.word	0x0800c84f
 800c798:	0800c84f 	.word	0x0800c84f
 800c79c:	0800c84f 	.word	0x0800c84f
 800c7a0:	0800c81b 	.word	0x0800c81b
 800c7a4:	0800c84f 	.word	0x0800c84f
 800c7a8:	0800c84f 	.word	0x0800c84f
 800c7ac:	0800c84f 	.word	0x0800c84f
 800c7b0:	0800c84f 	.word	0x0800c84f
 800c7b4:	0800c84f 	.word	0x0800c84f
 800c7b8:	0800c84f 	.word	0x0800c84f
 800c7bc:	0800c84f 	.word	0x0800c84f
 800c7c0:	0800c84f 	.word	0x0800c84f
 800c7c4:	0800c84f 	.word	0x0800c84f
 800c7c8:	0800c84f 	.word	0x0800c84f
 800c7cc:	0800c84f 	.word	0x0800c84f
 800c7d0:	0800c84f 	.word	0x0800c84f
 800c7d4:	0800c84f 	.word	0x0800c84f
 800c7d8:	0800c84f 	.word	0x0800c84f
 800c7dc:	0800c84f 	.word	0x0800c84f
 800c7e0:	0800c841 	.word	0x0800c841
 800c7e4:	2b40      	cmp	r3, #64	@ 0x40
 800c7e6:	d02e      	beq.n	800c846 <UART_SetConfig+0xa36>
 800c7e8:	e031      	b.n	800c84e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7ea:	f7fb ff91 	bl	8008710 <HAL_RCC_GetPCLK1Freq>
 800c7ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7f0:	e033      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7f2:	f7fb ffa3 	bl	800873c <HAL_RCC_GetPCLK2Freq>
 800c7f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7f8:	e02f      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fd ff52 	bl	800a6a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c808:	e027      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80a:	f107 0318 	add.w	r3, r7, #24
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fe f89e 	bl	800a950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c818:	e01f      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c81a:	4b2d      	ldr	r3, [pc, #180]	@ (800c8d0 <UART_SetConfig+0xac0>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c826:	4b2a      	ldr	r3, [pc, #168]	@ (800c8d0 <UART_SetConfig+0xac0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	08db      	lsrs	r3, r3, #3
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	4a28      	ldr	r2, [pc, #160]	@ (800c8d4 <UART_SetConfig+0xac4>)
 800c832:	fa22 f303 	lsr.w	r3, r2, r3
 800c836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c838:	e00f      	b.n	800c85a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c83a:	4b26      	ldr	r3, [pc, #152]	@ (800c8d4 <UART_SetConfig+0xac4>)
 800c83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c83e:	e00c      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c840:	4b25      	ldr	r3, [pc, #148]	@ (800c8d8 <UART_SetConfig+0xac8>)
 800c842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c844:	e009      	b.n	800c85a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84c:	e005      	b.n	800c85a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c858:	bf00      	nop
    }

    if (pclk != 0U)
 800c85a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d021      	beq.n	800c8a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c864:	4a1d      	ldr	r2, [pc, #116]	@ (800c8dc <UART_SetConfig+0xacc>)
 800c866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c86a:	461a      	mov	r2, r3
 800c86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c86e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	085b      	lsrs	r3, r3, #1
 800c878:	441a      	add	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c882:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	2b0f      	cmp	r3, #15
 800c888:	d909      	bls.n	800c89e <UART_SetConfig+0xa8e>
 800c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c890:	d205      	bcs.n	800c89e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c894:	b29a      	uxth	r2, r3
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	60da      	str	r2, [r3, #12]
 800c89c:	e002      	b.n	800c8a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c8c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3748      	adds	r7, #72	@ 0x48
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8ce:	bf00      	nop
 800c8d0:	58024400 	.word	0x58024400
 800c8d4:	03d09000 	.word	0x03d09000
 800c8d8:	003d0900 	.word	0x003d0900
 800c8dc:	0800ebbc 	.word	0x0800ebbc

0800c8e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ec:	f003 0308 	and.w	r3, r3, #8
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00a      	beq.n	800c90a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	430a      	orrs	r2, r1
 800c908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c90e:	f003 0301 	and.w	r3, r3, #1
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	430a      	orrs	r2, r1
 800c92a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c952:	f003 0304 	and.w	r3, r3, #4
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c974:	f003 0310 	and.w	r3, r3, #16
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c996:	f003 0320 	and.w	r3, r3, #32
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00a      	beq.n	800c9b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01a      	beq.n	800c9f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9de:	d10a      	bne.n	800c9f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	430a      	orrs	r2, r1
 800c9f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00a      	beq.n	800ca18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	430a      	orrs	r2, r1
 800ca16:	605a      	str	r2, [r3, #4]
  }
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b098      	sub	sp, #96	@ 0x60
 800ca28:	af02      	add	r7, sp, #8
 800ca2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca34:	f7f7 f8a8 	bl	8003b88 <HAL_GetTick>
 800ca38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0308 	and.w	r3, r3, #8
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	d12f      	bne.n	800caa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca50:	2200      	movs	r2, #0
 800ca52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f88e 	bl	800cb78 <UART_WaitOnFlagUntilTimeout>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d022      	beq.n	800caa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6a:	e853 3f00 	ldrex	r3, [r3]
 800ca6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca76:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca88:	e841 2300 	strex	r3, r2, [r1]
 800ca8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1e6      	bne.n	800ca62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2220      	movs	r2, #32
 800ca98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e063      	b.n	800cb70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	2b04      	cmp	r3, #4
 800cab4:	d149      	bne.n	800cb4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cabe:	2200      	movs	r2, #0
 800cac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f857 	bl	800cb78 <UART_WaitOnFlagUntilTimeout>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d03c      	beq.n	800cb4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	623b      	str	r3, [r7, #32]
   return(result);
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caee:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caf6:	e841 2300 	strex	r3, r2, [r1]
 800cafa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1e6      	bne.n	800cad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3308      	adds	r3, #8
 800cb08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f023 0301 	bic.w	r3, r3, #1
 800cb18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb22:	61fa      	str	r2, [r7, #28]
 800cb24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	69b9      	ldr	r1, [r7, #24]
 800cb28:	69fa      	ldr	r2, [r7, #28]
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	617b      	str	r3, [r7, #20]
   return(result);
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e5      	bne.n	800cb02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e012      	b.n	800cb70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2220      	movs	r2, #32
 800cb56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3758      	adds	r7, #88	@ 0x58
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	4613      	mov	r3, r2
 800cb86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb88:	e04f      	b.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb90:	d04b      	beq.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb92:	f7f6 fff9 	bl	8003b88 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	69ba      	ldr	r2, [r7, #24]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d302      	bcc.n	800cba8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e04e      	b.n	800cc4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 0304 	and.w	r3, r3, #4
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d037      	beq.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2b80      	cmp	r3, #128	@ 0x80
 800cbbe:	d034      	beq.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b40      	cmp	r3, #64	@ 0x40
 800cbc4:	d031      	beq.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69db      	ldr	r3, [r3, #28]
 800cbcc:	f003 0308 	and.w	r3, r3, #8
 800cbd0:	2b08      	cmp	r3, #8
 800cbd2:	d110      	bne.n	800cbf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2208      	movs	r2, #8
 800cbda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f839 	bl	800cc54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2208      	movs	r2, #8
 800cbe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e029      	b.n	800cc4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc04:	d111      	bne.n	800cc2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 f81f 	bl	800cc54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2220      	movs	r2, #32
 800cc1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e00f      	b.n	800cc4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	69da      	ldr	r2, [r3, #28]
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	4013      	ands	r3, r2
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	bf0c      	ite	eq
 800cc3a:	2301      	moveq	r3, #1
 800cc3c:	2300      	movne	r3, #0
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	461a      	mov	r2, r3
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d0a0      	beq.n	800cb8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b095      	sub	sp, #84	@ 0x54
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc64:	e853 3f00 	ldrex	r3, [r3]
 800cc68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	461a      	mov	r2, r3
 800cc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc82:	e841 2300 	strex	r3, r2, [r1]
 800cc86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1e6      	bne.n	800cc5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3308      	adds	r3, #8
 800cc94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	e853 3f00 	ldrex	r3, [r3]
 800cc9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc9e:	69fa      	ldr	r2, [r7, #28]
 800cca0:	4b1e      	ldr	r3, [pc, #120]	@ (800cd1c <UART_EndRxTransfer+0xc8>)
 800cca2:	4013      	ands	r3, r2
 800cca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3308      	adds	r3, #8
 800ccac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb6:	e841 2300 	strex	r3, r2, [r1]
 800ccba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e5      	bne.n	800cc8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d118      	bne.n	800ccfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	e853 3f00 	ldrex	r3, [r3]
 800ccd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f023 0310 	bic.w	r3, r3, #16
 800ccde:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e6      	bne.n	800ccca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd10:	bf00      	nop
 800cd12:	3754      	adds	r7, #84	@ 0x54
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	effffffe 	.word	0xeffffffe

0800cd20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d101      	bne.n	800cd36 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd32:	2302      	movs	r3, #2
 800cd34:	e027      	b.n	800cd86 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2224      	movs	r2, #36	@ 0x24
 800cd42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f022 0201 	bic.w	r2, r2, #1
 800cd5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2220      	movs	r2, #32
 800cd78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d101      	bne.n	800cdaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cda6:	2302      	movs	r3, #2
 800cda8:	e02d      	b.n	800ce06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2224      	movs	r2, #36	@ 0x24
 800cdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 0201 	bic.w	r2, r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 f850 	bl	800ce8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2220      	movs	r2, #32
 800cdf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce22:	2302      	movs	r3, #2
 800ce24:	e02d      	b.n	800ce82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2224      	movs	r2, #36	@ 0x24
 800ce32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f022 0201 	bic.w	r2, r2, #1
 800ce4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f812 	bl	800ce8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2220      	movs	r2, #32
 800ce74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d108      	bne.n	800ceae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ceac:	e031      	b.n	800cf12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ceae:	2310      	movs	r3, #16
 800ceb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ceb2:	2310      	movs	r3, #16
 800ceb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	0e5b      	lsrs	r3, r3, #25
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	f003 0307 	and.w	r3, r3, #7
 800cec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	689b      	ldr	r3, [r3, #8]
 800cecc:	0f5b      	lsrs	r3, r3, #29
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	f003 0307 	and.w	r3, r3, #7
 800ced4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	7b3a      	ldrb	r2, [r7, #12]
 800ceda:	4911      	ldr	r1, [pc, #68]	@ (800cf20 <UARTEx_SetNbDataToProcess+0x94>)
 800cedc:	5c8a      	ldrb	r2, [r1, r2]
 800cede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cee2:	7b3a      	ldrb	r2, [r7, #12]
 800cee4:	490f      	ldr	r1, [pc, #60]	@ (800cf24 <UARTEx_SetNbDataToProcess+0x98>)
 800cee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cee8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	7b7a      	ldrb	r2, [r7, #13]
 800cef8:	4909      	ldr	r1, [pc, #36]	@ (800cf20 <UARTEx_SetNbDataToProcess+0x94>)
 800cefa:	5c8a      	ldrb	r2, [r1, r2]
 800cefc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf00:	7b7a      	ldrb	r2, [r7, #13]
 800cf02:	4908      	ldr	r1, [pc, #32]	@ (800cf24 <UARTEx_SetNbDataToProcess+0x98>)
 800cf04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf06:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf12:	bf00      	nop
 800cf14:	3714      	adds	r7, #20
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	0800ebd4 	.word	0x0800ebd4
 800cf24:	0800ebdc 	.word	0x0800ebdc

0800cf28 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d121      	bne.n	800cf7e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4b27      	ldr	r3, [pc, #156]	@ (800cfdc <FMC_SDRAM_Init+0xb4>)
 800cf40:	4013      	ands	r3, r2
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	6851      	ldr	r1, [r2, #4]
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	6892      	ldr	r2, [r2, #8]
 800cf4a:	4311      	orrs	r1, r2
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	68d2      	ldr	r2, [r2, #12]
 800cf50:	4311      	orrs	r1, r2
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	6912      	ldr	r2, [r2, #16]
 800cf56:	4311      	orrs	r1, r2
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	6952      	ldr	r2, [r2, #20]
 800cf5c:	4311      	orrs	r1, r2
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	6992      	ldr	r2, [r2, #24]
 800cf62:	4311      	orrs	r1, r2
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	69d2      	ldr	r2, [r2, #28]
 800cf68:	4311      	orrs	r1, r2
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	6a12      	ldr	r2, [r2, #32]
 800cf6e:	4311      	orrs	r1, r2
 800cf70:	683a      	ldr	r2, [r7, #0]
 800cf72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cf74:	430a      	orrs	r2, r1
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	e026      	b.n	800cfcc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	69d9      	ldr	r1, [r3, #28]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	4319      	orrs	r1, r3
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf94:	430b      	orrs	r3, r1
 800cf96:	431a      	orrs	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	@ (800cfdc <FMC_SDRAM_Init+0xb4>)
 800cfa2:	4013      	ands	r3, r2
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	6851      	ldr	r1, [r2, #4]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	6892      	ldr	r2, [r2, #8]
 800cfac:	4311      	orrs	r1, r2
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	68d2      	ldr	r2, [r2, #12]
 800cfb2:	4311      	orrs	r1, r2
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	6912      	ldr	r2, [r2, #16]
 800cfb8:	4311      	orrs	r1, r2
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	6952      	ldr	r2, [r2, #20]
 800cfbe:	4311      	orrs	r1, r2
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	6992      	ldr	r2, [r2, #24]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	370c      	adds	r7, #12
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	ffff8000 	.word	0xffff8000

0800cfe0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d128      	bne.n	800d044 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	1e59      	subs	r1, r3, #1
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	3b01      	subs	r3, #1
 800d006:	011b      	lsls	r3, r3, #4
 800d008:	4319      	orrs	r1, r3
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	3b01      	subs	r3, #1
 800d010:	021b      	lsls	r3, r3, #8
 800d012:	4319      	orrs	r1, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	3b01      	subs	r3, #1
 800d01a:	031b      	lsls	r3, r3, #12
 800d01c:	4319      	orrs	r1, r3
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	3b01      	subs	r3, #1
 800d024:	041b      	lsls	r3, r3, #16
 800d026:	4319      	orrs	r1, r3
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	051b      	lsls	r3, r3, #20
 800d030:	4319      	orrs	r1, r3
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	3b01      	subs	r3, #1
 800d038:	061b      	lsls	r3, r3, #24
 800d03a:	430b      	orrs	r3, r1
 800d03c:	431a      	orrs	r2, r3
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	609a      	str	r2, [r3, #8]
 800d042:	e02d      	b.n	800d0a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	4b19      	ldr	r3, [pc, #100]	@ (800d0b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800d04a:	4013      	ands	r3, r2
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	68d2      	ldr	r2, [r2, #12]
 800d050:	3a01      	subs	r2, #1
 800d052:	0311      	lsls	r1, r2, #12
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	6952      	ldr	r2, [r2, #20]
 800d058:	3a01      	subs	r2, #1
 800d05a:	0512      	lsls	r2, r2, #20
 800d05c:	430a      	orrs	r2, r1
 800d05e:	431a      	orrs	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	1e59      	subs	r1, r3, #1
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	3b01      	subs	r3, #1
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	4319      	orrs	r1, r3
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	3b01      	subs	r3, #1
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	4319      	orrs	r1, r3
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	3b01      	subs	r3, #1
 800d08c:	041b      	lsls	r3, r3, #16
 800d08e:	4319      	orrs	r1, r3
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	3b01      	subs	r3, #1
 800d096:	061b      	lsls	r3, r3, #24
 800d098:	430b      	orrs	r3, r1
 800d09a:	431a      	orrs	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	ff0f0fff 	.word	0xff0f0fff

0800d0b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	f107 001c 	add.w	r0, r7, #28
 800d0c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d121      	bne.n	800d112 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68da      	ldr	r2, [r3, #12]
 800d0de:	4b2c      	ldr	r3, [pc, #176]	@ (800d190 <USB_CoreInit+0xdc>)
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d0f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d105      	bne.n	800d106 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 faaa 	bl	800d660 <USB_CoreReset>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	e01b      	b.n	800d14a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fa9e 	bl	800d660 <USB_CoreReset>
 800d124:	4603      	mov	r3, r0
 800d126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d128:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d106      	bne.n	800d13e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d134:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d13c:	e005      	b.n	800d14a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d142:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d14a:	7fbb      	ldrb	r3, [r7, #30]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d116      	bne.n	800d17e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d154:	b29a      	uxth	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d15e:	4b0d      	ldr	r3, [pc, #52]	@ (800d194 <USB_CoreInit+0xe0>)
 800d160:	4313      	orrs	r3, r2
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f043 0206 	orr.w	r2, r3, #6
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f043 0220 	orr.w	r2, r3, #32
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d18a:	b004      	add	sp, #16
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	ffbdffbf 	.word	0xffbdffbf
 800d194:	03ee0000 	.word	0x03ee0000

0800d198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	689b      	ldr	r3, [r3, #8]
 800d1a4:	f023 0201 	bic.w	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b084      	sub	sp, #16
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d115      	bne.n	800d208 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d1e8:	200a      	movs	r0, #10
 800d1ea:	f7f6 fcd9 	bl	8003ba0 <HAL_Delay>
      ms += 10U;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	330a      	adds	r3, #10
 800d1f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa25 	bl	800d644 <USB_GetMode>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d01e      	beq.n	800d23e <USB_SetCurrentMode+0x84>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2bc7      	cmp	r3, #199	@ 0xc7
 800d204:	d9f0      	bls.n	800d1e8 <USB_SetCurrentMode+0x2e>
 800d206:	e01a      	b.n	800d23e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d115      	bne.n	800d23a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d21a:	200a      	movs	r0, #10
 800d21c:	f7f6 fcc0 	bl	8003ba0 <HAL_Delay>
      ms += 10U;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	330a      	adds	r3, #10
 800d224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fa0c 	bl	800d644 <USB_GetMode>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d005      	beq.n	800d23e <USB_SetCurrentMode+0x84>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2bc7      	cmp	r3, #199	@ 0xc7
 800d236:	d9f0      	bls.n	800d21a <USB_SetCurrentMode+0x60>
 800d238:	e001      	b.n	800d23e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e005      	b.n	800d24a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2bc8      	cmp	r3, #200	@ 0xc8
 800d242:	d101      	bne.n	800d248 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
	...

0800d254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d254:	b084      	sub	sp, #16
 800d256:	b580      	push	{r7, lr}
 800d258:	b086      	sub	sp, #24
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d26e:	2300      	movs	r3, #0
 800d270:	613b      	str	r3, [r7, #16]
 800d272:	e009      	b.n	800d288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	3340      	adds	r3, #64	@ 0x40
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	2200      	movs	r2, #0
 800d280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	3301      	adds	r3, #1
 800d286:	613b      	str	r3, [r7, #16]
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	2b0e      	cmp	r3, #14
 800d28c:	d9f2      	bls.n	800d274 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d28e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d292:	2b00      	cmp	r3, #0
 800d294:	d11c      	bne.n	800d2d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d2a4:	f043 0302 	orr.w	r3, r3, #2
 800d2a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	e005      	b.n	800d2dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d10d      	bne.n	800d30c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d104      	bne.n	800d302 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f968 	bl	800d5d0 <USB_SetDevSpeed>
 800d300:	e008      	b.n	800d314 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d302:	2101      	movs	r1, #1
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f963 	bl	800d5d0 <USB_SetDevSpeed>
 800d30a:	e003      	b.n	800d314 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d30c:	2103      	movs	r1, #3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f95e 	bl	800d5d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d314:	2110      	movs	r1, #16
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8fa 	bl	800d510 <USB_FlushTxFifo>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d322:	2301      	movs	r3, #1
 800d324:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f924 	bl	800d574 <USB_FlushRxFifo>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d33c:	461a      	mov	r2, r3
 800d33e:	2300      	movs	r3, #0
 800d340:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d348:	461a      	mov	r2, r3
 800d34a:	2300      	movs	r3, #0
 800d34c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d354:	461a      	mov	r2, r3
 800d356:	2300      	movs	r3, #0
 800d358:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]
 800d35e:	e043      	b.n	800d3e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d372:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d376:	d118      	bne.n	800d3aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d38a:	461a      	mov	r2, r3
 800d38c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	e013      	b.n	800d3bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	e008      	b.n	800d3bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	015a      	lsls	r2, r3, #5
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	015a      	lsls	r2, r3, #5
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d3e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	613b      	str	r3, [r7, #16]
 800d3e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d3b5      	bcc.n	800d360 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	613b      	str	r3, [r7, #16]
 800d3f8:	e043      	b.n	800d482 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d40c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d410:	d118      	bne.n	800d444 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d10a      	bne.n	800d42e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	015a      	lsls	r2, r3, #5
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d424:	461a      	mov	r2, r3
 800d426:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	e013      	b.n	800d456 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	015a      	lsls	r2, r3, #5
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4413      	add	r3, r2
 800d436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d43a:	461a      	mov	r2, r3
 800d43c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	e008      	b.n	800d456 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d450:	461a      	mov	r2, r3
 800d452:	2300      	movs	r3, #0
 800d454:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d462:	461a      	mov	r2, r3
 800d464:	2300      	movs	r3, #0
 800d466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	015a      	lsls	r2, r3, #5
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d474:	461a      	mov	r2, r3
 800d476:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d47a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	3301      	adds	r3, #1
 800d480:	613b      	str	r3, [r7, #16]
 800d482:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d486:	461a      	mov	r2, r3
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d3b5      	bcc.n	800d3fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d49c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d4ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d4b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d105      	bne.n	800d4c4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	f043 0210 	orr.w	r2, r3, #16
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	699a      	ldr	r2, [r3, #24]
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d508 <USB_DevInit+0x2b4>)
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d4d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d005      	beq.n	800d4e4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	f043 0208 	orr.w	r2, r3, #8
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d4e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d105      	bne.n	800d4f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	699a      	ldr	r2, [r3, #24]
 800d4f0:	4b06      	ldr	r3, [pc, #24]	@ (800d50c <USB_DevInit+0x2b8>)
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3718      	adds	r7, #24
 800d4fe:	46bd      	mov	sp, r7
 800d500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d504:	b004      	add	sp, #16
 800d506:	4770      	bx	lr
 800d508:	803c3800 	.word	0x803c3800
 800d50c:	40000004 	.word	0x40000004

0800d510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3301      	adds	r3, #1
 800d522:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d52a:	d901      	bls.n	800d530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e01b      	b.n	800d568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	daf2      	bge.n	800d51e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	019b      	lsls	r3, r3, #6
 800d540:	f043 0220 	orr.w	r2, r3, #32
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3301      	adds	r3, #1
 800d54c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d554:	d901      	bls.n	800d55a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d556:	2303      	movs	r3, #3
 800d558:	e006      	b.n	800d568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	f003 0320 	and.w	r3, r3, #32
 800d562:	2b20      	cmp	r3, #32
 800d564:	d0f0      	beq.n	800d548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d58c:	d901      	bls.n	800d592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e018      	b.n	800d5c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	2b00      	cmp	r3, #0
 800d598:	daf2      	bge.n	800d580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2210      	movs	r2, #16
 800d5a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5b0:	d901      	bls.n	800d5b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e006      	b.n	800d5c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	f003 0310 	and.w	r3, r3, #16
 800d5be:	2b10      	cmp	r3, #16
 800d5c0:	d0f0      	beq.n	800d5a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	78fb      	ldrb	r3, [r7, #3]
 800d5ea:	68f9      	ldr	r1, [r7, #12]
 800d5ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr

0800d602 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d602:	b480      	push	{r7}
 800d604:	b085      	sub	sp, #20
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d61c:	f023 0303 	bic.w	r3, r3, #3
 800d620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d630:	f043 0302 	orr.w	r3, r3, #2
 800d634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	695b      	ldr	r3, [r3, #20]
 800d650:	f003 0301 	and.w	r3, r3, #1
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d668:	2300      	movs	r3, #0
 800d66a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	3301      	adds	r3, #1
 800d670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d678:	d901      	bls.n	800d67e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e01b      	b.n	800d6b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	691b      	ldr	r3, [r3, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	daf2      	bge.n	800d66c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	f043 0201 	orr.w	r2, r3, #1
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	3301      	adds	r3, #1
 800d69a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6a2:	d901      	bls.n	800d6a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e006      	b.n	800d6b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d0f0      	beq.n	800d696 <USB_CoreReset+0x36>

  return HAL_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3714      	adds	r7, #20
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
	...

0800d6c4 <std>:
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	b510      	push	{r4, lr}
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	e9c0 3300 	strd	r3, r3, [r0]
 800d6ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6d2:	6083      	str	r3, [r0, #8]
 800d6d4:	8181      	strh	r1, [r0, #12]
 800d6d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d6d8:	81c2      	strh	r2, [r0, #14]
 800d6da:	6183      	str	r3, [r0, #24]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	2208      	movs	r2, #8
 800d6e0:	305c      	adds	r0, #92	@ 0x5c
 800d6e2:	f000 f93a 	bl	800d95a <memset>
 800d6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d71c <std+0x58>)
 800d6e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d720 <std+0x5c>)
 800d6ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d724 <std+0x60>)
 800d6f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d728 <std+0x64>)
 800d6f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <std+0x68>)
 800d6f8:	6224      	str	r4, [r4, #32]
 800d6fa:	429c      	cmp	r4, r3
 800d6fc:	d006      	beq.n	800d70c <std+0x48>
 800d6fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d702:	4294      	cmp	r4, r2
 800d704:	d002      	beq.n	800d70c <std+0x48>
 800d706:	33d0      	adds	r3, #208	@ 0xd0
 800d708:	429c      	cmp	r4, r3
 800d70a:	d105      	bne.n	800d718 <std+0x54>
 800d70c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d714:	f000 b99a 	b.w	800da4c <__retarget_lock_init_recursive>
 800d718:	bd10      	pop	{r4, pc}
 800d71a:	bf00      	nop
 800d71c:	0800d8d5 	.word	0x0800d8d5
 800d720:	0800d8f7 	.word	0x0800d8f7
 800d724:	0800d92f 	.word	0x0800d92f
 800d728:	0800d953 	.word	0x0800d953
 800d72c:	24000e8c 	.word	0x24000e8c

0800d730 <stdio_exit_handler>:
 800d730:	4a02      	ldr	r2, [pc, #8]	@ (800d73c <stdio_exit_handler+0xc>)
 800d732:	4903      	ldr	r1, [pc, #12]	@ (800d740 <stdio_exit_handler+0x10>)
 800d734:	4803      	ldr	r0, [pc, #12]	@ (800d744 <stdio_exit_handler+0x14>)
 800d736:	f000 b869 	b.w	800d80c <_fwalk_sglue>
 800d73a:	bf00      	nop
 800d73c:	24000010 	.word	0x24000010
 800d740:	0800e5b9 	.word	0x0800e5b9
 800d744:	24000020 	.word	0x24000020

0800d748 <cleanup_stdio>:
 800d748:	6841      	ldr	r1, [r0, #4]
 800d74a:	4b0c      	ldr	r3, [pc, #48]	@ (800d77c <cleanup_stdio+0x34>)
 800d74c:	4299      	cmp	r1, r3
 800d74e:	b510      	push	{r4, lr}
 800d750:	4604      	mov	r4, r0
 800d752:	d001      	beq.n	800d758 <cleanup_stdio+0x10>
 800d754:	f000 ff30 	bl	800e5b8 <_fflush_r>
 800d758:	68a1      	ldr	r1, [r4, #8]
 800d75a:	4b09      	ldr	r3, [pc, #36]	@ (800d780 <cleanup_stdio+0x38>)
 800d75c:	4299      	cmp	r1, r3
 800d75e:	d002      	beq.n	800d766 <cleanup_stdio+0x1e>
 800d760:	4620      	mov	r0, r4
 800d762:	f000 ff29 	bl	800e5b8 <_fflush_r>
 800d766:	68e1      	ldr	r1, [r4, #12]
 800d768:	4b06      	ldr	r3, [pc, #24]	@ (800d784 <cleanup_stdio+0x3c>)
 800d76a:	4299      	cmp	r1, r3
 800d76c:	d004      	beq.n	800d778 <cleanup_stdio+0x30>
 800d76e:	4620      	mov	r0, r4
 800d770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d774:	f000 bf20 	b.w	800e5b8 <_fflush_r>
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	bf00      	nop
 800d77c:	24000e8c 	.word	0x24000e8c
 800d780:	24000ef4 	.word	0x24000ef4
 800d784:	24000f5c 	.word	0x24000f5c

0800d788 <global_stdio_init.part.0>:
 800d788:	b510      	push	{r4, lr}
 800d78a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <global_stdio_init.part.0+0x30>)
 800d78c:	4c0b      	ldr	r4, [pc, #44]	@ (800d7bc <global_stdio_init.part.0+0x34>)
 800d78e:	4a0c      	ldr	r2, [pc, #48]	@ (800d7c0 <global_stdio_init.part.0+0x38>)
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	4620      	mov	r0, r4
 800d794:	2200      	movs	r2, #0
 800d796:	2104      	movs	r1, #4
 800d798:	f7ff ff94 	bl	800d6c4 <std>
 800d79c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	2109      	movs	r1, #9
 800d7a4:	f7ff ff8e 	bl	800d6c4 <std>
 800d7a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d7ac:	2202      	movs	r2, #2
 800d7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b2:	2112      	movs	r1, #18
 800d7b4:	f7ff bf86 	b.w	800d6c4 <std>
 800d7b8:	24000fc4 	.word	0x24000fc4
 800d7bc:	24000e8c 	.word	0x24000e8c
 800d7c0:	0800d731 	.word	0x0800d731

0800d7c4 <__sfp_lock_acquire>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	@ (800d7cc <__sfp_lock_acquire+0x8>)
 800d7c6:	f000 b942 	b.w	800da4e <__retarget_lock_acquire_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	24000fcd 	.word	0x24000fcd

0800d7d0 <__sfp_lock_release>:
 800d7d0:	4801      	ldr	r0, [pc, #4]	@ (800d7d8 <__sfp_lock_release+0x8>)
 800d7d2:	f000 b93d 	b.w	800da50 <__retarget_lock_release_recursive>
 800d7d6:	bf00      	nop
 800d7d8:	24000fcd 	.word	0x24000fcd

0800d7dc <__sinit>:
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	4604      	mov	r4, r0
 800d7e0:	f7ff fff0 	bl	800d7c4 <__sfp_lock_acquire>
 800d7e4:	6a23      	ldr	r3, [r4, #32]
 800d7e6:	b11b      	cbz	r3, 800d7f0 <__sinit+0x14>
 800d7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ec:	f7ff bff0 	b.w	800d7d0 <__sfp_lock_release>
 800d7f0:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <__sinit+0x28>)
 800d7f2:	6223      	str	r3, [r4, #32]
 800d7f4:	4b04      	ldr	r3, [pc, #16]	@ (800d808 <__sinit+0x2c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1f5      	bne.n	800d7e8 <__sinit+0xc>
 800d7fc:	f7ff ffc4 	bl	800d788 <global_stdio_init.part.0>
 800d800:	e7f2      	b.n	800d7e8 <__sinit+0xc>
 800d802:	bf00      	nop
 800d804:	0800d749 	.word	0x0800d749
 800d808:	24000fc4 	.word	0x24000fc4

0800d80c <_fwalk_sglue>:
 800d80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d810:	4607      	mov	r7, r0
 800d812:	4688      	mov	r8, r1
 800d814:	4614      	mov	r4, r2
 800d816:	2600      	movs	r6, #0
 800d818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d81c:	f1b9 0901 	subs.w	r9, r9, #1
 800d820:	d505      	bpl.n	800d82e <_fwalk_sglue+0x22>
 800d822:	6824      	ldr	r4, [r4, #0]
 800d824:	2c00      	cmp	r4, #0
 800d826:	d1f7      	bne.n	800d818 <_fwalk_sglue+0xc>
 800d828:	4630      	mov	r0, r6
 800d82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82e:	89ab      	ldrh	r3, [r5, #12]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d907      	bls.n	800d844 <_fwalk_sglue+0x38>
 800d834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d838:	3301      	adds	r3, #1
 800d83a:	d003      	beq.n	800d844 <_fwalk_sglue+0x38>
 800d83c:	4629      	mov	r1, r5
 800d83e:	4638      	mov	r0, r7
 800d840:	47c0      	blx	r8
 800d842:	4306      	orrs	r6, r0
 800d844:	3568      	adds	r5, #104	@ 0x68
 800d846:	e7e9      	b.n	800d81c <_fwalk_sglue+0x10>

0800d848 <iprintf>:
 800d848:	b40f      	push	{r0, r1, r2, r3}
 800d84a:	b507      	push	{r0, r1, r2, lr}
 800d84c:	4906      	ldr	r1, [pc, #24]	@ (800d868 <iprintf+0x20>)
 800d84e:	ab04      	add	r3, sp, #16
 800d850:	6808      	ldr	r0, [r1, #0]
 800d852:	f853 2b04 	ldr.w	r2, [r3], #4
 800d856:	6881      	ldr	r1, [r0, #8]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	f000 fb83 	bl	800df64 <_vfiprintf_r>
 800d85e:	b003      	add	sp, #12
 800d860:	f85d eb04 	ldr.w	lr, [sp], #4
 800d864:	b004      	add	sp, #16
 800d866:	4770      	bx	lr
 800d868:	2400001c 	.word	0x2400001c

0800d86c <sniprintf>:
 800d86c:	b40c      	push	{r2, r3}
 800d86e:	b530      	push	{r4, r5, lr}
 800d870:	4b17      	ldr	r3, [pc, #92]	@ (800d8d0 <sniprintf+0x64>)
 800d872:	1e0c      	subs	r4, r1, #0
 800d874:	681d      	ldr	r5, [r3, #0]
 800d876:	b09d      	sub	sp, #116	@ 0x74
 800d878:	da08      	bge.n	800d88c <sniprintf+0x20>
 800d87a:	238b      	movs	r3, #139	@ 0x8b
 800d87c:	602b      	str	r3, [r5, #0]
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295
 800d882:	b01d      	add	sp, #116	@ 0x74
 800d884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d888:	b002      	add	sp, #8
 800d88a:	4770      	bx	lr
 800d88c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d890:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d894:	bf14      	ite	ne
 800d896:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d89a:	4623      	moveq	r3, r4
 800d89c:	9304      	str	r3, [sp, #16]
 800d89e:	9307      	str	r3, [sp, #28]
 800d8a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8a4:	9002      	str	r0, [sp, #8]
 800d8a6:	9006      	str	r0, [sp, #24]
 800d8a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8ae:	ab21      	add	r3, sp, #132	@ 0x84
 800d8b0:	a902      	add	r1, sp, #8
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	9301      	str	r3, [sp, #4]
 800d8b6:	f000 fa2f 	bl	800dd18 <_svfiprintf_r>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	bfbc      	itt	lt
 800d8be:	238b      	movlt	r3, #139	@ 0x8b
 800d8c0:	602b      	strlt	r3, [r5, #0]
 800d8c2:	2c00      	cmp	r4, #0
 800d8c4:	d0dd      	beq.n	800d882 <sniprintf+0x16>
 800d8c6:	9b02      	ldr	r3, [sp, #8]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	e7d9      	b.n	800d882 <sniprintf+0x16>
 800d8ce:	bf00      	nop
 800d8d0:	2400001c 	.word	0x2400001c

0800d8d4 <__sread>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8dc:	f000 f868 	bl	800d9b0 <_read_r>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	bfab      	itete	ge
 800d8e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d8e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d8e8:	181b      	addge	r3, r3, r0
 800d8ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d8ee:	bfac      	ite	ge
 800d8f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d8f2:	81a3      	strhlt	r3, [r4, #12]
 800d8f4:	bd10      	pop	{r4, pc}

0800d8f6 <__swrite>:
 800d8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fa:	461f      	mov	r7, r3
 800d8fc:	898b      	ldrh	r3, [r1, #12]
 800d8fe:	05db      	lsls	r3, r3, #23
 800d900:	4605      	mov	r5, r0
 800d902:	460c      	mov	r4, r1
 800d904:	4616      	mov	r6, r2
 800d906:	d505      	bpl.n	800d914 <__swrite+0x1e>
 800d908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90c:	2302      	movs	r3, #2
 800d90e:	2200      	movs	r2, #0
 800d910:	f000 f83c 	bl	800d98c <_lseek_r>
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d91a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	4632      	mov	r2, r6
 800d922:	463b      	mov	r3, r7
 800d924:	4628      	mov	r0, r5
 800d926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d92a:	f000 b853 	b.w	800d9d4 <_write_r>

0800d92e <__sseek>:
 800d92e:	b510      	push	{r4, lr}
 800d930:	460c      	mov	r4, r1
 800d932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d936:	f000 f829 	bl	800d98c <_lseek_r>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	bf15      	itete	ne
 800d940:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d94a:	81a3      	strheq	r3, [r4, #12]
 800d94c:	bf18      	it	ne
 800d94e:	81a3      	strhne	r3, [r4, #12]
 800d950:	bd10      	pop	{r4, pc}

0800d952 <__sclose>:
 800d952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d956:	f000 b809 	b.w	800d96c <_close_r>

0800d95a <memset>:
 800d95a:	4402      	add	r2, r0
 800d95c:	4603      	mov	r3, r0
 800d95e:	4293      	cmp	r3, r2
 800d960:	d100      	bne.n	800d964 <memset+0xa>
 800d962:	4770      	bx	lr
 800d964:	f803 1b01 	strb.w	r1, [r3], #1
 800d968:	e7f9      	b.n	800d95e <memset+0x4>
	...

0800d96c <_close_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d06      	ldr	r5, [pc, #24]	@ (800d988 <_close_r+0x1c>)
 800d970:	2300      	movs	r3, #0
 800d972:	4604      	mov	r4, r0
 800d974:	4608      	mov	r0, r1
 800d976:	602b      	str	r3, [r5, #0]
 800d978:	f7f5 ff64 	bl	8003844 <_close>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d102      	bne.n	800d986 <_close_r+0x1a>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b103      	cbz	r3, 800d986 <_close_r+0x1a>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	24000fc8 	.word	0x24000fc8

0800d98c <_lseek_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	4d07      	ldr	r5, [pc, #28]	@ (800d9ac <_lseek_r+0x20>)
 800d990:	4604      	mov	r4, r0
 800d992:	4608      	mov	r0, r1
 800d994:	4611      	mov	r1, r2
 800d996:	2200      	movs	r2, #0
 800d998:	602a      	str	r2, [r5, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	f7f5 ff79 	bl	8003892 <_lseek>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_lseek_r+0x1e>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_lseek_r+0x1e>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	24000fc8 	.word	0x24000fc8

0800d9b0 <_read_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4d07      	ldr	r5, [pc, #28]	@ (800d9d0 <_read_r+0x20>)
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	4608      	mov	r0, r1
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	602a      	str	r2, [r5, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f7f5 ff07 	bl	80037d2 <_read>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_read_r+0x1e>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_read_r+0x1e>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	24000fc8 	.word	0x24000fc8

0800d9d4 <_write_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d07      	ldr	r5, [pc, #28]	@ (800d9f4 <_write_r+0x20>)
 800d9d8:	4604      	mov	r4, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	602a      	str	r2, [r5, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f5 ff12 	bl	800380c <_write>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_write_r+0x1e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_write_r+0x1e>
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	24000fc8 	.word	0x24000fc8

0800d9f8 <__errno>:
 800d9f8:	4b01      	ldr	r3, [pc, #4]	@ (800da00 <__errno+0x8>)
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	2400001c 	.word	0x2400001c

0800da04 <__libc_init_array>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	4d0d      	ldr	r5, [pc, #52]	@ (800da3c <__libc_init_array+0x38>)
 800da08:	4c0d      	ldr	r4, [pc, #52]	@ (800da40 <__libc_init_array+0x3c>)
 800da0a:	1b64      	subs	r4, r4, r5
 800da0c:	10a4      	asrs	r4, r4, #2
 800da0e:	2600      	movs	r6, #0
 800da10:	42a6      	cmp	r6, r4
 800da12:	d109      	bne.n	800da28 <__libc_init_array+0x24>
 800da14:	4d0b      	ldr	r5, [pc, #44]	@ (800da44 <__libc_init_array+0x40>)
 800da16:	4c0c      	ldr	r4, [pc, #48]	@ (800da48 <__libc_init_array+0x44>)
 800da18:	f000 ff6e 	bl	800e8f8 <_init>
 800da1c:	1b64      	subs	r4, r4, r5
 800da1e:	10a4      	asrs	r4, r4, #2
 800da20:	2600      	movs	r6, #0
 800da22:	42a6      	cmp	r6, r4
 800da24:	d105      	bne.n	800da32 <__libc_init_array+0x2e>
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	f855 3b04 	ldr.w	r3, [r5], #4
 800da2c:	4798      	blx	r3
 800da2e:	3601      	adds	r6, #1
 800da30:	e7ee      	b.n	800da10 <__libc_init_array+0xc>
 800da32:	f855 3b04 	ldr.w	r3, [r5], #4
 800da36:	4798      	blx	r3
 800da38:	3601      	adds	r6, #1
 800da3a:	e7f2      	b.n	800da22 <__libc_init_array+0x1e>
 800da3c:	0800ec20 	.word	0x0800ec20
 800da40:	0800ec20 	.word	0x0800ec20
 800da44:	0800ec20 	.word	0x0800ec20
 800da48:	0800ec24 	.word	0x0800ec24

0800da4c <__retarget_lock_init_recursive>:
 800da4c:	4770      	bx	lr

0800da4e <__retarget_lock_acquire_recursive>:
 800da4e:	4770      	bx	lr

0800da50 <__retarget_lock_release_recursive>:
 800da50:	4770      	bx	lr

0800da52 <memcpy>:
 800da52:	440a      	add	r2, r1
 800da54:	4291      	cmp	r1, r2
 800da56:	f100 33ff 	add.w	r3, r0, #4294967295
 800da5a:	d100      	bne.n	800da5e <memcpy+0xc>
 800da5c:	4770      	bx	lr
 800da5e:	b510      	push	{r4, lr}
 800da60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da68:	4291      	cmp	r1, r2
 800da6a:	d1f9      	bne.n	800da60 <memcpy+0xe>
 800da6c:	bd10      	pop	{r4, pc}
	...

0800da70 <_free_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4605      	mov	r5, r0
 800da74:	2900      	cmp	r1, #0
 800da76:	d041      	beq.n	800dafc <_free_r+0x8c>
 800da78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da7c:	1f0c      	subs	r4, r1, #4
 800da7e:	2b00      	cmp	r3, #0
 800da80:	bfb8      	it	lt
 800da82:	18e4      	addlt	r4, r4, r3
 800da84:	f000 f8e0 	bl	800dc48 <__malloc_lock>
 800da88:	4a1d      	ldr	r2, [pc, #116]	@ (800db00 <_free_r+0x90>)
 800da8a:	6813      	ldr	r3, [r2, #0]
 800da8c:	b933      	cbnz	r3, 800da9c <_free_r+0x2c>
 800da8e:	6063      	str	r3, [r4, #4]
 800da90:	6014      	str	r4, [r2, #0]
 800da92:	4628      	mov	r0, r5
 800da94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da98:	f000 b8dc 	b.w	800dc54 <__malloc_unlock>
 800da9c:	42a3      	cmp	r3, r4
 800da9e:	d908      	bls.n	800dab2 <_free_r+0x42>
 800daa0:	6820      	ldr	r0, [r4, #0]
 800daa2:	1821      	adds	r1, r4, r0
 800daa4:	428b      	cmp	r3, r1
 800daa6:	bf01      	itttt	eq
 800daa8:	6819      	ldreq	r1, [r3, #0]
 800daaa:	685b      	ldreq	r3, [r3, #4]
 800daac:	1809      	addeq	r1, r1, r0
 800daae:	6021      	streq	r1, [r4, #0]
 800dab0:	e7ed      	b.n	800da8e <_free_r+0x1e>
 800dab2:	461a      	mov	r2, r3
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	b10b      	cbz	r3, 800dabc <_free_r+0x4c>
 800dab8:	42a3      	cmp	r3, r4
 800daba:	d9fa      	bls.n	800dab2 <_free_r+0x42>
 800dabc:	6811      	ldr	r1, [r2, #0]
 800dabe:	1850      	adds	r0, r2, r1
 800dac0:	42a0      	cmp	r0, r4
 800dac2:	d10b      	bne.n	800dadc <_free_r+0x6c>
 800dac4:	6820      	ldr	r0, [r4, #0]
 800dac6:	4401      	add	r1, r0
 800dac8:	1850      	adds	r0, r2, r1
 800daca:	4283      	cmp	r3, r0
 800dacc:	6011      	str	r1, [r2, #0]
 800dace:	d1e0      	bne.n	800da92 <_free_r+0x22>
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	6053      	str	r3, [r2, #4]
 800dad6:	4408      	add	r0, r1
 800dad8:	6010      	str	r0, [r2, #0]
 800dada:	e7da      	b.n	800da92 <_free_r+0x22>
 800dadc:	d902      	bls.n	800dae4 <_free_r+0x74>
 800dade:	230c      	movs	r3, #12
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	e7d6      	b.n	800da92 <_free_r+0x22>
 800dae4:	6820      	ldr	r0, [r4, #0]
 800dae6:	1821      	adds	r1, r4, r0
 800dae8:	428b      	cmp	r3, r1
 800daea:	bf04      	itt	eq
 800daec:	6819      	ldreq	r1, [r3, #0]
 800daee:	685b      	ldreq	r3, [r3, #4]
 800daf0:	6063      	str	r3, [r4, #4]
 800daf2:	bf04      	itt	eq
 800daf4:	1809      	addeq	r1, r1, r0
 800daf6:	6021      	streq	r1, [r4, #0]
 800daf8:	6054      	str	r4, [r2, #4]
 800dafa:	e7ca      	b.n	800da92 <_free_r+0x22>
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	24000fd4 	.word	0x24000fd4

0800db04 <sbrk_aligned>:
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	4e0f      	ldr	r6, [pc, #60]	@ (800db44 <sbrk_aligned+0x40>)
 800db08:	460c      	mov	r4, r1
 800db0a:	6831      	ldr	r1, [r6, #0]
 800db0c:	4605      	mov	r5, r0
 800db0e:	b911      	cbnz	r1, 800db16 <sbrk_aligned+0x12>
 800db10:	f000 fe28 	bl	800e764 <_sbrk_r>
 800db14:	6030      	str	r0, [r6, #0]
 800db16:	4621      	mov	r1, r4
 800db18:	4628      	mov	r0, r5
 800db1a:	f000 fe23 	bl	800e764 <_sbrk_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	d103      	bne.n	800db2a <sbrk_aligned+0x26>
 800db22:	f04f 34ff 	mov.w	r4, #4294967295
 800db26:	4620      	mov	r0, r4
 800db28:	bd70      	pop	{r4, r5, r6, pc}
 800db2a:	1cc4      	adds	r4, r0, #3
 800db2c:	f024 0403 	bic.w	r4, r4, #3
 800db30:	42a0      	cmp	r0, r4
 800db32:	d0f8      	beq.n	800db26 <sbrk_aligned+0x22>
 800db34:	1a21      	subs	r1, r4, r0
 800db36:	4628      	mov	r0, r5
 800db38:	f000 fe14 	bl	800e764 <_sbrk_r>
 800db3c:	3001      	adds	r0, #1
 800db3e:	d1f2      	bne.n	800db26 <sbrk_aligned+0x22>
 800db40:	e7ef      	b.n	800db22 <sbrk_aligned+0x1e>
 800db42:	bf00      	nop
 800db44:	24000fd0 	.word	0x24000fd0

0800db48 <_malloc_r>:
 800db48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db4c:	1ccd      	adds	r5, r1, #3
 800db4e:	f025 0503 	bic.w	r5, r5, #3
 800db52:	3508      	adds	r5, #8
 800db54:	2d0c      	cmp	r5, #12
 800db56:	bf38      	it	cc
 800db58:	250c      	movcc	r5, #12
 800db5a:	2d00      	cmp	r5, #0
 800db5c:	4606      	mov	r6, r0
 800db5e:	db01      	blt.n	800db64 <_malloc_r+0x1c>
 800db60:	42a9      	cmp	r1, r5
 800db62:	d904      	bls.n	800db6e <_malloc_r+0x26>
 800db64:	230c      	movs	r3, #12
 800db66:	6033      	str	r3, [r6, #0]
 800db68:	2000      	movs	r0, #0
 800db6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc44 <_malloc_r+0xfc>
 800db72:	f000 f869 	bl	800dc48 <__malloc_lock>
 800db76:	f8d8 3000 	ldr.w	r3, [r8]
 800db7a:	461c      	mov	r4, r3
 800db7c:	bb44      	cbnz	r4, 800dbd0 <_malloc_r+0x88>
 800db7e:	4629      	mov	r1, r5
 800db80:	4630      	mov	r0, r6
 800db82:	f7ff ffbf 	bl	800db04 <sbrk_aligned>
 800db86:	1c43      	adds	r3, r0, #1
 800db88:	4604      	mov	r4, r0
 800db8a:	d158      	bne.n	800dc3e <_malloc_r+0xf6>
 800db8c:	f8d8 4000 	ldr.w	r4, [r8]
 800db90:	4627      	mov	r7, r4
 800db92:	2f00      	cmp	r7, #0
 800db94:	d143      	bne.n	800dc1e <_malloc_r+0xd6>
 800db96:	2c00      	cmp	r4, #0
 800db98:	d04b      	beq.n	800dc32 <_malloc_r+0xea>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	4639      	mov	r1, r7
 800db9e:	4630      	mov	r0, r6
 800dba0:	eb04 0903 	add.w	r9, r4, r3
 800dba4:	f000 fdde 	bl	800e764 <_sbrk_r>
 800dba8:	4581      	cmp	r9, r0
 800dbaa:	d142      	bne.n	800dc32 <_malloc_r+0xea>
 800dbac:	6821      	ldr	r1, [r4, #0]
 800dbae:	1a6d      	subs	r5, r5, r1
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f7ff ffa6 	bl	800db04 <sbrk_aligned>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d03a      	beq.n	800dc32 <_malloc_r+0xea>
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	442b      	add	r3, r5
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	bb62      	cbnz	r2, 800dc24 <_malloc_r+0xdc>
 800dbca:	f8c8 7000 	str.w	r7, [r8]
 800dbce:	e00f      	b.n	800dbf0 <_malloc_r+0xa8>
 800dbd0:	6822      	ldr	r2, [r4, #0]
 800dbd2:	1b52      	subs	r2, r2, r5
 800dbd4:	d420      	bmi.n	800dc18 <_malloc_r+0xd0>
 800dbd6:	2a0b      	cmp	r2, #11
 800dbd8:	d917      	bls.n	800dc0a <_malloc_r+0xc2>
 800dbda:	1961      	adds	r1, r4, r5
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	6025      	str	r5, [r4, #0]
 800dbe0:	bf18      	it	ne
 800dbe2:	6059      	strne	r1, [r3, #4]
 800dbe4:	6863      	ldr	r3, [r4, #4]
 800dbe6:	bf08      	it	eq
 800dbe8:	f8c8 1000 	streq.w	r1, [r8]
 800dbec:	5162      	str	r2, [r4, r5]
 800dbee:	604b      	str	r3, [r1, #4]
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f000 f82f 	bl	800dc54 <__malloc_unlock>
 800dbf6:	f104 000b 	add.w	r0, r4, #11
 800dbfa:	1d23      	adds	r3, r4, #4
 800dbfc:	f020 0007 	bic.w	r0, r0, #7
 800dc00:	1ac2      	subs	r2, r0, r3
 800dc02:	bf1c      	itt	ne
 800dc04:	1a1b      	subne	r3, r3, r0
 800dc06:	50a3      	strne	r3, [r4, r2]
 800dc08:	e7af      	b.n	800db6a <_malloc_r+0x22>
 800dc0a:	6862      	ldr	r2, [r4, #4]
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	bf0c      	ite	eq
 800dc10:	f8c8 2000 	streq.w	r2, [r8]
 800dc14:	605a      	strne	r2, [r3, #4]
 800dc16:	e7eb      	b.n	800dbf0 <_malloc_r+0xa8>
 800dc18:	4623      	mov	r3, r4
 800dc1a:	6864      	ldr	r4, [r4, #4]
 800dc1c:	e7ae      	b.n	800db7c <_malloc_r+0x34>
 800dc1e:	463c      	mov	r4, r7
 800dc20:	687f      	ldr	r7, [r7, #4]
 800dc22:	e7b6      	b.n	800db92 <_malloc_r+0x4a>
 800dc24:	461a      	mov	r2, r3
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	42a3      	cmp	r3, r4
 800dc2a:	d1fb      	bne.n	800dc24 <_malloc_r+0xdc>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	6053      	str	r3, [r2, #4]
 800dc30:	e7de      	b.n	800dbf0 <_malloc_r+0xa8>
 800dc32:	230c      	movs	r3, #12
 800dc34:	6033      	str	r3, [r6, #0]
 800dc36:	4630      	mov	r0, r6
 800dc38:	f000 f80c 	bl	800dc54 <__malloc_unlock>
 800dc3c:	e794      	b.n	800db68 <_malloc_r+0x20>
 800dc3e:	6005      	str	r5, [r0, #0]
 800dc40:	e7d6      	b.n	800dbf0 <_malloc_r+0xa8>
 800dc42:	bf00      	nop
 800dc44:	24000fd4 	.word	0x24000fd4

0800dc48 <__malloc_lock>:
 800dc48:	4801      	ldr	r0, [pc, #4]	@ (800dc50 <__malloc_lock+0x8>)
 800dc4a:	f7ff bf00 	b.w	800da4e <__retarget_lock_acquire_recursive>
 800dc4e:	bf00      	nop
 800dc50:	24000fcc 	.word	0x24000fcc

0800dc54 <__malloc_unlock>:
 800dc54:	4801      	ldr	r0, [pc, #4]	@ (800dc5c <__malloc_unlock+0x8>)
 800dc56:	f7ff befb 	b.w	800da50 <__retarget_lock_release_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	24000fcc 	.word	0x24000fcc

0800dc60 <__ssputs_r>:
 800dc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc64:	688e      	ldr	r6, [r1, #8]
 800dc66:	461f      	mov	r7, r3
 800dc68:	42be      	cmp	r6, r7
 800dc6a:	680b      	ldr	r3, [r1, #0]
 800dc6c:	4682      	mov	sl, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4690      	mov	r8, r2
 800dc72:	d82d      	bhi.n	800dcd0 <__ssputs_r+0x70>
 800dc74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc7c:	d026      	beq.n	800dccc <__ssputs_r+0x6c>
 800dc7e:	6965      	ldr	r5, [r4, #20]
 800dc80:	6909      	ldr	r1, [r1, #16]
 800dc82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc86:	eba3 0901 	sub.w	r9, r3, r1
 800dc8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc8e:	1c7b      	adds	r3, r7, #1
 800dc90:	444b      	add	r3, r9
 800dc92:	106d      	asrs	r5, r5, #1
 800dc94:	429d      	cmp	r5, r3
 800dc96:	bf38      	it	cc
 800dc98:	461d      	movcc	r5, r3
 800dc9a:	0553      	lsls	r3, r2, #21
 800dc9c:	d527      	bpl.n	800dcee <__ssputs_r+0x8e>
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7ff ff52 	bl	800db48 <_malloc_r>
 800dca4:	4606      	mov	r6, r0
 800dca6:	b360      	cbz	r0, 800dd02 <__ssputs_r+0xa2>
 800dca8:	6921      	ldr	r1, [r4, #16]
 800dcaa:	464a      	mov	r2, r9
 800dcac:	f7ff fed1 	bl	800da52 <memcpy>
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dcb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	6126      	str	r6, [r4, #16]
 800dcbe:	6165      	str	r5, [r4, #20]
 800dcc0:	444e      	add	r6, r9
 800dcc2:	eba5 0509 	sub.w	r5, r5, r9
 800dcc6:	6026      	str	r6, [r4, #0]
 800dcc8:	60a5      	str	r5, [r4, #8]
 800dcca:	463e      	mov	r6, r7
 800dccc:	42be      	cmp	r6, r7
 800dcce:	d900      	bls.n	800dcd2 <__ssputs_r+0x72>
 800dcd0:	463e      	mov	r6, r7
 800dcd2:	6820      	ldr	r0, [r4, #0]
 800dcd4:	4632      	mov	r2, r6
 800dcd6:	4641      	mov	r1, r8
 800dcd8:	f000 fd2a 	bl	800e730 <memmove>
 800dcdc:	68a3      	ldr	r3, [r4, #8]
 800dcde:	1b9b      	subs	r3, r3, r6
 800dce0:	60a3      	str	r3, [r4, #8]
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	4433      	add	r3, r6
 800dce6:	6023      	str	r3, [r4, #0]
 800dce8:	2000      	movs	r0, #0
 800dcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcee:	462a      	mov	r2, r5
 800dcf0:	f000 fd48 	bl	800e784 <_realloc_r>
 800dcf4:	4606      	mov	r6, r0
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d1e0      	bne.n	800dcbc <__ssputs_r+0x5c>
 800dcfa:	6921      	ldr	r1, [r4, #16]
 800dcfc:	4650      	mov	r0, sl
 800dcfe:	f7ff feb7 	bl	800da70 <_free_r>
 800dd02:	230c      	movs	r3, #12
 800dd04:	f8ca 3000 	str.w	r3, [sl]
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd0e:	81a3      	strh	r3, [r4, #12]
 800dd10:	f04f 30ff 	mov.w	r0, #4294967295
 800dd14:	e7e9      	b.n	800dcea <__ssputs_r+0x8a>
	...

0800dd18 <_svfiprintf_r>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	4698      	mov	r8, r3
 800dd1e:	898b      	ldrh	r3, [r1, #12]
 800dd20:	061b      	lsls	r3, r3, #24
 800dd22:	b09d      	sub	sp, #116	@ 0x74
 800dd24:	4607      	mov	r7, r0
 800dd26:	460d      	mov	r5, r1
 800dd28:	4614      	mov	r4, r2
 800dd2a:	d510      	bpl.n	800dd4e <_svfiprintf_r+0x36>
 800dd2c:	690b      	ldr	r3, [r1, #16]
 800dd2e:	b973      	cbnz	r3, 800dd4e <_svfiprintf_r+0x36>
 800dd30:	2140      	movs	r1, #64	@ 0x40
 800dd32:	f7ff ff09 	bl	800db48 <_malloc_r>
 800dd36:	6028      	str	r0, [r5, #0]
 800dd38:	6128      	str	r0, [r5, #16]
 800dd3a:	b930      	cbnz	r0, 800dd4a <_svfiprintf_r+0x32>
 800dd3c:	230c      	movs	r3, #12
 800dd3e:	603b      	str	r3, [r7, #0]
 800dd40:	f04f 30ff 	mov.w	r0, #4294967295
 800dd44:	b01d      	add	sp, #116	@ 0x74
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	2340      	movs	r3, #64	@ 0x40
 800dd4c:	616b      	str	r3, [r5, #20]
 800dd4e:	2300      	movs	r3, #0
 800dd50:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd52:	2320      	movs	r3, #32
 800dd54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd58:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd5c:	2330      	movs	r3, #48	@ 0x30
 800dd5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800defc <_svfiprintf_r+0x1e4>
 800dd62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd66:	f04f 0901 	mov.w	r9, #1
 800dd6a:	4623      	mov	r3, r4
 800dd6c:	469a      	mov	sl, r3
 800dd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd72:	b10a      	cbz	r2, 800dd78 <_svfiprintf_r+0x60>
 800dd74:	2a25      	cmp	r2, #37	@ 0x25
 800dd76:	d1f9      	bne.n	800dd6c <_svfiprintf_r+0x54>
 800dd78:	ebba 0b04 	subs.w	fp, sl, r4
 800dd7c:	d00b      	beq.n	800dd96 <_svfiprintf_r+0x7e>
 800dd7e:	465b      	mov	r3, fp
 800dd80:	4622      	mov	r2, r4
 800dd82:	4629      	mov	r1, r5
 800dd84:	4638      	mov	r0, r7
 800dd86:	f7ff ff6b 	bl	800dc60 <__ssputs_r>
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	f000 80a7 	beq.w	800dede <_svfiprintf_r+0x1c6>
 800dd90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd92:	445a      	add	r2, fp
 800dd94:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd96:	f89a 3000 	ldrb.w	r3, [sl]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 809f 	beq.w	800dede <_svfiprintf_r+0x1c6>
 800dda0:	2300      	movs	r3, #0
 800dda2:	f04f 32ff 	mov.w	r2, #4294967295
 800dda6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddaa:	f10a 0a01 	add.w	sl, sl, #1
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	9307      	str	r3, [sp, #28]
 800ddb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddb8:	4654      	mov	r4, sl
 800ddba:	2205      	movs	r2, #5
 800ddbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddc0:	484e      	ldr	r0, [pc, #312]	@ (800defc <_svfiprintf_r+0x1e4>)
 800ddc2:	f7f2 fa95 	bl	80002f0 <memchr>
 800ddc6:	9a04      	ldr	r2, [sp, #16]
 800ddc8:	b9d8      	cbnz	r0, 800de02 <_svfiprintf_r+0xea>
 800ddca:	06d0      	lsls	r0, r2, #27
 800ddcc:	bf44      	itt	mi
 800ddce:	2320      	movmi	r3, #32
 800ddd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddd4:	0711      	lsls	r1, r2, #28
 800ddd6:	bf44      	itt	mi
 800ddd8:	232b      	movmi	r3, #43	@ 0x2b
 800ddda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddde:	f89a 3000 	ldrb.w	r3, [sl]
 800dde2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dde4:	d015      	beq.n	800de12 <_svfiprintf_r+0xfa>
 800dde6:	9a07      	ldr	r2, [sp, #28]
 800dde8:	4654      	mov	r4, sl
 800ddea:	2000      	movs	r0, #0
 800ddec:	f04f 0c0a 	mov.w	ip, #10
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddf6:	3b30      	subs	r3, #48	@ 0x30
 800ddf8:	2b09      	cmp	r3, #9
 800ddfa:	d94b      	bls.n	800de94 <_svfiprintf_r+0x17c>
 800ddfc:	b1b0      	cbz	r0, 800de2c <_svfiprintf_r+0x114>
 800ddfe:	9207      	str	r2, [sp, #28]
 800de00:	e014      	b.n	800de2c <_svfiprintf_r+0x114>
 800de02:	eba0 0308 	sub.w	r3, r0, r8
 800de06:	fa09 f303 	lsl.w	r3, r9, r3
 800de0a:	4313      	orrs	r3, r2
 800de0c:	9304      	str	r3, [sp, #16]
 800de0e:	46a2      	mov	sl, r4
 800de10:	e7d2      	b.n	800ddb8 <_svfiprintf_r+0xa0>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	1d19      	adds	r1, r3, #4
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	9103      	str	r1, [sp, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	bfbb      	ittet	lt
 800de1e:	425b      	neglt	r3, r3
 800de20:	f042 0202 	orrlt.w	r2, r2, #2
 800de24:	9307      	strge	r3, [sp, #28]
 800de26:	9307      	strlt	r3, [sp, #28]
 800de28:	bfb8      	it	lt
 800de2a:	9204      	strlt	r2, [sp, #16]
 800de2c:	7823      	ldrb	r3, [r4, #0]
 800de2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800de30:	d10a      	bne.n	800de48 <_svfiprintf_r+0x130>
 800de32:	7863      	ldrb	r3, [r4, #1]
 800de34:	2b2a      	cmp	r3, #42	@ 0x2a
 800de36:	d132      	bne.n	800de9e <_svfiprintf_r+0x186>
 800de38:	9b03      	ldr	r3, [sp, #12]
 800de3a:	1d1a      	adds	r2, r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	9203      	str	r2, [sp, #12]
 800de40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de44:	3402      	adds	r4, #2
 800de46:	9305      	str	r3, [sp, #20]
 800de48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800df0c <_svfiprintf_r+0x1f4>
 800de4c:	7821      	ldrb	r1, [r4, #0]
 800de4e:	2203      	movs	r2, #3
 800de50:	4650      	mov	r0, sl
 800de52:	f7f2 fa4d 	bl	80002f0 <memchr>
 800de56:	b138      	cbz	r0, 800de68 <_svfiprintf_r+0x150>
 800de58:	9b04      	ldr	r3, [sp, #16]
 800de5a:	eba0 000a 	sub.w	r0, r0, sl
 800de5e:	2240      	movs	r2, #64	@ 0x40
 800de60:	4082      	lsls	r2, r0
 800de62:	4313      	orrs	r3, r2
 800de64:	3401      	adds	r4, #1
 800de66:	9304      	str	r3, [sp, #16]
 800de68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6c:	4824      	ldr	r0, [pc, #144]	@ (800df00 <_svfiprintf_r+0x1e8>)
 800de6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de72:	2206      	movs	r2, #6
 800de74:	f7f2 fa3c 	bl	80002f0 <memchr>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d036      	beq.n	800deea <_svfiprintf_r+0x1d2>
 800de7c:	4b21      	ldr	r3, [pc, #132]	@ (800df04 <_svfiprintf_r+0x1ec>)
 800de7e:	bb1b      	cbnz	r3, 800dec8 <_svfiprintf_r+0x1b0>
 800de80:	9b03      	ldr	r3, [sp, #12]
 800de82:	3307      	adds	r3, #7
 800de84:	f023 0307 	bic.w	r3, r3, #7
 800de88:	3308      	adds	r3, #8
 800de8a:	9303      	str	r3, [sp, #12]
 800de8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de8e:	4433      	add	r3, r6
 800de90:	9309      	str	r3, [sp, #36]	@ 0x24
 800de92:	e76a      	b.n	800dd6a <_svfiprintf_r+0x52>
 800de94:	fb0c 3202 	mla	r2, ip, r2, r3
 800de98:	460c      	mov	r4, r1
 800de9a:	2001      	movs	r0, #1
 800de9c:	e7a8      	b.n	800ddf0 <_svfiprintf_r+0xd8>
 800de9e:	2300      	movs	r3, #0
 800dea0:	3401      	adds	r4, #1
 800dea2:	9305      	str	r3, [sp, #20]
 800dea4:	4619      	mov	r1, r3
 800dea6:	f04f 0c0a 	mov.w	ip, #10
 800deaa:	4620      	mov	r0, r4
 800deac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deb0:	3a30      	subs	r2, #48	@ 0x30
 800deb2:	2a09      	cmp	r2, #9
 800deb4:	d903      	bls.n	800debe <_svfiprintf_r+0x1a6>
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0c6      	beq.n	800de48 <_svfiprintf_r+0x130>
 800deba:	9105      	str	r1, [sp, #20]
 800debc:	e7c4      	b.n	800de48 <_svfiprintf_r+0x130>
 800debe:	fb0c 2101 	mla	r1, ip, r1, r2
 800dec2:	4604      	mov	r4, r0
 800dec4:	2301      	movs	r3, #1
 800dec6:	e7f0      	b.n	800deaa <_svfiprintf_r+0x192>
 800dec8:	ab03      	add	r3, sp, #12
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	462a      	mov	r2, r5
 800dece:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <_svfiprintf_r+0x1f0>)
 800ded0:	a904      	add	r1, sp, #16
 800ded2:	4638      	mov	r0, r7
 800ded4:	f3af 8000 	nop.w
 800ded8:	1c42      	adds	r2, r0, #1
 800deda:	4606      	mov	r6, r0
 800dedc:	d1d6      	bne.n	800de8c <_svfiprintf_r+0x174>
 800dede:	89ab      	ldrh	r3, [r5, #12]
 800dee0:	065b      	lsls	r3, r3, #25
 800dee2:	f53f af2d 	bmi.w	800dd40 <_svfiprintf_r+0x28>
 800dee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dee8:	e72c      	b.n	800dd44 <_svfiprintf_r+0x2c>
 800deea:	ab03      	add	r3, sp, #12
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	462a      	mov	r2, r5
 800def0:	4b05      	ldr	r3, [pc, #20]	@ (800df08 <_svfiprintf_r+0x1f0>)
 800def2:	a904      	add	r1, sp, #16
 800def4:	4638      	mov	r0, r7
 800def6:	f000 f9bb 	bl	800e270 <_printf_i>
 800defa:	e7ed      	b.n	800ded8 <_svfiprintf_r+0x1c0>
 800defc:	0800ebe4 	.word	0x0800ebe4
 800df00:	0800ebee 	.word	0x0800ebee
 800df04:	00000000 	.word	0x00000000
 800df08:	0800dc61 	.word	0x0800dc61
 800df0c:	0800ebea 	.word	0x0800ebea

0800df10 <__sfputc_r>:
 800df10:	6893      	ldr	r3, [r2, #8]
 800df12:	3b01      	subs	r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	b410      	push	{r4}
 800df18:	6093      	str	r3, [r2, #8]
 800df1a:	da08      	bge.n	800df2e <__sfputc_r+0x1e>
 800df1c:	6994      	ldr	r4, [r2, #24]
 800df1e:	42a3      	cmp	r3, r4
 800df20:	db01      	blt.n	800df26 <__sfputc_r+0x16>
 800df22:	290a      	cmp	r1, #10
 800df24:	d103      	bne.n	800df2e <__sfputc_r+0x1e>
 800df26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df2a:	f000 bb6d 	b.w	800e608 <__swbuf_r>
 800df2e:	6813      	ldr	r3, [r2, #0]
 800df30:	1c58      	adds	r0, r3, #1
 800df32:	6010      	str	r0, [r2, #0]
 800df34:	7019      	strb	r1, [r3, #0]
 800df36:	4608      	mov	r0, r1
 800df38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <__sfputs_r>:
 800df3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df40:	4606      	mov	r6, r0
 800df42:	460f      	mov	r7, r1
 800df44:	4614      	mov	r4, r2
 800df46:	18d5      	adds	r5, r2, r3
 800df48:	42ac      	cmp	r4, r5
 800df4a:	d101      	bne.n	800df50 <__sfputs_r+0x12>
 800df4c:	2000      	movs	r0, #0
 800df4e:	e007      	b.n	800df60 <__sfputs_r+0x22>
 800df50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df54:	463a      	mov	r2, r7
 800df56:	4630      	mov	r0, r6
 800df58:	f7ff ffda 	bl	800df10 <__sfputc_r>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d1f3      	bne.n	800df48 <__sfputs_r+0xa>
 800df60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df64 <_vfiprintf_r>:
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	460d      	mov	r5, r1
 800df6a:	b09d      	sub	sp, #116	@ 0x74
 800df6c:	4614      	mov	r4, r2
 800df6e:	4698      	mov	r8, r3
 800df70:	4606      	mov	r6, r0
 800df72:	b118      	cbz	r0, 800df7c <_vfiprintf_r+0x18>
 800df74:	6a03      	ldr	r3, [r0, #32]
 800df76:	b90b      	cbnz	r3, 800df7c <_vfiprintf_r+0x18>
 800df78:	f7ff fc30 	bl	800d7dc <__sinit>
 800df7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df7e:	07d9      	lsls	r1, r3, #31
 800df80:	d405      	bmi.n	800df8e <_vfiprintf_r+0x2a>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	059a      	lsls	r2, r3, #22
 800df86:	d402      	bmi.n	800df8e <_vfiprintf_r+0x2a>
 800df88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df8a:	f7ff fd60 	bl	800da4e <__retarget_lock_acquire_recursive>
 800df8e:	89ab      	ldrh	r3, [r5, #12]
 800df90:	071b      	lsls	r3, r3, #28
 800df92:	d501      	bpl.n	800df98 <_vfiprintf_r+0x34>
 800df94:	692b      	ldr	r3, [r5, #16]
 800df96:	b99b      	cbnz	r3, 800dfc0 <_vfiprintf_r+0x5c>
 800df98:	4629      	mov	r1, r5
 800df9a:	4630      	mov	r0, r6
 800df9c:	f000 fb72 	bl	800e684 <__swsetup_r>
 800dfa0:	b170      	cbz	r0, 800dfc0 <_vfiprintf_r+0x5c>
 800dfa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfa4:	07dc      	lsls	r4, r3, #31
 800dfa6:	d504      	bpl.n	800dfb2 <_vfiprintf_r+0x4e>
 800dfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfac:	b01d      	add	sp, #116	@ 0x74
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	89ab      	ldrh	r3, [r5, #12]
 800dfb4:	0598      	lsls	r0, r3, #22
 800dfb6:	d4f7      	bmi.n	800dfa8 <_vfiprintf_r+0x44>
 800dfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfba:	f7ff fd49 	bl	800da50 <__retarget_lock_release_recursive>
 800dfbe:	e7f3      	b.n	800dfa8 <_vfiprintf_r+0x44>
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfc4:	2320      	movs	r3, #32
 800dfc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfce:	2330      	movs	r3, #48	@ 0x30
 800dfd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e180 <_vfiprintf_r+0x21c>
 800dfd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfd8:	f04f 0901 	mov.w	r9, #1
 800dfdc:	4623      	mov	r3, r4
 800dfde:	469a      	mov	sl, r3
 800dfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfe4:	b10a      	cbz	r2, 800dfea <_vfiprintf_r+0x86>
 800dfe6:	2a25      	cmp	r2, #37	@ 0x25
 800dfe8:	d1f9      	bne.n	800dfde <_vfiprintf_r+0x7a>
 800dfea:	ebba 0b04 	subs.w	fp, sl, r4
 800dfee:	d00b      	beq.n	800e008 <_vfiprintf_r+0xa4>
 800dff0:	465b      	mov	r3, fp
 800dff2:	4622      	mov	r2, r4
 800dff4:	4629      	mov	r1, r5
 800dff6:	4630      	mov	r0, r6
 800dff8:	f7ff ffa1 	bl	800df3e <__sfputs_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	f000 80a7 	beq.w	800e150 <_vfiprintf_r+0x1ec>
 800e002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e004:	445a      	add	r2, fp
 800e006:	9209      	str	r2, [sp, #36]	@ 0x24
 800e008:	f89a 3000 	ldrb.w	r3, [sl]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 809f 	beq.w	800e150 <_vfiprintf_r+0x1ec>
 800e012:	2300      	movs	r3, #0
 800e014:	f04f 32ff 	mov.w	r2, #4294967295
 800e018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e01c:	f10a 0a01 	add.w	sl, sl, #1
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	9307      	str	r3, [sp, #28]
 800e024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e028:	931a      	str	r3, [sp, #104]	@ 0x68
 800e02a:	4654      	mov	r4, sl
 800e02c:	2205      	movs	r2, #5
 800e02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e032:	4853      	ldr	r0, [pc, #332]	@ (800e180 <_vfiprintf_r+0x21c>)
 800e034:	f7f2 f95c 	bl	80002f0 <memchr>
 800e038:	9a04      	ldr	r2, [sp, #16]
 800e03a:	b9d8      	cbnz	r0, 800e074 <_vfiprintf_r+0x110>
 800e03c:	06d1      	lsls	r1, r2, #27
 800e03e:	bf44      	itt	mi
 800e040:	2320      	movmi	r3, #32
 800e042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e046:	0713      	lsls	r3, r2, #28
 800e048:	bf44      	itt	mi
 800e04a:	232b      	movmi	r3, #43	@ 0x2b
 800e04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e050:	f89a 3000 	ldrb.w	r3, [sl]
 800e054:	2b2a      	cmp	r3, #42	@ 0x2a
 800e056:	d015      	beq.n	800e084 <_vfiprintf_r+0x120>
 800e058:	9a07      	ldr	r2, [sp, #28]
 800e05a:	4654      	mov	r4, sl
 800e05c:	2000      	movs	r0, #0
 800e05e:	f04f 0c0a 	mov.w	ip, #10
 800e062:	4621      	mov	r1, r4
 800e064:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e068:	3b30      	subs	r3, #48	@ 0x30
 800e06a:	2b09      	cmp	r3, #9
 800e06c:	d94b      	bls.n	800e106 <_vfiprintf_r+0x1a2>
 800e06e:	b1b0      	cbz	r0, 800e09e <_vfiprintf_r+0x13a>
 800e070:	9207      	str	r2, [sp, #28]
 800e072:	e014      	b.n	800e09e <_vfiprintf_r+0x13a>
 800e074:	eba0 0308 	sub.w	r3, r0, r8
 800e078:	fa09 f303 	lsl.w	r3, r9, r3
 800e07c:	4313      	orrs	r3, r2
 800e07e:	9304      	str	r3, [sp, #16]
 800e080:	46a2      	mov	sl, r4
 800e082:	e7d2      	b.n	800e02a <_vfiprintf_r+0xc6>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	1d19      	adds	r1, r3, #4
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	9103      	str	r1, [sp, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	bfbb      	ittet	lt
 800e090:	425b      	neglt	r3, r3
 800e092:	f042 0202 	orrlt.w	r2, r2, #2
 800e096:	9307      	strge	r3, [sp, #28]
 800e098:	9307      	strlt	r3, [sp, #28]
 800e09a:	bfb8      	it	lt
 800e09c:	9204      	strlt	r2, [sp, #16]
 800e09e:	7823      	ldrb	r3, [r4, #0]
 800e0a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0a2:	d10a      	bne.n	800e0ba <_vfiprintf_r+0x156>
 800e0a4:	7863      	ldrb	r3, [r4, #1]
 800e0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0a8:	d132      	bne.n	800e110 <_vfiprintf_r+0x1ac>
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	1d1a      	adds	r2, r3, #4
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	9203      	str	r2, [sp, #12]
 800e0b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0b6:	3402      	adds	r4, #2
 800e0b8:	9305      	str	r3, [sp, #20]
 800e0ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e190 <_vfiprintf_r+0x22c>
 800e0be:	7821      	ldrb	r1, [r4, #0]
 800e0c0:	2203      	movs	r2, #3
 800e0c2:	4650      	mov	r0, sl
 800e0c4:	f7f2 f914 	bl	80002f0 <memchr>
 800e0c8:	b138      	cbz	r0, 800e0da <_vfiprintf_r+0x176>
 800e0ca:	9b04      	ldr	r3, [sp, #16]
 800e0cc:	eba0 000a 	sub.w	r0, r0, sl
 800e0d0:	2240      	movs	r2, #64	@ 0x40
 800e0d2:	4082      	lsls	r2, r0
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	3401      	adds	r4, #1
 800e0d8:	9304      	str	r3, [sp, #16]
 800e0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0de:	4829      	ldr	r0, [pc, #164]	@ (800e184 <_vfiprintf_r+0x220>)
 800e0e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0e4:	2206      	movs	r2, #6
 800e0e6:	f7f2 f903 	bl	80002f0 <memchr>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d03f      	beq.n	800e16e <_vfiprintf_r+0x20a>
 800e0ee:	4b26      	ldr	r3, [pc, #152]	@ (800e188 <_vfiprintf_r+0x224>)
 800e0f0:	bb1b      	cbnz	r3, 800e13a <_vfiprintf_r+0x1d6>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	3307      	adds	r3, #7
 800e0f6:	f023 0307 	bic.w	r3, r3, #7
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	9303      	str	r3, [sp, #12]
 800e0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e100:	443b      	add	r3, r7
 800e102:	9309      	str	r3, [sp, #36]	@ 0x24
 800e104:	e76a      	b.n	800dfdc <_vfiprintf_r+0x78>
 800e106:	fb0c 3202 	mla	r2, ip, r2, r3
 800e10a:	460c      	mov	r4, r1
 800e10c:	2001      	movs	r0, #1
 800e10e:	e7a8      	b.n	800e062 <_vfiprintf_r+0xfe>
 800e110:	2300      	movs	r3, #0
 800e112:	3401      	adds	r4, #1
 800e114:	9305      	str	r3, [sp, #20]
 800e116:	4619      	mov	r1, r3
 800e118:	f04f 0c0a 	mov.w	ip, #10
 800e11c:	4620      	mov	r0, r4
 800e11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e122:	3a30      	subs	r2, #48	@ 0x30
 800e124:	2a09      	cmp	r2, #9
 800e126:	d903      	bls.n	800e130 <_vfiprintf_r+0x1cc>
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0c6      	beq.n	800e0ba <_vfiprintf_r+0x156>
 800e12c:	9105      	str	r1, [sp, #20]
 800e12e:	e7c4      	b.n	800e0ba <_vfiprintf_r+0x156>
 800e130:	fb0c 2101 	mla	r1, ip, r1, r2
 800e134:	4604      	mov	r4, r0
 800e136:	2301      	movs	r3, #1
 800e138:	e7f0      	b.n	800e11c <_vfiprintf_r+0x1b8>
 800e13a:	ab03      	add	r3, sp, #12
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	462a      	mov	r2, r5
 800e140:	4b12      	ldr	r3, [pc, #72]	@ (800e18c <_vfiprintf_r+0x228>)
 800e142:	a904      	add	r1, sp, #16
 800e144:	4630      	mov	r0, r6
 800e146:	f3af 8000 	nop.w
 800e14a:	4607      	mov	r7, r0
 800e14c:	1c78      	adds	r0, r7, #1
 800e14e:	d1d6      	bne.n	800e0fe <_vfiprintf_r+0x19a>
 800e150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e152:	07d9      	lsls	r1, r3, #31
 800e154:	d405      	bmi.n	800e162 <_vfiprintf_r+0x1fe>
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	059a      	lsls	r2, r3, #22
 800e15a:	d402      	bmi.n	800e162 <_vfiprintf_r+0x1fe>
 800e15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e15e:	f7ff fc77 	bl	800da50 <__retarget_lock_release_recursive>
 800e162:	89ab      	ldrh	r3, [r5, #12]
 800e164:	065b      	lsls	r3, r3, #25
 800e166:	f53f af1f 	bmi.w	800dfa8 <_vfiprintf_r+0x44>
 800e16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e16c:	e71e      	b.n	800dfac <_vfiprintf_r+0x48>
 800e16e:	ab03      	add	r3, sp, #12
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	462a      	mov	r2, r5
 800e174:	4b05      	ldr	r3, [pc, #20]	@ (800e18c <_vfiprintf_r+0x228>)
 800e176:	a904      	add	r1, sp, #16
 800e178:	4630      	mov	r0, r6
 800e17a:	f000 f879 	bl	800e270 <_printf_i>
 800e17e:	e7e4      	b.n	800e14a <_vfiprintf_r+0x1e6>
 800e180:	0800ebe4 	.word	0x0800ebe4
 800e184:	0800ebee 	.word	0x0800ebee
 800e188:	00000000 	.word	0x00000000
 800e18c:	0800df3f 	.word	0x0800df3f
 800e190:	0800ebea 	.word	0x0800ebea

0800e194 <_printf_common>:
 800e194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e198:	4616      	mov	r6, r2
 800e19a:	4698      	mov	r8, r3
 800e19c:	688a      	ldr	r2, [r1, #8]
 800e19e:	690b      	ldr	r3, [r1, #16]
 800e1a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	bfb8      	it	lt
 800e1a8:	4613      	movlt	r3, r2
 800e1aa:	6033      	str	r3, [r6, #0]
 800e1ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	b10a      	cbz	r2, 800e1ba <_printf_common+0x26>
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	6033      	str	r3, [r6, #0]
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	0699      	lsls	r1, r3, #26
 800e1be:	bf42      	ittt	mi
 800e1c0:	6833      	ldrmi	r3, [r6, #0]
 800e1c2:	3302      	addmi	r3, #2
 800e1c4:	6033      	strmi	r3, [r6, #0]
 800e1c6:	6825      	ldr	r5, [r4, #0]
 800e1c8:	f015 0506 	ands.w	r5, r5, #6
 800e1cc:	d106      	bne.n	800e1dc <_printf_common+0x48>
 800e1ce:	f104 0a19 	add.w	sl, r4, #25
 800e1d2:	68e3      	ldr	r3, [r4, #12]
 800e1d4:	6832      	ldr	r2, [r6, #0]
 800e1d6:	1a9b      	subs	r3, r3, r2
 800e1d8:	42ab      	cmp	r3, r5
 800e1da:	dc26      	bgt.n	800e22a <_printf_common+0x96>
 800e1dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1e0:	6822      	ldr	r2, [r4, #0]
 800e1e2:	3b00      	subs	r3, #0
 800e1e4:	bf18      	it	ne
 800e1e6:	2301      	movne	r3, #1
 800e1e8:	0692      	lsls	r2, r2, #26
 800e1ea:	d42b      	bmi.n	800e244 <_printf_common+0xb0>
 800e1ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1f0:	4641      	mov	r1, r8
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	47c8      	blx	r9
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	d01e      	beq.n	800e238 <_printf_common+0xa4>
 800e1fa:	6823      	ldr	r3, [r4, #0]
 800e1fc:	6922      	ldr	r2, [r4, #16]
 800e1fe:	f003 0306 	and.w	r3, r3, #6
 800e202:	2b04      	cmp	r3, #4
 800e204:	bf02      	ittt	eq
 800e206:	68e5      	ldreq	r5, [r4, #12]
 800e208:	6833      	ldreq	r3, [r6, #0]
 800e20a:	1aed      	subeq	r5, r5, r3
 800e20c:	68a3      	ldr	r3, [r4, #8]
 800e20e:	bf0c      	ite	eq
 800e210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e214:	2500      	movne	r5, #0
 800e216:	4293      	cmp	r3, r2
 800e218:	bfc4      	itt	gt
 800e21a:	1a9b      	subgt	r3, r3, r2
 800e21c:	18ed      	addgt	r5, r5, r3
 800e21e:	2600      	movs	r6, #0
 800e220:	341a      	adds	r4, #26
 800e222:	42b5      	cmp	r5, r6
 800e224:	d11a      	bne.n	800e25c <_printf_common+0xc8>
 800e226:	2000      	movs	r0, #0
 800e228:	e008      	b.n	800e23c <_printf_common+0xa8>
 800e22a:	2301      	movs	r3, #1
 800e22c:	4652      	mov	r2, sl
 800e22e:	4641      	mov	r1, r8
 800e230:	4638      	mov	r0, r7
 800e232:	47c8      	blx	r9
 800e234:	3001      	adds	r0, #1
 800e236:	d103      	bne.n	800e240 <_printf_common+0xac>
 800e238:	f04f 30ff 	mov.w	r0, #4294967295
 800e23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e240:	3501      	adds	r5, #1
 800e242:	e7c6      	b.n	800e1d2 <_printf_common+0x3e>
 800e244:	18e1      	adds	r1, r4, r3
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	2030      	movs	r0, #48	@ 0x30
 800e24a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e24e:	4422      	add	r2, r4
 800e250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e258:	3302      	adds	r3, #2
 800e25a:	e7c7      	b.n	800e1ec <_printf_common+0x58>
 800e25c:	2301      	movs	r3, #1
 800e25e:	4622      	mov	r2, r4
 800e260:	4641      	mov	r1, r8
 800e262:	4638      	mov	r0, r7
 800e264:	47c8      	blx	r9
 800e266:	3001      	adds	r0, #1
 800e268:	d0e6      	beq.n	800e238 <_printf_common+0xa4>
 800e26a:	3601      	adds	r6, #1
 800e26c:	e7d9      	b.n	800e222 <_printf_common+0x8e>
	...

0800e270 <_printf_i>:
 800e270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e274:	7e0f      	ldrb	r7, [r1, #24]
 800e276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e278:	2f78      	cmp	r7, #120	@ 0x78
 800e27a:	4691      	mov	r9, r2
 800e27c:	4680      	mov	r8, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	469a      	mov	sl, r3
 800e282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e286:	d807      	bhi.n	800e298 <_printf_i+0x28>
 800e288:	2f62      	cmp	r7, #98	@ 0x62
 800e28a:	d80a      	bhi.n	800e2a2 <_printf_i+0x32>
 800e28c:	2f00      	cmp	r7, #0
 800e28e:	f000 80d2 	beq.w	800e436 <_printf_i+0x1c6>
 800e292:	2f58      	cmp	r7, #88	@ 0x58
 800e294:	f000 80b9 	beq.w	800e40a <_printf_i+0x19a>
 800e298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e29c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2a0:	e03a      	b.n	800e318 <_printf_i+0xa8>
 800e2a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2a6:	2b15      	cmp	r3, #21
 800e2a8:	d8f6      	bhi.n	800e298 <_printf_i+0x28>
 800e2aa:	a101      	add	r1, pc, #4	@ (adr r1, 800e2b0 <_printf_i+0x40>)
 800e2ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2b0:	0800e309 	.word	0x0800e309
 800e2b4:	0800e31d 	.word	0x0800e31d
 800e2b8:	0800e299 	.word	0x0800e299
 800e2bc:	0800e299 	.word	0x0800e299
 800e2c0:	0800e299 	.word	0x0800e299
 800e2c4:	0800e299 	.word	0x0800e299
 800e2c8:	0800e31d 	.word	0x0800e31d
 800e2cc:	0800e299 	.word	0x0800e299
 800e2d0:	0800e299 	.word	0x0800e299
 800e2d4:	0800e299 	.word	0x0800e299
 800e2d8:	0800e299 	.word	0x0800e299
 800e2dc:	0800e41d 	.word	0x0800e41d
 800e2e0:	0800e347 	.word	0x0800e347
 800e2e4:	0800e3d7 	.word	0x0800e3d7
 800e2e8:	0800e299 	.word	0x0800e299
 800e2ec:	0800e299 	.word	0x0800e299
 800e2f0:	0800e43f 	.word	0x0800e43f
 800e2f4:	0800e299 	.word	0x0800e299
 800e2f8:	0800e347 	.word	0x0800e347
 800e2fc:	0800e299 	.word	0x0800e299
 800e300:	0800e299 	.word	0x0800e299
 800e304:	0800e3df 	.word	0x0800e3df
 800e308:	6833      	ldr	r3, [r6, #0]
 800e30a:	1d1a      	adds	r2, r3, #4
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	6032      	str	r2, [r6, #0]
 800e310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e318:	2301      	movs	r3, #1
 800e31a:	e09d      	b.n	800e458 <_printf_i+0x1e8>
 800e31c:	6833      	ldr	r3, [r6, #0]
 800e31e:	6820      	ldr	r0, [r4, #0]
 800e320:	1d19      	adds	r1, r3, #4
 800e322:	6031      	str	r1, [r6, #0]
 800e324:	0606      	lsls	r6, r0, #24
 800e326:	d501      	bpl.n	800e32c <_printf_i+0xbc>
 800e328:	681d      	ldr	r5, [r3, #0]
 800e32a:	e003      	b.n	800e334 <_printf_i+0xc4>
 800e32c:	0645      	lsls	r5, r0, #25
 800e32e:	d5fb      	bpl.n	800e328 <_printf_i+0xb8>
 800e330:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e334:	2d00      	cmp	r5, #0
 800e336:	da03      	bge.n	800e340 <_printf_i+0xd0>
 800e338:	232d      	movs	r3, #45	@ 0x2d
 800e33a:	426d      	negs	r5, r5
 800e33c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e340:	4859      	ldr	r0, [pc, #356]	@ (800e4a8 <_printf_i+0x238>)
 800e342:	230a      	movs	r3, #10
 800e344:	e011      	b.n	800e36a <_printf_i+0xfa>
 800e346:	6821      	ldr	r1, [r4, #0]
 800e348:	6833      	ldr	r3, [r6, #0]
 800e34a:	0608      	lsls	r0, r1, #24
 800e34c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e350:	d402      	bmi.n	800e358 <_printf_i+0xe8>
 800e352:	0649      	lsls	r1, r1, #25
 800e354:	bf48      	it	mi
 800e356:	b2ad      	uxthmi	r5, r5
 800e358:	2f6f      	cmp	r7, #111	@ 0x6f
 800e35a:	4853      	ldr	r0, [pc, #332]	@ (800e4a8 <_printf_i+0x238>)
 800e35c:	6033      	str	r3, [r6, #0]
 800e35e:	bf14      	ite	ne
 800e360:	230a      	movne	r3, #10
 800e362:	2308      	moveq	r3, #8
 800e364:	2100      	movs	r1, #0
 800e366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e36a:	6866      	ldr	r6, [r4, #4]
 800e36c:	60a6      	str	r6, [r4, #8]
 800e36e:	2e00      	cmp	r6, #0
 800e370:	bfa2      	ittt	ge
 800e372:	6821      	ldrge	r1, [r4, #0]
 800e374:	f021 0104 	bicge.w	r1, r1, #4
 800e378:	6021      	strge	r1, [r4, #0]
 800e37a:	b90d      	cbnz	r5, 800e380 <_printf_i+0x110>
 800e37c:	2e00      	cmp	r6, #0
 800e37e:	d04b      	beq.n	800e418 <_printf_i+0x1a8>
 800e380:	4616      	mov	r6, r2
 800e382:	fbb5 f1f3 	udiv	r1, r5, r3
 800e386:	fb03 5711 	mls	r7, r3, r1, r5
 800e38a:	5dc7      	ldrb	r7, [r0, r7]
 800e38c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e390:	462f      	mov	r7, r5
 800e392:	42bb      	cmp	r3, r7
 800e394:	460d      	mov	r5, r1
 800e396:	d9f4      	bls.n	800e382 <_printf_i+0x112>
 800e398:	2b08      	cmp	r3, #8
 800e39a:	d10b      	bne.n	800e3b4 <_printf_i+0x144>
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	07df      	lsls	r7, r3, #31
 800e3a0:	d508      	bpl.n	800e3b4 <_printf_i+0x144>
 800e3a2:	6923      	ldr	r3, [r4, #16]
 800e3a4:	6861      	ldr	r1, [r4, #4]
 800e3a6:	4299      	cmp	r1, r3
 800e3a8:	bfde      	ittt	le
 800e3aa:	2330      	movle	r3, #48	@ 0x30
 800e3ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3b4:	1b92      	subs	r2, r2, r6
 800e3b6:	6122      	str	r2, [r4, #16]
 800e3b8:	f8cd a000 	str.w	sl, [sp]
 800e3bc:	464b      	mov	r3, r9
 800e3be:	aa03      	add	r2, sp, #12
 800e3c0:	4621      	mov	r1, r4
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	f7ff fee6 	bl	800e194 <_printf_common>
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d14a      	bne.n	800e462 <_printf_i+0x1f2>
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d0:	b004      	add	sp, #16
 800e3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d6:	6823      	ldr	r3, [r4, #0]
 800e3d8:	f043 0320 	orr.w	r3, r3, #32
 800e3dc:	6023      	str	r3, [r4, #0]
 800e3de:	4833      	ldr	r0, [pc, #204]	@ (800e4ac <_printf_i+0x23c>)
 800e3e0:	2778      	movs	r7, #120	@ 0x78
 800e3e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3e6:	6823      	ldr	r3, [r4, #0]
 800e3e8:	6831      	ldr	r1, [r6, #0]
 800e3ea:	061f      	lsls	r7, r3, #24
 800e3ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3f0:	d402      	bmi.n	800e3f8 <_printf_i+0x188>
 800e3f2:	065f      	lsls	r7, r3, #25
 800e3f4:	bf48      	it	mi
 800e3f6:	b2ad      	uxthmi	r5, r5
 800e3f8:	6031      	str	r1, [r6, #0]
 800e3fa:	07d9      	lsls	r1, r3, #31
 800e3fc:	bf44      	itt	mi
 800e3fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e402:	6023      	strmi	r3, [r4, #0]
 800e404:	b11d      	cbz	r5, 800e40e <_printf_i+0x19e>
 800e406:	2310      	movs	r3, #16
 800e408:	e7ac      	b.n	800e364 <_printf_i+0xf4>
 800e40a:	4827      	ldr	r0, [pc, #156]	@ (800e4a8 <_printf_i+0x238>)
 800e40c:	e7e9      	b.n	800e3e2 <_printf_i+0x172>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	f023 0320 	bic.w	r3, r3, #32
 800e414:	6023      	str	r3, [r4, #0]
 800e416:	e7f6      	b.n	800e406 <_printf_i+0x196>
 800e418:	4616      	mov	r6, r2
 800e41a:	e7bd      	b.n	800e398 <_printf_i+0x128>
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	6825      	ldr	r5, [r4, #0]
 800e420:	6961      	ldr	r1, [r4, #20]
 800e422:	1d18      	adds	r0, r3, #4
 800e424:	6030      	str	r0, [r6, #0]
 800e426:	062e      	lsls	r6, r5, #24
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	d501      	bpl.n	800e430 <_printf_i+0x1c0>
 800e42c:	6019      	str	r1, [r3, #0]
 800e42e:	e002      	b.n	800e436 <_printf_i+0x1c6>
 800e430:	0668      	lsls	r0, r5, #25
 800e432:	d5fb      	bpl.n	800e42c <_printf_i+0x1bc>
 800e434:	8019      	strh	r1, [r3, #0]
 800e436:	2300      	movs	r3, #0
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	4616      	mov	r6, r2
 800e43c:	e7bc      	b.n	800e3b8 <_printf_i+0x148>
 800e43e:	6833      	ldr	r3, [r6, #0]
 800e440:	1d1a      	adds	r2, r3, #4
 800e442:	6032      	str	r2, [r6, #0]
 800e444:	681e      	ldr	r6, [r3, #0]
 800e446:	6862      	ldr	r2, [r4, #4]
 800e448:	2100      	movs	r1, #0
 800e44a:	4630      	mov	r0, r6
 800e44c:	f7f1 ff50 	bl	80002f0 <memchr>
 800e450:	b108      	cbz	r0, 800e456 <_printf_i+0x1e6>
 800e452:	1b80      	subs	r0, r0, r6
 800e454:	6060      	str	r0, [r4, #4]
 800e456:	6863      	ldr	r3, [r4, #4]
 800e458:	6123      	str	r3, [r4, #16]
 800e45a:	2300      	movs	r3, #0
 800e45c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e460:	e7aa      	b.n	800e3b8 <_printf_i+0x148>
 800e462:	6923      	ldr	r3, [r4, #16]
 800e464:	4632      	mov	r2, r6
 800e466:	4649      	mov	r1, r9
 800e468:	4640      	mov	r0, r8
 800e46a:	47d0      	blx	sl
 800e46c:	3001      	adds	r0, #1
 800e46e:	d0ad      	beq.n	800e3cc <_printf_i+0x15c>
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	079b      	lsls	r3, r3, #30
 800e474:	d413      	bmi.n	800e49e <_printf_i+0x22e>
 800e476:	68e0      	ldr	r0, [r4, #12]
 800e478:	9b03      	ldr	r3, [sp, #12]
 800e47a:	4298      	cmp	r0, r3
 800e47c:	bfb8      	it	lt
 800e47e:	4618      	movlt	r0, r3
 800e480:	e7a6      	b.n	800e3d0 <_printf_i+0x160>
 800e482:	2301      	movs	r3, #1
 800e484:	4632      	mov	r2, r6
 800e486:	4649      	mov	r1, r9
 800e488:	4640      	mov	r0, r8
 800e48a:	47d0      	blx	sl
 800e48c:	3001      	adds	r0, #1
 800e48e:	d09d      	beq.n	800e3cc <_printf_i+0x15c>
 800e490:	3501      	adds	r5, #1
 800e492:	68e3      	ldr	r3, [r4, #12]
 800e494:	9903      	ldr	r1, [sp, #12]
 800e496:	1a5b      	subs	r3, r3, r1
 800e498:	42ab      	cmp	r3, r5
 800e49a:	dcf2      	bgt.n	800e482 <_printf_i+0x212>
 800e49c:	e7eb      	b.n	800e476 <_printf_i+0x206>
 800e49e:	2500      	movs	r5, #0
 800e4a0:	f104 0619 	add.w	r6, r4, #25
 800e4a4:	e7f5      	b.n	800e492 <_printf_i+0x222>
 800e4a6:	bf00      	nop
 800e4a8:	0800ebf5 	.word	0x0800ebf5
 800e4ac:	0800ec06 	.word	0x0800ec06

0800e4b0 <__sflush_r>:
 800e4b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b8:	0716      	lsls	r6, r2, #28
 800e4ba:	4605      	mov	r5, r0
 800e4bc:	460c      	mov	r4, r1
 800e4be:	d454      	bmi.n	800e56a <__sflush_r+0xba>
 800e4c0:	684b      	ldr	r3, [r1, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	dc02      	bgt.n	800e4cc <__sflush_r+0x1c>
 800e4c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd48      	ble.n	800e55e <__sflush_r+0xae>
 800e4cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	d045      	beq.n	800e55e <__sflush_r+0xae>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4d8:	682f      	ldr	r7, [r5, #0]
 800e4da:	6a21      	ldr	r1, [r4, #32]
 800e4dc:	602b      	str	r3, [r5, #0]
 800e4de:	d030      	beq.n	800e542 <__sflush_r+0x92>
 800e4e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4e2:	89a3      	ldrh	r3, [r4, #12]
 800e4e4:	0759      	lsls	r1, r3, #29
 800e4e6:	d505      	bpl.n	800e4f4 <__sflush_r+0x44>
 800e4e8:	6863      	ldr	r3, [r4, #4]
 800e4ea:	1ad2      	subs	r2, r2, r3
 800e4ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4ee:	b10b      	cbz	r3, 800e4f4 <__sflush_r+0x44>
 800e4f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4f2:	1ad2      	subs	r2, r2, r3
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4f8:	6a21      	ldr	r1, [r4, #32]
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	47b0      	blx	r6
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	d106      	bne.n	800e512 <__sflush_r+0x62>
 800e504:	6829      	ldr	r1, [r5, #0]
 800e506:	291d      	cmp	r1, #29
 800e508:	d82b      	bhi.n	800e562 <__sflush_r+0xb2>
 800e50a:	4a2a      	ldr	r2, [pc, #168]	@ (800e5b4 <__sflush_r+0x104>)
 800e50c:	410a      	asrs	r2, r1
 800e50e:	07d6      	lsls	r6, r2, #31
 800e510:	d427      	bmi.n	800e562 <__sflush_r+0xb2>
 800e512:	2200      	movs	r2, #0
 800e514:	6062      	str	r2, [r4, #4]
 800e516:	04d9      	lsls	r1, r3, #19
 800e518:	6922      	ldr	r2, [r4, #16]
 800e51a:	6022      	str	r2, [r4, #0]
 800e51c:	d504      	bpl.n	800e528 <__sflush_r+0x78>
 800e51e:	1c42      	adds	r2, r0, #1
 800e520:	d101      	bne.n	800e526 <__sflush_r+0x76>
 800e522:	682b      	ldr	r3, [r5, #0]
 800e524:	b903      	cbnz	r3, 800e528 <__sflush_r+0x78>
 800e526:	6560      	str	r0, [r4, #84]	@ 0x54
 800e528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e52a:	602f      	str	r7, [r5, #0]
 800e52c:	b1b9      	cbz	r1, 800e55e <__sflush_r+0xae>
 800e52e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e532:	4299      	cmp	r1, r3
 800e534:	d002      	beq.n	800e53c <__sflush_r+0x8c>
 800e536:	4628      	mov	r0, r5
 800e538:	f7ff fa9a 	bl	800da70 <_free_r>
 800e53c:	2300      	movs	r3, #0
 800e53e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e540:	e00d      	b.n	800e55e <__sflush_r+0xae>
 800e542:	2301      	movs	r3, #1
 800e544:	4628      	mov	r0, r5
 800e546:	47b0      	blx	r6
 800e548:	4602      	mov	r2, r0
 800e54a:	1c50      	adds	r0, r2, #1
 800e54c:	d1c9      	bne.n	800e4e2 <__sflush_r+0x32>
 800e54e:	682b      	ldr	r3, [r5, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d0c6      	beq.n	800e4e2 <__sflush_r+0x32>
 800e554:	2b1d      	cmp	r3, #29
 800e556:	d001      	beq.n	800e55c <__sflush_r+0xac>
 800e558:	2b16      	cmp	r3, #22
 800e55a:	d11e      	bne.n	800e59a <__sflush_r+0xea>
 800e55c:	602f      	str	r7, [r5, #0]
 800e55e:	2000      	movs	r0, #0
 800e560:	e022      	b.n	800e5a8 <__sflush_r+0xf8>
 800e562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e566:	b21b      	sxth	r3, r3
 800e568:	e01b      	b.n	800e5a2 <__sflush_r+0xf2>
 800e56a:	690f      	ldr	r7, [r1, #16]
 800e56c:	2f00      	cmp	r7, #0
 800e56e:	d0f6      	beq.n	800e55e <__sflush_r+0xae>
 800e570:	0793      	lsls	r3, r2, #30
 800e572:	680e      	ldr	r6, [r1, #0]
 800e574:	bf08      	it	eq
 800e576:	694b      	ldreq	r3, [r1, #20]
 800e578:	600f      	str	r7, [r1, #0]
 800e57a:	bf18      	it	ne
 800e57c:	2300      	movne	r3, #0
 800e57e:	eba6 0807 	sub.w	r8, r6, r7
 800e582:	608b      	str	r3, [r1, #8]
 800e584:	f1b8 0f00 	cmp.w	r8, #0
 800e588:	dde9      	ble.n	800e55e <__sflush_r+0xae>
 800e58a:	6a21      	ldr	r1, [r4, #32]
 800e58c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e58e:	4643      	mov	r3, r8
 800e590:	463a      	mov	r2, r7
 800e592:	4628      	mov	r0, r5
 800e594:	47b0      	blx	r6
 800e596:	2800      	cmp	r0, #0
 800e598:	dc08      	bgt.n	800e5ac <__sflush_r+0xfc>
 800e59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5a2:	81a3      	strh	r3, [r4, #12]
 800e5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ac:	4407      	add	r7, r0
 800e5ae:	eba8 0800 	sub.w	r8, r8, r0
 800e5b2:	e7e7      	b.n	800e584 <__sflush_r+0xd4>
 800e5b4:	dfbffffe 	.word	0xdfbffffe

0800e5b8 <_fflush_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	690b      	ldr	r3, [r1, #16]
 800e5bc:	4605      	mov	r5, r0
 800e5be:	460c      	mov	r4, r1
 800e5c0:	b913      	cbnz	r3, 800e5c8 <_fflush_r+0x10>
 800e5c2:	2500      	movs	r5, #0
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	b118      	cbz	r0, 800e5d2 <_fflush_r+0x1a>
 800e5ca:	6a03      	ldr	r3, [r0, #32]
 800e5cc:	b90b      	cbnz	r3, 800e5d2 <_fflush_r+0x1a>
 800e5ce:	f7ff f905 	bl	800d7dc <__sinit>
 800e5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0f3      	beq.n	800e5c2 <_fflush_r+0xa>
 800e5da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5dc:	07d0      	lsls	r0, r2, #31
 800e5de:	d404      	bmi.n	800e5ea <_fflush_r+0x32>
 800e5e0:	0599      	lsls	r1, r3, #22
 800e5e2:	d402      	bmi.n	800e5ea <_fflush_r+0x32>
 800e5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5e6:	f7ff fa32 	bl	800da4e <__retarget_lock_acquire_recursive>
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	f7ff ff5f 	bl	800e4b0 <__sflush_r>
 800e5f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5f4:	07da      	lsls	r2, r3, #31
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	d4e4      	bmi.n	800e5c4 <_fflush_r+0xc>
 800e5fa:	89a3      	ldrh	r3, [r4, #12]
 800e5fc:	059b      	lsls	r3, r3, #22
 800e5fe:	d4e1      	bmi.n	800e5c4 <_fflush_r+0xc>
 800e600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e602:	f7ff fa25 	bl	800da50 <__retarget_lock_release_recursive>
 800e606:	e7dd      	b.n	800e5c4 <_fflush_r+0xc>

0800e608 <__swbuf_r>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	460e      	mov	r6, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	4605      	mov	r5, r0
 800e610:	b118      	cbz	r0, 800e61a <__swbuf_r+0x12>
 800e612:	6a03      	ldr	r3, [r0, #32]
 800e614:	b90b      	cbnz	r3, 800e61a <__swbuf_r+0x12>
 800e616:	f7ff f8e1 	bl	800d7dc <__sinit>
 800e61a:	69a3      	ldr	r3, [r4, #24]
 800e61c:	60a3      	str	r3, [r4, #8]
 800e61e:	89a3      	ldrh	r3, [r4, #12]
 800e620:	071a      	lsls	r2, r3, #28
 800e622:	d501      	bpl.n	800e628 <__swbuf_r+0x20>
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	b943      	cbnz	r3, 800e63a <__swbuf_r+0x32>
 800e628:	4621      	mov	r1, r4
 800e62a:	4628      	mov	r0, r5
 800e62c:	f000 f82a 	bl	800e684 <__swsetup_r>
 800e630:	b118      	cbz	r0, 800e63a <__swbuf_r+0x32>
 800e632:	f04f 37ff 	mov.w	r7, #4294967295
 800e636:	4638      	mov	r0, r7
 800e638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	6922      	ldr	r2, [r4, #16]
 800e63e:	1a98      	subs	r0, r3, r2
 800e640:	6963      	ldr	r3, [r4, #20]
 800e642:	b2f6      	uxtb	r6, r6
 800e644:	4283      	cmp	r3, r0
 800e646:	4637      	mov	r7, r6
 800e648:	dc05      	bgt.n	800e656 <__swbuf_r+0x4e>
 800e64a:	4621      	mov	r1, r4
 800e64c:	4628      	mov	r0, r5
 800e64e:	f7ff ffb3 	bl	800e5b8 <_fflush_r>
 800e652:	2800      	cmp	r0, #0
 800e654:	d1ed      	bne.n	800e632 <__swbuf_r+0x2a>
 800e656:	68a3      	ldr	r3, [r4, #8]
 800e658:	3b01      	subs	r3, #1
 800e65a:	60a3      	str	r3, [r4, #8]
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	6022      	str	r2, [r4, #0]
 800e662:	701e      	strb	r6, [r3, #0]
 800e664:	6962      	ldr	r2, [r4, #20]
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	429a      	cmp	r2, r3
 800e66a:	d004      	beq.n	800e676 <__swbuf_r+0x6e>
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	07db      	lsls	r3, r3, #31
 800e670:	d5e1      	bpl.n	800e636 <__swbuf_r+0x2e>
 800e672:	2e0a      	cmp	r6, #10
 800e674:	d1df      	bne.n	800e636 <__swbuf_r+0x2e>
 800e676:	4621      	mov	r1, r4
 800e678:	4628      	mov	r0, r5
 800e67a:	f7ff ff9d 	bl	800e5b8 <_fflush_r>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d0d9      	beq.n	800e636 <__swbuf_r+0x2e>
 800e682:	e7d6      	b.n	800e632 <__swbuf_r+0x2a>

0800e684 <__swsetup_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4b29      	ldr	r3, [pc, #164]	@ (800e72c <__swsetup_r+0xa8>)
 800e688:	4605      	mov	r5, r0
 800e68a:	6818      	ldr	r0, [r3, #0]
 800e68c:	460c      	mov	r4, r1
 800e68e:	b118      	cbz	r0, 800e698 <__swsetup_r+0x14>
 800e690:	6a03      	ldr	r3, [r0, #32]
 800e692:	b90b      	cbnz	r3, 800e698 <__swsetup_r+0x14>
 800e694:	f7ff f8a2 	bl	800d7dc <__sinit>
 800e698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69c:	0719      	lsls	r1, r3, #28
 800e69e:	d422      	bmi.n	800e6e6 <__swsetup_r+0x62>
 800e6a0:	06da      	lsls	r2, r3, #27
 800e6a2:	d407      	bmi.n	800e6b4 <__swsetup_r+0x30>
 800e6a4:	2209      	movs	r2, #9
 800e6a6:	602a      	str	r2, [r5, #0]
 800e6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ac:	81a3      	strh	r3, [r4, #12]
 800e6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e6b2:	e033      	b.n	800e71c <__swsetup_r+0x98>
 800e6b4:	0758      	lsls	r0, r3, #29
 800e6b6:	d512      	bpl.n	800e6de <__swsetup_r+0x5a>
 800e6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ba:	b141      	cbz	r1, 800e6ce <__swsetup_r+0x4a>
 800e6bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6c0:	4299      	cmp	r1, r3
 800e6c2:	d002      	beq.n	800e6ca <__swsetup_r+0x46>
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	f7ff f9d3 	bl	800da70 <_free_r>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6d4:	81a3      	strh	r3, [r4, #12]
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	6063      	str	r3, [r4, #4]
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	6023      	str	r3, [r4, #0]
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	f043 0308 	orr.w	r3, r3, #8
 800e6e4:	81a3      	strh	r3, [r4, #12]
 800e6e6:	6923      	ldr	r3, [r4, #16]
 800e6e8:	b94b      	cbnz	r3, 800e6fe <__swsetup_r+0x7a>
 800e6ea:	89a3      	ldrh	r3, [r4, #12]
 800e6ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6f4:	d003      	beq.n	800e6fe <__swsetup_r+0x7a>
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f000 f897 	bl	800e82c <__smakebuf_r>
 800e6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e702:	f013 0201 	ands.w	r2, r3, #1
 800e706:	d00a      	beq.n	800e71e <__swsetup_r+0x9a>
 800e708:	2200      	movs	r2, #0
 800e70a:	60a2      	str	r2, [r4, #8]
 800e70c:	6962      	ldr	r2, [r4, #20]
 800e70e:	4252      	negs	r2, r2
 800e710:	61a2      	str	r2, [r4, #24]
 800e712:	6922      	ldr	r2, [r4, #16]
 800e714:	b942      	cbnz	r2, 800e728 <__swsetup_r+0xa4>
 800e716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e71a:	d1c5      	bne.n	800e6a8 <__swsetup_r+0x24>
 800e71c:	bd38      	pop	{r3, r4, r5, pc}
 800e71e:	0799      	lsls	r1, r3, #30
 800e720:	bf58      	it	pl
 800e722:	6962      	ldrpl	r2, [r4, #20]
 800e724:	60a2      	str	r2, [r4, #8]
 800e726:	e7f4      	b.n	800e712 <__swsetup_r+0x8e>
 800e728:	2000      	movs	r0, #0
 800e72a:	e7f7      	b.n	800e71c <__swsetup_r+0x98>
 800e72c:	2400001c 	.word	0x2400001c

0800e730 <memmove>:
 800e730:	4288      	cmp	r0, r1
 800e732:	b510      	push	{r4, lr}
 800e734:	eb01 0402 	add.w	r4, r1, r2
 800e738:	d902      	bls.n	800e740 <memmove+0x10>
 800e73a:	4284      	cmp	r4, r0
 800e73c:	4623      	mov	r3, r4
 800e73e:	d807      	bhi.n	800e750 <memmove+0x20>
 800e740:	1e43      	subs	r3, r0, #1
 800e742:	42a1      	cmp	r1, r4
 800e744:	d008      	beq.n	800e758 <memmove+0x28>
 800e746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e74a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e74e:	e7f8      	b.n	800e742 <memmove+0x12>
 800e750:	4402      	add	r2, r0
 800e752:	4601      	mov	r1, r0
 800e754:	428a      	cmp	r2, r1
 800e756:	d100      	bne.n	800e75a <memmove+0x2a>
 800e758:	bd10      	pop	{r4, pc}
 800e75a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e75e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e762:	e7f7      	b.n	800e754 <memmove+0x24>

0800e764 <_sbrk_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d06      	ldr	r5, [pc, #24]	@ (800e780 <_sbrk_r+0x1c>)
 800e768:	2300      	movs	r3, #0
 800e76a:	4604      	mov	r4, r0
 800e76c:	4608      	mov	r0, r1
 800e76e:	602b      	str	r3, [r5, #0]
 800e770:	f7f5 f89c 	bl	80038ac <_sbrk>
 800e774:	1c43      	adds	r3, r0, #1
 800e776:	d102      	bne.n	800e77e <_sbrk_r+0x1a>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	b103      	cbz	r3, 800e77e <_sbrk_r+0x1a>
 800e77c:	6023      	str	r3, [r4, #0]
 800e77e:	bd38      	pop	{r3, r4, r5, pc}
 800e780:	24000fc8 	.word	0x24000fc8

0800e784 <_realloc_r>:
 800e784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e788:	4680      	mov	r8, r0
 800e78a:	4615      	mov	r5, r2
 800e78c:	460c      	mov	r4, r1
 800e78e:	b921      	cbnz	r1, 800e79a <_realloc_r+0x16>
 800e790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	4611      	mov	r1, r2
 800e796:	f7ff b9d7 	b.w	800db48 <_malloc_r>
 800e79a:	b92a      	cbnz	r2, 800e7a8 <_realloc_r+0x24>
 800e79c:	f7ff f968 	bl	800da70 <_free_r>
 800e7a0:	2400      	movs	r4, #0
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a8:	f000 f89e 	bl	800e8e8 <_malloc_usable_size_r>
 800e7ac:	4285      	cmp	r5, r0
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	d802      	bhi.n	800e7b8 <_realloc_r+0x34>
 800e7b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7b6:	d8f4      	bhi.n	800e7a2 <_realloc_r+0x1e>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4640      	mov	r0, r8
 800e7bc:	f7ff f9c4 	bl	800db48 <_malloc_r>
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0ec      	beq.n	800e7a0 <_realloc_r+0x1c>
 800e7c6:	42b5      	cmp	r5, r6
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	bf28      	it	cs
 800e7ce:	4632      	movcs	r2, r6
 800e7d0:	f7ff f93f 	bl	800da52 <memcpy>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4640      	mov	r0, r8
 800e7d8:	f7ff f94a 	bl	800da70 <_free_r>
 800e7dc:	463c      	mov	r4, r7
 800e7de:	e7e0      	b.n	800e7a2 <_realloc_r+0x1e>

0800e7e0 <__swhatbuf_r>:
 800e7e0:	b570      	push	{r4, r5, r6, lr}
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e8:	2900      	cmp	r1, #0
 800e7ea:	b096      	sub	sp, #88	@ 0x58
 800e7ec:	4615      	mov	r5, r2
 800e7ee:	461e      	mov	r6, r3
 800e7f0:	da0d      	bge.n	800e80e <__swhatbuf_r+0x2e>
 800e7f2:	89a3      	ldrh	r3, [r4, #12]
 800e7f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7f8:	f04f 0100 	mov.w	r1, #0
 800e7fc:	bf14      	ite	ne
 800e7fe:	2340      	movne	r3, #64	@ 0x40
 800e800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e804:	2000      	movs	r0, #0
 800e806:	6031      	str	r1, [r6, #0]
 800e808:	602b      	str	r3, [r5, #0]
 800e80a:	b016      	add	sp, #88	@ 0x58
 800e80c:	bd70      	pop	{r4, r5, r6, pc}
 800e80e:	466a      	mov	r2, sp
 800e810:	f000 f848 	bl	800e8a4 <_fstat_r>
 800e814:	2800      	cmp	r0, #0
 800e816:	dbec      	blt.n	800e7f2 <__swhatbuf_r+0x12>
 800e818:	9901      	ldr	r1, [sp, #4]
 800e81a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e81e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e822:	4259      	negs	r1, r3
 800e824:	4159      	adcs	r1, r3
 800e826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e82a:	e7eb      	b.n	800e804 <__swhatbuf_r+0x24>

0800e82c <__smakebuf_r>:
 800e82c:	898b      	ldrh	r3, [r1, #12]
 800e82e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e830:	079d      	lsls	r5, r3, #30
 800e832:	4606      	mov	r6, r0
 800e834:	460c      	mov	r4, r1
 800e836:	d507      	bpl.n	800e848 <__smakebuf_r+0x1c>
 800e838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	6123      	str	r3, [r4, #16]
 800e840:	2301      	movs	r3, #1
 800e842:	6163      	str	r3, [r4, #20]
 800e844:	b003      	add	sp, #12
 800e846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e848:	ab01      	add	r3, sp, #4
 800e84a:	466a      	mov	r2, sp
 800e84c:	f7ff ffc8 	bl	800e7e0 <__swhatbuf_r>
 800e850:	9f00      	ldr	r7, [sp, #0]
 800e852:	4605      	mov	r5, r0
 800e854:	4639      	mov	r1, r7
 800e856:	4630      	mov	r0, r6
 800e858:	f7ff f976 	bl	800db48 <_malloc_r>
 800e85c:	b948      	cbnz	r0, 800e872 <__smakebuf_r+0x46>
 800e85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e862:	059a      	lsls	r2, r3, #22
 800e864:	d4ee      	bmi.n	800e844 <__smakebuf_r+0x18>
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	f043 0302 	orr.w	r3, r3, #2
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	e7e2      	b.n	800e838 <__smakebuf_r+0xc>
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	6020      	str	r0, [r4, #0]
 800e876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	9b01      	ldr	r3, [sp, #4]
 800e87e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e882:	b15b      	cbz	r3, 800e89c <__smakebuf_r+0x70>
 800e884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e888:	4630      	mov	r0, r6
 800e88a:	f000 f81d 	bl	800e8c8 <_isatty_r>
 800e88e:	b128      	cbz	r0, 800e89c <__smakebuf_r+0x70>
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	f023 0303 	bic.w	r3, r3, #3
 800e896:	f043 0301 	orr.w	r3, r3, #1
 800e89a:	81a3      	strh	r3, [r4, #12]
 800e89c:	89a3      	ldrh	r3, [r4, #12]
 800e89e:	431d      	orrs	r5, r3
 800e8a0:	81a5      	strh	r5, [r4, #12]
 800e8a2:	e7cf      	b.n	800e844 <__smakebuf_r+0x18>

0800e8a4 <_fstat_r>:
 800e8a4:	b538      	push	{r3, r4, r5, lr}
 800e8a6:	4d07      	ldr	r5, [pc, #28]	@ (800e8c4 <_fstat_r+0x20>)
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	4608      	mov	r0, r1
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	602b      	str	r3, [r5, #0]
 800e8b2:	f7f4 ffd3 	bl	800385c <_fstat>
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	d102      	bne.n	800e8c0 <_fstat_r+0x1c>
 800e8ba:	682b      	ldr	r3, [r5, #0]
 800e8bc:	b103      	cbz	r3, 800e8c0 <_fstat_r+0x1c>
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	bd38      	pop	{r3, r4, r5, pc}
 800e8c2:	bf00      	nop
 800e8c4:	24000fc8 	.word	0x24000fc8

0800e8c8 <_isatty_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d06      	ldr	r5, [pc, #24]	@ (800e8e4 <_isatty_r+0x1c>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	602b      	str	r3, [r5, #0]
 800e8d4:	f7f4 ffd2 	bl	800387c <_isatty>
 800e8d8:	1c43      	adds	r3, r0, #1
 800e8da:	d102      	bne.n	800e8e2 <_isatty_r+0x1a>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	b103      	cbz	r3, 800e8e2 <_isatty_r+0x1a>
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	24000fc8 	.word	0x24000fc8

0800e8e8 <_malloc_usable_size_r>:
 800e8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ec:	1f18      	subs	r0, r3, #4
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	bfbc      	itt	lt
 800e8f2:	580b      	ldrlt	r3, [r1, r0]
 800e8f4:	18c0      	addlt	r0, r0, r3
 800e8f6:	4770      	bx	lr

0800e8f8 <_init>:
 800e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fa:	bf00      	nop
 800e8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8fe:	bc08      	pop	{r3}
 800e900:	469e      	mov	lr, r3
 800e902:	4770      	bx	lr

0800e904 <_fini>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	bf00      	nop
 800e908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90a:	bc08      	pop	{r3}
 800e90c:	469e      	mov	lr, r3
 800e90e:	4770      	bx	lr
