
NFC_Clone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efd4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800f274  0800f274  00010274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f6a4  0800f6a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f6ac  0800f6ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f6b0  0800f6b0  000106b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800f6b4  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800f720  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800f780  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e70  2400012c  0800f7e0  0001112c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000f9c  0800f7e0  00011f9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034fc1  00000000  00000000  0001115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005024  00000000  00000000  0004611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028c0  00000000  00000000  0004b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fef  00000000  00000000  0004da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000442d4  00000000  00000000  0004f9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035767  00000000  00000000  00093cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ab74d  00000000  00000000  000c942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00274b77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd98  00000000  00000000  00274bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00280954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f25c 	.word	0x0800f25c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0800f25c 	.word	0x0800f25c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <delay+0x30>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000692:	bf00      	nop
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <delay+0x30>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3f9      	bcc.n	8000694 <delay+0x14>
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	24000738 	.word	0x24000738

080006b4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	2140      	movs	r1, #64	@ 0x40
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <send_to_lcd+0x9c>)
 80006ca:	f005 ffe9 	bl	80066a0 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006e0:	481c      	ldr	r0, [pc, #112]	@ (8000754 <send_to_lcd+0xa0>)
 80006e2:	f005 ffdd 	bl	80066a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	089b      	lsrs	r3, r3, #2
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	2140      	movs	r1, #64	@ 0x40
 80006f6:	4818      	ldr	r0, [pc, #96]	@ (8000758 <send_to_lcd+0xa4>)
 80006f8:	f005 ffd2 	bl	80066a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	085b      	lsrs	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070e:	4810      	ldr	r0, [pc, #64]	@ (8000750 <send_to_lcd+0x9c>)
 8000710:	f005 ffc6 	bl	80066a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	2102      	movs	r1, #2
 8000720:	480e      	ldr	r0, [pc, #56]	@ (800075c <send_to_lcd+0xa8>)
 8000722:	f005 ffbd 	bl	80066a0 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2101      	movs	r1, #1
 800072a:	480d      	ldr	r0, [pc, #52]	@ (8000760 <send_to_lcd+0xac>)
 800072c:	f005 ffb8 	bl	80066a0 <HAL_GPIO_WritePin>
	delay(50);
 8000730:	2032      	movs	r0, #50	@ 0x32
 8000732:	f7ff ffa5 	bl	8000680 <delay>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2101      	movs	r1, #1
 800073a:	4809      	ldr	r0, [pc, #36]	@ (8000760 <send_to_lcd+0xac>)
 800073c:	f005 ffb0 	bl	80066a0 <HAL_GPIO_WritePin>
	delay(50);
 8000740:	2032      	movs	r0, #50	@ 0x32
 8000742:	f7ff ff9d 	bl	8000680 <delay>
	//HAL_Delay(1);
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58020000 	.word	0x58020000
 8000754:	58021c00 	.word	0x58021c00
 8000758:	58021000 	.word	0x58021000
 800075c:	58022800 	.word	0x58022800
 8000760:	58020800 	.word	0x58020800

08000764 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff9b 	bl	80006b4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 030f 	and.w	r3, r3, #15
 8000784:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff92 	bl	80006b4 <send_to_lcd>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2101      	movs	r1, #1
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff81 	bl	80006b4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff78 	bl	80006b4 <send_to_lcd>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <lcd_clear>:

void lcd_clear (void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ffc7 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(2);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f003 fc42 	bl	8004060 <HAL_Delay>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
    switch (row)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <lcd_put_cur+0x18>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d005      	beq.n	8000802 <lcd_put_cur+0x22>
 80007f6:	e009      	b.n	800080c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fe:	603b      	str	r3, [r7, #0]
            break;
 8000800:	e004      	b.n	800080c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000808:	603b      	str	r3, [r7, #0]
            break;
 800080a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ffa7 	bl	8000764 <lcd_send_cmd>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <lcd_init>:


void lcd_init (void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000822:	2032      	movs	r0, #50	@ 0x32
 8000824:	f003 fc1c 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000828:	2030      	movs	r0, #48	@ 0x30
 800082a:	f7ff ff9b 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800082e:	2005      	movs	r0, #5
 8000830:	f003 fc16 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000834:	2030      	movs	r0, #48	@ 0x30
 8000836:	f7ff ff95 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800083a:	2001      	movs	r0, #1
 800083c:	f003 fc10 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000840:	2030      	movs	r0, #48	@ 0x30
 8000842:	f7ff ff8f 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(10);
 8000846:	200a      	movs	r0, #10
 8000848:	f003 fc0a 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800084c:	2020      	movs	r0, #32
 800084e:	f7ff ff89 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(10);
 8000852:	200a      	movs	r0, #10
 8000854:	f003 fc04 	bl	8004060 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000858:	2028      	movs	r0, #40	@ 0x28
 800085a:	f7ff ff83 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f003 fbfe 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000864:	2008      	movs	r0, #8
 8000866:	f7ff ff7d 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f003 fbf8 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000870:	2001      	movs	r0, #1
 8000872:	f7ff ff77 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f003 fbf2 	bl	8004060 <HAL_Delay>
	HAL_Delay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f003 fbef 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000882:	2006      	movs	r0, #6
 8000884:	f7ff ff6e 	bl	8000764 <lcd_send_cmd>
	HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f003 fbe9 	bl	8004060 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800088e:	200c      	movs	r0, #12
 8000890:	f7ff ff68 	bl	8000764 <lcd_send_cmd>
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80008a0:	e006      	b.n	80008b0 <lcd_send_string+0x18>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff74 	bl	8000798 <lcd_send_data>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f4      	bne.n	80008a2 <lcd_send_string+0xa>
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0d0      	sub	sp, #320	@ 0x140
 80008c8:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

    uint8_t buff[255];
    uint8_t uid[MIFARE_UID_MAX_LENGTH];
    int32_t uid_len = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint8_t key_a[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80008d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80008d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80008d8:	4abd      	ldr	r2, [pc, #756]	@ (8000bd0 <main+0x30c>)
 80008da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008de:	6018      	str	r0, [r3, #0]
 80008e0:	3304      	adds	r3, #4
 80008e2:	8019      	strh	r1, [r3, #0]
    uint32_t pn532_error = PN532_ERROR_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    //uint8_t text[16] = {0x72, 0x61, 0x64, 0x20, 0x6D, 0x61, 0x6D, 0x20, 0x72, 0x6F, 0x62, 0x69, 0x6A, 0x61, 0x00, 0x00};

    /* USER CODE END 1 */

    HAL_Init();
 80008ea:	f003 fb27 	bl	8003f3c <HAL_Init>
    SystemClock_Config();
 80008ee:	f000 fbc9 	bl	8001084 <SystemClock_Config>
    PeriphCommonClock_Config();
 80008f2:	f000 fc49 	bl	8001188 <PeriphCommonClock_Config>

    /* MCU Configuration--------------------------------------------------------*/
    MX_GPIO_Init();
 80008f6:	f001 fa0f 	bl	8001d18 <MX_GPIO_Init>
    MX_ADC1_Init();
 80008fa:	f000 fc75 	bl	80011e8 <MX_ADC1_Init>
    MX_ADC2_Init();
 80008fe:	f000 fcf5 	bl	80012ec <MX_ADC2_Init>
    MX_ADC3_Init();
 8000902:	f000 fd61 	bl	80013c8 <MX_ADC3_Init>
    MX_ETH_Init();
 8000906:	f000 fdcf 	bl	80014a8 <MX_ETH_Init>
    MX_FDCAN1_Init();
 800090a:	f000 fe19 	bl	8001540 <MX_FDCAN1_Init>
    MX_FDCAN2_Init();
 800090e:	f000 fe7b 	bl	8001608 <MX_FDCAN2_Init>
    MX_FMC_Init();
 8000912:	f001 f9b3 	bl	8001c7c <MX_FMC_Init>
    MX_LTDC_Init();
 8000916:	f000 ff1b 	bl	8001750 <MX_LTDC_Init>
    MX_QUADSPI_Init();
 800091a:	f000 ffcb 	bl	80018b4 <MX_QUADSPI_Init>
    MX_RTC_Init();
 800091e:	f000 fff5 	bl	800190c <MX_RTC_Init>
    MX_SAI2_Init();
 8000922:	f001 f81b 	bl	800195c <MX_SAI2_Init>
    MX_USART3_UART_Init();
 8000926:	f001 f92b 	bl	8001b80 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 800092a:	f001 f975 	bl	8001c18 <MX_USB_OTG_FS_PCD_Init>
    MX_I2C4_Init();
 800092e:	f000 fecf 	bl	80016d0 <MX_I2C4_Init>
    MX_TIM1_Init();
 8000932:	f001 f8d1 	bl	8001ad8 <MX_TIM1_Init>

    /* USER CODE BEGIN 2 */

    snprintf(SendBuffer, BUFSIZE, "--------------------\r\n", buff[1], buff[2]);
 8000936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800093a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800093e:	785b      	ldrb	r3, [r3, #1]
 8000940:	461a      	mov	r2, r3
 8000942:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000946:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	4aa0      	ldr	r2, [pc, #640]	@ (8000bd4 <main+0x310>)
 8000952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000956:	48a0      	ldr	r0, [pc, #640]	@ (8000bd8 <main+0x314>)
 8000958:	f00d fc3a 	bl	800e1d0 <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 800095c:	489e      	ldr	r0, [pc, #632]	@ (8000bd8 <main+0x314>)
 800095e:	f7ff fcbf 	bl	80002e0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	2364      	movs	r3, #100	@ 0x64
 8000968:	499b      	ldr	r1, [pc, #620]	@ (8000bd8 <main+0x314>)
 800096a:	489c      	ldr	r0, [pc, #624]	@ (8000bdc <main+0x318>)
 800096c:	f00b fe74 	bl	800c658 <HAL_UART_Transmit>

    HAL_TIM_Base_Start(&htim1);
 8000970:	489b      	ldr	r0, [pc, #620]	@ (8000be0 <main+0x31c>)
 8000972:	f00b fae7 	bl	800bf44 <HAL_TIM_Base_Start>
    lcd_init();
 8000976:	f7ff ff52 	bl	800081e <lcd_init>
    lcd_put_cur(0, 0);
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff ff2f 	bl	80007e0 <lcd_put_cur>
    lcd_send_string("NFC CARD CLONER");
 8000982:	4898      	ldr	r0, [pc, #608]	@ (8000be4 <main+0x320>)
 8000984:	f7ff ff88 	bl	8000898 <lcd_send_string>
    HAL_Delay(3000);
 8000988:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800098c:	f003 fb68 	bl	8004060 <HAL_Delay>
    lcd_clear();
 8000990:	f7ff ff1c 	bl	80007cc <lcd_clear>

    PN532 pn532;
    PN532_I2C_Init(&pn532);
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f940 	bl	8002c1c <PN532_I2C_Init>

    if(PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK){
 800099c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80009a0:	463b      	mov	r3, r7
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 feab 	bl	8002700 <PN532_GetFirmwareVersion>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d141      	bne.n	8000a34 <main+0x170>
        snprintf(SendBuffer, BUFSIZE, "Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 80009b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80009b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	461a      	mov	r2, r3
 80009bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80009c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009c4:	789b      	ldrb	r3, [r3, #2]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	4a87      	ldr	r2, [pc, #540]	@ (8000be8 <main+0x324>)
 80009cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d0:	4881      	ldr	r0, [pc, #516]	@ (8000bd8 <main+0x314>)
 80009d2:	f00d fbfd 	bl	800e1d0 <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 80009d6:	4880      	ldr	r0, [pc, #512]	@ (8000bd8 <main+0x314>)
 80009d8:	f7ff fc82 	bl	80002e0 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	2364      	movs	r3, #100	@ 0x64
 80009e2:	497d      	ldr	r1, [pc, #500]	@ (8000bd8 <main+0x314>)
 80009e4:	487d      	ldr	r0, [pc, #500]	@ (8000bdc <main+0x318>)
 80009e6:	f00b fe37 	bl	800c658 <HAL_UART_Transmit>
        snprintf(SendBuffer, BUFSIZE, "PN532 not found\r\n");
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
        return -1;
    }

    PN532_SamConfiguration(&pn532);
 80009ea:	463b      	mov	r3, r7
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 feab 	bl	8002748 <PN532_SamConfiguration>

    lcd_clear();
 80009f2:	f7ff feeb 	bl	80007cc <lcd_clear>
    lcd_put_cur(0, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fef1 	bl	80007e0 <lcd_put_cur>
    lcd_send_string("scan source card");
 80009fe:	487b      	ldr	r0, [pc, #492]	@ (8000bec <main+0x328>)
 8000a00:	f7ff ff4a 	bl	8000898 <lcd_send_string>
    lcd_put_cur(1, 0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff feea 	bl	80007e0 <lcd_put_cur>
    lcd_send_string("                ");
 8000a0c:	4878      	ldr	r0, [pc, #480]	@ (8000bf0 <main+0x32c>)
 8000a0e:	f7ff ff43 	bl	8000898 <lcd_send_string>

    snprintf(SendBuffer, BUFSIZE, "Waiting for source RFID/NFC card");
 8000a12:	4a78      	ldr	r2, [pc, #480]	@ (8000bf4 <main+0x330>)
 8000a14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a18:	486f      	ldr	r0, [pc, #444]	@ (8000bd8 <main+0x314>)
 8000a1a:	f00d fbd9 	bl	800e1d0 <sniprintf>
    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a1e:	486e      	ldr	r0, [pc, #440]	@ (8000bd8 <main+0x314>)
 8000a20:	f7ff fc5e 	bl	80002e0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	496b      	ldr	r1, [pc, #428]	@ (8000bd8 <main+0x314>)
 8000a2c:	486b      	ldr	r0, [pc, #428]	@ (8000bdc <main+0x318>)
 8000a2e:	f00b fe13 	bl	800c658 <HAL_UART_Transmit>
 8000a32:	e012      	b.n	8000a5a <main+0x196>
        snprintf(SendBuffer, BUFSIZE, "PN532 not found\r\n");
 8000a34:	4a70      	ldr	r2, [pc, #448]	@ (8000bf8 <main+0x334>)
 8000a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3a:	4867      	ldr	r0, [pc, #412]	@ (8000bd8 <main+0x314>)
 8000a3c:	f00d fbc8 	bl	800e1d0 <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a40:	4865      	ldr	r0, [pc, #404]	@ (8000bd8 <main+0x314>)
 8000a42:	f7ff fc4d 	bl	80002e0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	2364      	movs	r3, #100	@ 0x64
 8000a4c:	4962      	ldr	r1, [pc, #392]	@ (8000bd8 <main+0x314>)
 8000a4e:	4863      	ldr	r0, [pc, #396]	@ (8000bdc <main+0x318>)
 8000a50:	f00b fe02 	bl	800c658 <HAL_UART_Transmit>
        return -1;
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	e2fa      	b.n	8001050 <main+0x78c>

    while (1) {
        uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000a5a:	f107 0120 	add.w	r1, r7, #32
 8000a5e:	4638      	mov	r0, r7
 8000a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a64:	2200      	movs	r2, #0
 8000a66:	f001 fe91 	bl	800278c <PN532_ReadPassiveTarget>
 8000a6a:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

        snprintf(SendBuffer, BUFSIZE, ".");
 8000a6e:	4a63      	ldr	r2, [pc, #396]	@ (8000bfc <main+0x338>)
 8000a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a74:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <main+0x314>)
 8000a76:	f00d fbab 	bl	800e1d0 <sniprintf>
        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000a7a:	4857      	ldr	r0, [pc, #348]	@ (8000bd8 <main+0x314>)
 8000a7c:	f7ff fc30 	bl	80002e0 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	2364      	movs	r3, #100	@ 0x64
 8000a86:	4954      	ldr	r1, [pc, #336]	@ (8000bd8 <main+0x314>)
 8000a88:	4854      	ldr	r0, [pc, #336]	@ (8000bdc <main+0x318>)
 8000a8a:	f00b fde5 	bl	800c658 <HAL_UART_Transmit>

        if(uid_len != PN532_STATUS_ERROR){
 8000a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a96:	d0e0      	beq.n	8000a5a <main+0x196>
            pn532_error = PN532_MifareClassicAuthenticateBlock(&pn532, uid, uid_len, 6, MIFARE_CMD_AUTH_A, key_a);
 8000a98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	f107 0120 	add.w	r1, r7, #32
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	2360      	movs	r3, #96	@ 0x60
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2306      	movs	r3, #6
 8000ab0:	f001 fec6 	bl	8002840 <PN532_MifareClassicAuthenticateBlock>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            if(pn532_error == PN532_ERROR_NONE){
 8000aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 828f 	bne.w	8000fe2 <main+0x71e>
                pn532_error = PN532_MifareClassicReadBlock(&pn532, buff, 6);
 8000ac4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2206      	movs	r2, #6
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 ff18 	bl	8002902 <PN532_MifareClassicReadBlock>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

                snprintf(SendBuffer, BUFSIZE, "\r\nFound card with UID: ");
 8000ad8:	4a49      	ldr	r2, [pc, #292]	@ (8000c00 <main+0x33c>)
 8000ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ade:	483e      	ldr	r0, [pc, #248]	@ (8000bd8 <main+0x314>)
 8000ae0:	f00d fb76 	bl	800e1d0 <sniprintf>
                HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000ae4:	483c      	ldr	r0, [pc, #240]	@ (8000bd8 <main+0x314>)
 8000ae6:	f7ff fbfb 	bl	80002e0 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	4939      	ldr	r1, [pc, #228]	@ (8000bd8 <main+0x314>)
 8000af2:	483a      	ldr	r0, [pc, #232]	@ (8000bdc <main+0x318>)
 8000af4:	f00b fdb0 	bl	800c658 <HAL_UART_Transmit>

                for(uint8_t i = 0; i < uid_len; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8000afe:	e01b      	b.n	8000b38 <main+0x274>
                	snprintf (SendBuffer,BUFSIZE,"%02x ", uid[i]);
 8000b00:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8000b04:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000b08:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <main+0x340>)
 8000b10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b14:	4830      	ldr	r0, [pc, #192]	@ (8000bd8 <main+0x314>)
 8000b16:	f00d fb5b 	bl	800e1d0 <sniprintf>
                	HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000b1a:	482f      	ldr	r0, [pc, #188]	@ (8000bd8 <main+0x314>)
 8000b1c:	f7ff fbe0 	bl	80002e0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	2364      	movs	r3, #100	@ 0x64
 8000b26:	492c      	ldr	r1, [pc, #176]	@ (8000bd8 <main+0x314>)
 8000b28:	482c      	ldr	r0, [pc, #176]	@ (8000bdc <main+0x318>)
 8000b2a:	f00b fd95 	bl	800c658 <HAL_UART_Transmit>
                for(uint8_t i = 0; i < uid_len; i++){
 8000b2e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8000b32:	3301      	adds	r3, #1
 8000b34:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8000b38:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8000b3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dcdd      	bgt.n	8000b00 <main+0x23c>
                }

                snprintf (SendBuffer,BUFSIZE,"\r\n");
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <main+0x344>)
 8000b46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4a:	4823      	ldr	r0, [pc, #140]	@ (8000bd8 <main+0x314>)
 8000b4c:	f00d fb40 	bl	800e1d0 <sniprintf>
                HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000b50:	4821      	ldr	r0, [pc, #132]	@ (8000bd8 <main+0x314>)
 8000b52:	f7ff fbc5 	bl	80002e0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	2364      	movs	r3, #100	@ 0x64
 8000b5c:	491e      	ldr	r1, [pc, #120]	@ (8000bd8 <main+0x314>)
 8000b5e:	481f      	ldr	r0, [pc, #124]	@ (8000bdc <main+0x318>)
 8000b60:	f00b fd7a 	bl	800c658 <HAL_UART_Transmit>

                if(pn532_error == PN532_ERROR_NONE){
 8000b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f040 820b 	bne.w	8000f84 <main+0x6c0>
                    lcd_clear();
 8000b6e:	f7ff fe2d 	bl	80007cc <lcd_clear>
                    lcd_put_cur(0, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fe33 	bl	80007e0 <lcd_put_cur>
                    lcd_send_string("read successful");
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <main+0x348>)
 8000b7c:	f7ff fe8c 	bl	8000898 <lcd_send_string>
                    lcd_put_cur(1, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff fe2c 	bl	80007e0 <lcd_put_cur>

                    for(uint8_t i = 0; i < 16; i++){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8000b8e:	e059      	b.n	8000c44 <main+0x380>
                        if(buff[i] >= 0x20 && buff[i] <= 0x7E){
 8000b90:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8000b94:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000b98:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	2b1f      	cmp	r3, #31
 8000ba0:	d938      	bls.n	8000c14 <main+0x350>
 8000ba2:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8000ba6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000baa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	2b7e      	cmp	r3, #126	@ 0x7e
 8000bb2:	d82f      	bhi.n	8000c14 <main+0x350>
                            snprintf(SendBuffer, BUFSIZE, "%c", (char)buff[i]);
 8000bb4:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8000bb8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000bbc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <main+0x34c>)
 8000bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <main+0x314>)
 8000bca:	f00d fb01 	bl	800e1d0 <sniprintf>
 8000bce:	e027      	b.n	8000c20 <main+0x35c>
 8000bd0:	0800f450 	.word	0x0800f450
 8000bd4:	0800f274 	.word	0x0800f274
 8000bd8:	24000d30 	.word	0x24000d30
 8000bdc:	24000784 	.word	0x24000784
 8000be0:	24000738 	.word	0x24000738
 8000be4:	0800f28c 	.word	0x0800f28c
 8000be8:	0800f29c 	.word	0x0800f29c
 8000bec:	0800f2dc 	.word	0x0800f2dc
 8000bf0:	0800f2f0 	.word	0x0800f2f0
 8000bf4:	0800f304 	.word	0x0800f304
 8000bf8:	0800f2c8 	.word	0x0800f2c8
 8000bfc:	0800f328 	.word	0x0800f328
 8000c00:	0800f32c 	.word	0x0800f32c
 8000c04:	0800f344 	.word	0x0800f344
 8000c08:	0800f34c 	.word	0x0800f34c
 8000c0c:	0800f350 	.word	0x0800f350
 8000c10:	0800f360 	.word	0x0800f360
                        }
                        else{
                            snprintf(SendBuffer, BUFSIZE, "");
 8000c14:	4ac8      	ldr	r2, [pc, #800]	@ (8000f38 <main+0x674>)
 8000c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1a:	48c8      	ldr	r0, [pc, #800]	@ (8000f3c <main+0x678>)
 8000c1c:	f00d fad8 	bl	800e1d0 <sniprintf>
                        }
                        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000c20:	48c6      	ldr	r0, [pc, #792]	@ (8000f3c <main+0x678>)
 8000c22:	f7ff fb5d 	bl	80002e0 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	2364      	movs	r3, #100	@ 0x64
 8000c2c:	49c3      	ldr	r1, [pc, #780]	@ (8000f3c <main+0x678>)
 8000c2e:	48c4      	ldr	r0, [pc, #784]	@ (8000f40 <main+0x67c>)
 8000c30:	f00b fd12 	bl	800c658 <HAL_UART_Transmit>
                        lcd_send_string(SendBuffer);
 8000c34:	48c1      	ldr	r0, [pc, #772]	@ (8000f3c <main+0x678>)
 8000c36:	f7ff fe2f 	bl	8000898 <lcd_send_string>
                    for(uint8_t i = 0; i < 16; i++){
 8000c3a:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8000c3e:	3301      	adds	r3, #1
 8000c40:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8000c44:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d9a1      	bls.n	8000b90 <main+0x2cc>
                    }
                    HAL_Delay(5000);
 8000c4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c50:	f003 fa06 	bl	8004060 <HAL_Delay>

                    lcd_clear();
 8000c54:	f7ff fdba 	bl	80007cc <lcd_clear>
                    lcd_put_cur(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fdc0 	bl	80007e0 <lcd_put_cur>
                    lcd_send_string("scan target card");
 8000c60:	48b8      	ldr	r0, [pc, #736]	@ (8000f44 <main+0x680>)
 8000c62:	f7ff fe19 	bl	8000898 <lcd_send_string>
                    lcd_put_cur(1, 0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fdb9 	bl	80007e0 <lcd_put_cur>
                    lcd_send_string("                ");
 8000c6e:	48b6      	ldr	r0, [pc, #728]	@ (8000f48 <main+0x684>)
 8000c70:	f7ff fe12 	bl	8000898 <lcd_send_string>

                    snprintf(SendBuffer, BUFSIZE, "\r\nWaiting for target RFID/NFC card");
 8000c74:	4ab5      	ldr	r2, [pc, #724]	@ (8000f4c <main+0x688>)
 8000c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c7a:	48b0      	ldr	r0, [pc, #704]	@ (8000f3c <main+0x678>)
 8000c7c:	f00d faa8 	bl	800e1d0 <sniprintf>
                    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000c80:	48ae      	ldr	r0, [pc, #696]	@ (8000f3c <main+0x678>)
 8000c82:	f7ff fb2d 	bl	80002e0 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	2364      	movs	r3, #100	@ 0x64
 8000c8c:	49ab      	ldr	r1, [pc, #684]	@ (8000f3c <main+0x678>)
 8000c8e:	48ac      	ldr	r0, [pc, #688]	@ (8000f40 <main+0x67c>)
 8000c90:	f00b fce2 	bl	800c658 <HAL_UART_Transmit>

                    while(1){
                        uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000c94:	f107 0120 	add.w	r1, r7, #32
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f001 fd74 	bl	800278c <PN532_ReadPassiveTarget>
 8000ca4:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

                        snprintf(SendBuffer, BUFSIZE, ".");
 8000ca8:	4aa9      	ldr	r2, [pc, #676]	@ (8000f50 <main+0x68c>)
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	48a3      	ldr	r0, [pc, #652]	@ (8000f3c <main+0x678>)
 8000cb0:	f00d fa8e 	bl	800e1d0 <sniprintf>
                        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000cb4:	48a1      	ldr	r0, [pc, #644]	@ (8000f3c <main+0x678>)
 8000cb6:	f7ff fb13 	bl	80002e0 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	2364      	movs	r3, #100	@ 0x64
 8000cc0:	499e      	ldr	r1, [pc, #632]	@ (8000f3c <main+0x678>)
 8000cc2:	489f      	ldr	r0, [pc, #636]	@ (8000f40 <main+0x67c>)
 8000cc4:	f00b fcc8 	bl	800c658 <HAL_UART_Transmit>

                        if(uid_len != PN532_STATUS_ERROR){
 8000cc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d0e0      	beq.n	8000c94 <main+0x3d0>
                            pn532_error = PN532_MifareClassicAuthenticateBlock(&pn532, uid, uid_len, 6, MIFARE_CMD_AUTH_A, key_a);
 8000cd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	f107 0120 	add.w	r1, r7, #32
 8000cdc:	4638      	mov	r0, r7
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2360      	movs	r3, #96	@ 0x60
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2306      	movs	r3, #6
 8000cea:	f001 fda9 	bl	8002840 <PN532_MifareClassicAuthenticateBlock>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
                            if(pn532_error == PN532_ERROR_NONE){
 8000cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f040 80e5 	bne.w	8000ec8 <main+0x604>
                                pn532_error = PN532_MifareClassicWriteBlock(&pn532, buff, 6);
 8000cfe:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000d02:	463b      	mov	r3, r7
 8000d04:	2206      	movs	r2, #6
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fe3e 	bl	8002988 <PN532_MifareClassicWriteBlock>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

                                snprintf(SendBuffer, BUFSIZE, "\r\nFound card with UID: ");
 8000d12:	4a90      	ldr	r2, [pc, #576]	@ (8000f54 <main+0x690>)
 8000d14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d18:	4888      	ldr	r0, [pc, #544]	@ (8000f3c <main+0x678>)
 8000d1a:	f00d fa59 	bl	800e1d0 <sniprintf>
                                HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000d1e:	4887      	ldr	r0, [pc, #540]	@ (8000f3c <main+0x678>)
 8000d20:	f7ff fade 	bl	80002e0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	4984      	ldr	r1, [pc, #528]	@ (8000f3c <main+0x678>)
 8000d2c:	4884      	ldr	r0, [pc, #528]	@ (8000f40 <main+0x67c>)
 8000d2e:	f00b fc93 	bl	800c658 <HAL_UART_Transmit>

                                for(uint8_t i = 0; i < uid_len; i++){
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
 8000d38:	e01b      	b.n	8000d72 <main+0x4ae>
                                	snprintf (SendBuffer,BUFSIZE,"%02x ", uid[i]);
 8000d3a:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8000d3e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000d42:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	4a83      	ldr	r2, [pc, #524]	@ (8000f58 <main+0x694>)
 8000d4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4e:	487b      	ldr	r0, [pc, #492]	@ (8000f3c <main+0x678>)
 8000d50:	f00d fa3e 	bl	800e1d0 <sniprintf>
                                	HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000d54:	4879      	ldr	r0, [pc, #484]	@ (8000f3c <main+0x678>)
 8000d56:	f7ff fac3 	bl	80002e0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	2364      	movs	r3, #100	@ 0x64
 8000d60:	4976      	ldr	r1, [pc, #472]	@ (8000f3c <main+0x678>)
 8000d62:	4877      	ldr	r0, [pc, #476]	@ (8000f40 <main+0x67c>)
 8000d64:	f00b fc78 	bl	800c658 <HAL_UART_Transmit>
                                for(uint8_t i = 0; i < uid_len; i++){
 8000d68:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
 8000d72:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8000d76:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dcdd      	bgt.n	8000d3a <main+0x476>
                                }

                                snprintf (SendBuffer,BUFSIZE,"\r\n");
 8000d7e:	4a77      	ldr	r2, [pc, #476]	@ (8000f5c <main+0x698>)
 8000d80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d84:	486d      	ldr	r0, [pc, #436]	@ (8000f3c <main+0x678>)
 8000d86:	f00d fa23 	bl	800e1d0 <sniprintf>
                                HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),100);
 8000d8a:	486c      	ldr	r0, [pc, #432]	@ (8000f3c <main+0x678>)
 8000d8c:	f7ff faa8 	bl	80002e0 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	2364      	movs	r3, #100	@ 0x64
 8000d96:	4969      	ldr	r1, [pc, #420]	@ (8000f3c <main+0x678>)
 8000d98:	4869      	ldr	r0, [pc, #420]	@ (8000f40 <main+0x67c>)
 8000d9a:	f00b fc5d 	bl	800c658 <HAL_UART_Transmit>

                                if(pn532_error == PN532_ERROR_NONE){
 8000d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d161      	bne.n	8000e6a <main+0x5a6>
                                    lcd_clear();
 8000da6:	f7ff fd11 	bl	80007cc <lcd_clear>
                                    lcd_put_cur(0, 0);
 8000daa:	2100      	movs	r1, #0
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fd17 	bl	80007e0 <lcd_put_cur>
                                    lcd_send_string("clone successful");
 8000db2:	486b      	ldr	r0, [pc, #428]	@ (8000f60 <main+0x69c>)
 8000db4:	f7ff fd70 	bl	8000898 <lcd_send_string>
                                    lcd_put_cur(1, 0);
 8000db8:	2100      	movs	r1, #0
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fd10 	bl	80007e0 <lcd_put_cur>

                                    for(uint8_t i = 0; i < 16; i++){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 8000dc6:	e037      	b.n	8000e38 <main+0x574>
                                        if(buff[i] >= 0x20 && buff[i] <= 0x7E){
 8000dc8:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000dcc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000dd0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b1f      	cmp	r3, #31
 8000dd8:	d916      	bls.n	8000e08 <main+0x544>
 8000dda:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000dde:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000de2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000dea:	d80d      	bhi.n	8000e08 <main+0x544>
                                            snprintf(SendBuffer, BUFSIZE, "%c", (char)buff[i]);
 8000dec:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000df0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000df4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8000f64 <main+0x6a0>)
 8000dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e00:	484e      	ldr	r0, [pc, #312]	@ (8000f3c <main+0x678>)
 8000e02:	f00d f9e5 	bl	800e1d0 <sniprintf>
 8000e06:	e005      	b.n	8000e14 <main+0x550>
                                        }
                                        else{
                                            snprintf(SendBuffer, BUFSIZE, "");
 8000e08:	4a4b      	ldr	r2, [pc, #300]	@ (8000f38 <main+0x674>)
 8000e0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e0e:	484b      	ldr	r0, [pc, #300]	@ (8000f3c <main+0x678>)
 8000e10:	f00d f9de 	bl	800e1d0 <sniprintf>
                                        }
                                        HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000e14:	4849      	ldr	r0, [pc, #292]	@ (8000f3c <main+0x678>)
 8000e16:	f7ff fa63 	bl	80002e0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	2364      	movs	r3, #100	@ 0x64
 8000e20:	4946      	ldr	r1, [pc, #280]	@ (8000f3c <main+0x678>)
 8000e22:	4847      	ldr	r0, [pc, #284]	@ (8000f40 <main+0x67c>)
 8000e24:	f00b fc18 	bl	800c658 <HAL_UART_Transmit>
                                        lcd_send_string(SendBuffer);
 8000e28:	4844      	ldr	r0, [pc, #272]	@ (8000f3c <main+0x678>)
 8000e2a:	f7ff fd35 	bl	8000898 <lcd_send_string>
                                    for(uint8_t i = 0; i < 16; i++){
 8000e2e:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000e32:	3301      	adds	r3, #1
 8000e34:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
 8000e38:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d9c3      	bls.n	8000dc8 <main+0x504>
                                    }

                                    HAL_Delay(5000);
 8000e40:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e44:	f003 f90c 	bl	8004060 <HAL_Delay>

                                    lcd_clear();
 8000e48:	f7ff fcc0 	bl	80007cc <lcd_clear>
                                    lcd_put_cur(0, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fcc6 	bl	80007e0 <lcd_put_cur>
                                    lcd_send_string("scan source card");
 8000e54:	4844      	ldr	r0, [pc, #272]	@ (8000f68 <main+0x6a4>)
 8000e56:	f7ff fd1f 	bl	8000898 <lcd_send_string>
                                    lcd_put_cur(1, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff fcbf 	bl	80007e0 <lcd_put_cur>
                                    lcd_send_string("                ");
 8000e62:	4839      	ldr	r0, [pc, #228]	@ (8000f48 <main+0x684>)
 8000e64:	f7ff fd18 	bl	8000898 <lcd_send_string>
                                    break;
 8000e68:	e0f1      	b.n	800104e <main+0x78a>
                                }
                                else{
                                	lcd_put_cur(0, 0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fcb7 	bl	80007e0 <lcd_put_cur>
                                	lcd_clear();
 8000e72:	f7ff fcab 	bl	80007cc <lcd_clear>
                                	lcd_send_string("write error");
 8000e76:	483d      	ldr	r0, [pc, #244]	@ (8000f6c <main+0x6a8>)
 8000e78:	f7ff fd0e 	bl	8000898 <lcd_send_string>
                                	HAL_Delay(3000);
 8000e7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e80:	f003 f8ee 	bl	8004060 <HAL_Delay>

                                    snprintf(SendBuffer, BUFSIZE, "%s" , "Error writing to card\r\n");
 8000e84:	4b3a      	ldr	r3, [pc, #232]	@ (8000f70 <main+0x6ac>)
 8000e86:	4a3b      	ldr	r2, [pc, #236]	@ (8000f74 <main+0x6b0>)
 8000e88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8c:	482b      	ldr	r0, [pc, #172]	@ (8000f3c <main+0x678>)
 8000e8e:	f00d f99f 	bl	800e1d0 <sniprintf>
                                    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000e92:	482a      	ldr	r0, [pc, #168]	@ (8000f3c <main+0x678>)
 8000e94:	f7ff fa24 	bl	80002e0 <strlen>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	2364      	movs	r3, #100	@ 0x64
 8000e9e:	4927      	ldr	r1, [pc, #156]	@ (8000f3c <main+0x678>)
 8000ea0:	4827      	ldr	r0, [pc, #156]	@ (8000f40 <main+0x67c>)
 8000ea2:	f00b fbd9 	bl	800c658 <HAL_UART_Transmit>

                                    lcd_clear();
 8000ea6:	f7ff fc91 	bl	80007cc <lcd_clear>
                                    lcd_put_cur(0, 0);
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fc97 	bl	80007e0 <lcd_put_cur>
                                    lcd_send_string("scan target card");
 8000eb2:	4824      	ldr	r0, [pc, #144]	@ (8000f44 <main+0x680>)
 8000eb4:	f7ff fcf0 	bl	8000898 <lcd_send_string>
                                    lcd_put_cur(1, 0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff fc90 	bl	80007e0 <lcd_put_cur>
                                    lcd_send_string("                ");
 8000ec0:	4821      	ldr	r0, [pc, #132]	@ (8000f48 <main+0x684>)
 8000ec2:	f7ff fce9 	bl	8000898 <lcd_send_string>

                                	continue;
 8000ec6:	e035      	b.n	8000f34 <main+0x670>
                                }
                            }
                            else{
                            	lcd_put_cur(0, 0);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fc88 	bl	80007e0 <lcd_put_cur>
                            	lcd_clear();
 8000ed0:	f7ff fc7c 	bl	80007cc <lcd_clear>
                            	lcd_send_string("authentication");
 8000ed4:	4828      	ldr	r0, [pc, #160]	@ (8000f78 <main+0x6b4>)
 8000ed6:	f7ff fcdf 	bl	8000898 <lcd_send_string>
                            	lcd_put_cur(1, 0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fc7f 	bl	80007e0 <lcd_put_cur>
                            	lcd_send_string("error");
 8000ee2:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <main+0x6b8>)
 8000ee4:	f7ff fcd8 	bl	8000898 <lcd_send_string>
                            	HAL_Delay(3000);
 8000ee8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000eec:	f003 f8b8 	bl	8004060 <HAL_Delay>

                                snprintf(SendBuffer, BUFSIZE, "%s" , "Error authenticating card");
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <main+0x6bc>)
 8000ef2:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <main+0x6b0>)
 8000ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef8:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <main+0x678>)
 8000efa:	f00d f969 	bl	800e1d0 <sniprintf>
                                HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000efe:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <main+0x678>)
 8000f00:	f7ff f9ee 	bl	80002e0 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2364      	movs	r3, #100	@ 0x64
 8000f0a:	490c      	ldr	r1, [pc, #48]	@ (8000f3c <main+0x678>)
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <main+0x67c>)
 8000f0e:	f00b fba3 	bl	800c658 <HAL_UART_Transmit>

                                lcd_clear();
 8000f12:	f7ff fc5b 	bl	80007cc <lcd_clear>
                                lcd_put_cur(0, 0);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fc61 	bl	80007e0 <lcd_put_cur>
                                lcd_send_string("scan target card");
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <main+0x680>)
 8000f20:	f7ff fcba 	bl	8000898 <lcd_send_string>
                                lcd_put_cur(1, 0);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fc5a 	bl	80007e0 <lcd_put_cur>
                                lcd_send_string("                ");
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <main+0x684>)
 8000f2e:	f7ff fcb3 	bl	8000898 <lcd_send_string>

                            	continue;
 8000f32:	bf00      	nop
                        uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000f34:	e6ae      	b.n	8000c94 <main+0x3d0>
 8000f36:	bf00      	nop
 8000f38:	0800f364 	.word	0x0800f364
 8000f3c:	24000d30 	.word	0x24000d30
 8000f40:	24000784 	.word	0x24000784
 8000f44:	0800f368 	.word	0x0800f368
 8000f48:	0800f2f0 	.word	0x0800f2f0
 8000f4c:	0800f37c 	.word	0x0800f37c
 8000f50:	0800f328 	.word	0x0800f328
 8000f54:	0800f32c 	.word	0x0800f32c
 8000f58:	0800f344 	.word	0x0800f344
 8000f5c:	0800f34c 	.word	0x0800f34c
 8000f60:	0800f3a0 	.word	0x0800f3a0
 8000f64:	0800f360 	.word	0x0800f360
 8000f68:	0800f2dc 	.word	0x0800f2dc
 8000f6c:	0800f3b4 	.word	0x0800f3b4
 8000f70:	0800f3c0 	.word	0x0800f3c0
 8000f74:	0800f3d8 	.word	0x0800f3d8
 8000f78:	0800f3dc 	.word	0x0800f3dc
 8000f7c:	0800f3ec 	.word	0x0800f3ec
 8000f80:	0800f3f4 	.word	0x0800f3f4
                        	break;
                        }*/
                    }
                }
                else{
                	lcd_put_cur(0, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fc2a 	bl	80007e0 <lcd_put_cur>
                	lcd_clear();
 8000f8c:	f7ff fc1e 	bl	80007cc <lcd_clear>
                	lcd_send_string("read error");
 8000f90:	4832      	ldr	r0, [pc, #200]	@ (800105c <main+0x798>)
 8000f92:	f7ff fc81 	bl	8000898 <lcd_send_string>
                	HAL_Delay(3000);
 8000f96:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f9a:	f003 f861 	bl	8004060 <HAL_Delay>

                    snprintf(SendBuffer, BUFSIZE, "%s" , "Error reading from card");
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <main+0x79c>)
 8000fa0:	4a30      	ldr	r2, [pc, #192]	@ (8001064 <main+0x7a0>)
 8000fa2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa6:	4830      	ldr	r0, [pc, #192]	@ (8001068 <main+0x7a4>)
 8000fa8:	f00d f912 	bl	800e1d0 <sniprintf>
                    HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8000fac:	482e      	ldr	r0, [pc, #184]	@ (8001068 <main+0x7a4>)
 8000fae:	f7ff f997 	bl	80002e0 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	2364      	movs	r3, #100	@ 0x64
 8000fb8:	492b      	ldr	r1, [pc, #172]	@ (8001068 <main+0x7a4>)
 8000fba:	482c      	ldr	r0, [pc, #176]	@ (800106c <main+0x7a8>)
 8000fbc:	f00b fb4c 	bl	800c658 <HAL_UART_Transmit>

                    lcd_clear();
 8000fc0:	f7ff fc04 	bl	80007cc <lcd_clear>
                    lcd_put_cur(0, 0);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fc0a 	bl	80007e0 <lcd_put_cur>
                    lcd_send_string("scan target card");
 8000fcc:	4828      	ldr	r0, [pc, #160]	@ (8001070 <main+0x7ac>)
 8000fce:	f7ff fc63 	bl	8000898 <lcd_send_string>
                    lcd_put_cur(1, 0);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fc03 	bl	80007e0 <lcd_put_cur>
                    lcd_send_string("                ");
 8000fda:	4826      	ldr	r0, [pc, #152]	@ (8001074 <main+0x7b0>)
 8000fdc:	f7ff fc5c 	bl	8000898 <lcd_send_string>

                	continue;
 8000fe0:	e035      	b.n	800104e <main+0x78a>
                }
            }
            else{
            	lcd_put_cur(0, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fbfb 	bl	80007e0 <lcd_put_cur>
            	lcd_clear();
 8000fea:	f7ff fbef 	bl	80007cc <lcd_clear>
            	lcd_send_string("authentication");
 8000fee:	4822      	ldr	r0, [pc, #136]	@ (8001078 <main+0x7b4>)
 8000ff0:	f7ff fc52 	bl	8000898 <lcd_send_string>
            	lcd_put_cur(1, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fbf2 	bl	80007e0 <lcd_put_cur>
            	lcd_send_string("error");
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <main+0x7b8>)
 8000ffe:	f7ff fc4b 	bl	8000898 <lcd_send_string>
            	HAL_Delay(3000);
 8001002:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001006:	f003 f82b 	bl	8004060 <HAL_Delay>

                snprintf(SendBuffer, BUFSIZE, "%s" , "Error authenticating block");
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <main+0x7bc>)
 800100c:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <main+0x7a0>)
 800100e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001012:	4815      	ldr	r0, [pc, #84]	@ (8001068 <main+0x7a4>)
 8001014:	f00d f8dc 	bl	800e1d0 <sniprintf>
                HAL_UART_Transmit(&huart3, SendBuffer, strlen(SendBuffer), 100);
 8001018:	4813      	ldr	r0, [pc, #76]	@ (8001068 <main+0x7a4>)
 800101a:	f7ff f961 	bl	80002e0 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	2364      	movs	r3, #100	@ 0x64
 8001024:	4910      	ldr	r1, [pc, #64]	@ (8001068 <main+0x7a4>)
 8001026:	4811      	ldr	r0, [pc, #68]	@ (800106c <main+0x7a8>)
 8001028:	f00b fb16 	bl	800c658 <HAL_UART_Transmit>

                lcd_clear();
 800102c:	f7ff fbce 	bl	80007cc <lcd_clear>
                lcd_put_cur(0, 0);
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fbd4 	bl	80007e0 <lcd_put_cur>
                lcd_send_string("scan target card");
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <main+0x7ac>)
 800103a:	f7ff fc2d 	bl	8000898 <lcd_send_string>
                lcd_put_cur(1, 0);
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff fbcd 	bl	80007e0 <lcd_put_cur>
                lcd_send_string("                ");
 8001046:	480b      	ldr	r0, [pc, #44]	@ (8001074 <main+0x7b0>)
 8001048:	f7ff fc26 	bl	8000898 <lcd_send_string>

            	continue;
 800104c:	bf00      	nop
        uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800104e:	e504      	b.n	8000a5a <main+0x196>
        	HAL_Delay(3000);
        	break;
        }*/
    }
    /* USER CODE END 3 */
}
 8001050:	4618      	mov	r0, r3
 8001052:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	0800f410 	.word	0x0800f410
 8001060:	0800f41c 	.word	0x0800f41c
 8001064:	0800f3d8 	.word	0x0800f3d8
 8001068:	24000d30 	.word	0x24000d30
 800106c:	24000784 	.word	0x24000784
 8001070:	0800f368 	.word	0x0800f368
 8001074:	0800f2f0 	.word	0x0800f2f0
 8001078:	0800f3dc 	.word	0x0800f3dc
 800107c:	0800f3ec 	.word	0x0800f3ec
 8001080:	0800f434 	.word	0x0800f434

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09c      	sub	sp, #112	@ 0x70
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	224c      	movs	r2, #76	@ 0x4c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00d f913 	bl	800e2be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d f90d 	bl	800e2be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f006 fcd5 	bl	8007a54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b34      	ldr	r3, [pc, #208]	@ (8001180 <SystemClock_Config+0xfc>)
 80010b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b2:	4a33      	ldr	r2, [pc, #204]	@ (8001180 <SystemClock_Config+0xfc>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <SystemClock_Config+0xfc>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001184 <SystemClock_Config+0x100>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001184 <SystemClock_Config+0x100>)
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <SystemClock_Config+0x100>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010e0:	bf00      	nop
 80010e2:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <SystemClock_Config+0x100>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ee:	d1f8      	bne.n	80010e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80010f0:	230b      	movs	r3, #11
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010f4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2340      	movs	r3, #64	@ 0x40
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	2302      	movs	r3, #2
 800110c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800110e:	2316      	movs	r3, #22
 8001110:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8001112:	23a9      	movs	r3, #169	@ 0xa9
 8001114:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800111a:	2304      	movs	r3, #4
 800111c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800111e:	2302      	movs	r3, #2
 8001120:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001122:	2300      	movs	r3, #0
 8001124:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001126:	2300      	movs	r3, #0
 8001128:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	4618      	mov	r0, r3
 8001134:	f006 fd92 	bl	8007c5c <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800113e:	f000 ffe1 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	233f      	movs	r3, #63	@ 0x3f
 8001144:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f007 f9d2 	bl	8008510 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001172:	f000 ffc7 	bl	8002104 <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3770      	adds	r7, #112	@ 0x70
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	58000400 	.word	0x58000400
 8001184:	58024800 	.word	0x58024800

08001188 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0b0      	sub	sp, #192	@ 0xc0
 800118c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	22c0      	movs	r2, #192	@ 0xc0
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00d f892 	bl	800e2be <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80011aa:	230c      	movs	r3, #12
 80011ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80011ae:	2305      	movs	r3, #5
 80011b0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011ba:	23c0      	movs	r3, #192	@ 0xc0
 80011bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011be:	2320      	movs	r3, #32
 80011c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fd2a 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011da:	f000 ff93 	bl	8002104 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	37c0      	adds	r7, #192	@ 0xc0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800120c:	4b35      	ldr	r3, [pc, #212]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800120e:	4a36      	ldr	r2, [pc, #216]	@ (80012e8 <MX_ADC1_Init+0x100>)
 8001210:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800121a:	2204      	movs	r2, #4
 800121c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001220:	2200      	movs	r2, #0
 8001222:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001224:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001226:	2200      	movs	r2, #0
 8001228:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800122c:	2201      	movs	r2, #1
 800122e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001242:	4b28      	ldr	r3, [pc, #160]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001248:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800124e:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800125c:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800125e:	2201      	movs	r2, #1
 8001260:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001262:	4820      	ldr	r0, [pc, #128]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001264:	f003 f8e2 	bl	800442c <HAL_ADC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800126e:	f000 ff49 	bl	8002104 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127e:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 8001280:	f003 f8d4 	bl	800442c <HAL_ADC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800128a:	f000 ff3b 	bl	8002104 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 800129a:	f003 fef7 	bl	800508c <HAL_ADCEx_MultiModeConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80012a4:	f000 ff2e 	bl	8002104 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ac:	2306      	movs	r3, #6
 80012ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ba:	2304      	movs	r3, #4
 80012bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <MX_ADC1_Init+0xfc>)
 80012cc:	f003 fa50 	bl	8004770 <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80012d6:	f000 ff15 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000180 	.word	0x24000180
 80012e8:	40022000 	.word	0x40022000

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001306:	4a2f      	ldr	r2, [pc, #188]	@ (80013c4 <MX_ADC2_Init+0xd8>)
 8001308:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001310:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001312:	2204      	movs	r2, #4
 8001314:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001318:	2200      	movs	r2, #0
 800131a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800131c:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800131e:	2200      	movs	r2, #0
 8001320:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001324:	2201      	movs	r2, #1
 8001326:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800132a:	2200      	movs	r2, #0
 800132c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001336:	2200      	movs	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001348:	2200      	movs	r2, #0
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001356:	2201      	movs	r2, #1
 8001358:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800135a:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800135c:	f003 f866 	bl	800442c <HAL_ADC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001366:	f000 fecd 	bl	8002104 <Error_Handler>
  }
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001376:	4812      	ldr	r0, [pc, #72]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 8001378:	f003 f858 	bl	800442c <HAL_ADC_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC2_Init+0x9a>
  {
    Error_Handler();
 8001382:	f000 febf 	bl	8002104 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001386:	2301      	movs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001396:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001398:	2304      	movs	r3, #4
 800139a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_ADC2_Init+0xd4>)
 80013aa:	f003 f9e1 	bl	8004770 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80013b4:	f000 fea6 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	240001e4 	.word	0x240001e4
 80013c4:	40022100 	.word	0x40022100

080013c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <MX_ADC3_Init+0xd4>)
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <MX_ADC3_Init+0xd8>)
 80013e4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <MX_ADC3_Init+0xd4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <MX_ADC3_Init+0xd4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_ADC3_Init+0xd4>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013f8:	4b28      	ldr	r3, [pc, #160]	@ (800149c <MX_ADC3_Init+0xd4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001400:	2200      	movs	r2, #0
 8001402:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001406:	2201      	movs	r2, #1
 8001408:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <MX_ADC3_Init+0xd4>)
 800140c:	2200      	movs	r2, #0
 800140e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800141c:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <MX_ADC3_Init+0xd4>)
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <MX_ADC3_Init+0xd4>)
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001438:	2201      	movs	r2, #1
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <MX_ADC3_Init+0xd4>)
 800143e:	f002 fff5 	bl	800442c <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001448:	f000 fe5c 	bl	8002104 <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800144c:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_ADC3_Init+0xd4>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001452:	4812      	ldr	r0, [pc, #72]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001454:	f002 ffea 	bl	800442c <HAL_ADC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800145e:	f000 fe51 	bl	8002104 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_ADC3_Init+0xdc>)
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001466:	2306      	movs	r3, #6
 8001468:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001474:	2304      	movs	r3, #4
 8001476:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_ADC3_Init+0xd4>)
 8001486:	f003 f973 	bl	8004770 <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001490:	f000 fe38 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24000248 	.word	0x24000248
 80014a0:	58026000 	.word	0x58026000
 80014a4:	1d500080 	.word	0x1d500080

080014a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <MX_ETH_Init+0x80>)
 80014ae:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <MX_ETH_Init+0x84>)
 80014b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ETH_Init+0x88>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_ETH_Init+0x88>)
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ETH_Init+0x88>)
 80014c0:	22e1      	movs	r2, #225	@ 0xe1
 80014c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_ETH_Init+0x88>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ETH_Init+0x88>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ETH_Init+0x88>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_ETH_Init+0x80>)
 80014d8:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <MX_ETH_Init+0x88>)
 80014da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <MX_ETH_Init+0x80>)
 80014de:	2200      	movs	r2, #0
 80014e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_ETH_Init+0x80>)
 80014e4:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <MX_ETH_Init+0x8c>)
 80014e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_ETH_Init+0x80>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <MX_ETH_Init+0x90>)
 80014ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_ETH_Init+0x80>)
 80014f0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80014f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MX_ETH_Init+0x80>)
 80014f8:	f003 ff8a 	bl	8005410 <HAL_ETH_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001502:	f000 fdff 	bl	8002104 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001506:	2238      	movs	r2, #56	@ 0x38
 8001508:	2100      	movs	r1, #0
 800150a:	480c      	ldr	r0, [pc, #48]	@ (800153c <MX_ETH_Init+0x94>)
 800150c:	f00c fed7 	bl	800e2be <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_ETH_Init+0x94>)
 8001512:	2221      	movs	r2, #33	@ 0x21
 8001514:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_ETH_Init+0x94>)
 8001518:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800151c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_ETH_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	240002ac 	.word	0x240002ac
 800152c:	40028000 	.word	0x40028000
 8001530:	24000e30 	.word	0x24000e30
 8001534:	240000cc 	.word	0x240000cc
 8001538:	2400006c 	.word	0x2400006c
 800153c:	24000148 	.word	0x24000148

08001540 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001544:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001546:	4a2f      	ldr	r2, [pc, #188]	@ (8001604 <MX_FDCAN1_Init+0xc4>)
 8001548:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800154a:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001558:	2200      	movs	r2, #0
 800155a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800155e:	2200      	movs	r2, #0
 8001560:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001564:	2200      	movs	r2, #0
 8001566:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800156a:	2210      	movs	r2, #16
 800156c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001570:	2201      	movs	r2, #1
 8001572:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001576:	2202      	movs	r2, #2
 8001578:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800157c:	2202      	movs	r2, #2
 800157e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001582:	2201      	movs	r2, #1
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001588:	2201      	movs	r2, #1
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800158e:	2201      	movs	r2, #1
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 8001594:	2201      	movs	r2, #1
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800159e:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80015a4:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015be:	2204      	movs	r2, #4
 80015c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015e8:	2204      	movs	r2, #4
 80015ea:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	@ (8001600 <MX_FDCAN1_Init+0xc0>)
 80015ee:	f004 fb43 	bl	8005c78 <HAL_FDCAN_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80015f8:	f000 fd84 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2400035c 	.word	0x2400035c
 8001604:	4000a000 	.word	0x4000a000

08001608 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800160c:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800160e:	4a2f      	ldr	r2, [pc, #188]	@ (80016cc <MX_FDCAN2_Init+0xc4>)
 8001610:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001612:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800161e:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001620:	2200      	movs	r2, #0
 8001622:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001626:	2200      	movs	r2, #0
 8001628:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800162a:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800162c:	2200      	movs	r2, #0
 800162e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001630:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001632:	2210      	movs	r2, #16
 8001634:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001636:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001638:	2201      	movs	r2, #1
 800163a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800163e:	2202      	movs	r2, #2
 8001640:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001644:	2202      	movs	r2, #2
 8001646:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800164a:	2201      	movs	r2, #1
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001650:	2201      	movs	r2, #1
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001656:	2201      	movs	r2, #1
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800165a:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800165c:	2201      	movs	r2, #1
 800165e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800167a:	2204      	movs	r2, #4
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001680:	2200      	movs	r2, #0
 8001682:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001684:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001686:	2204      	movs	r2, #4
 8001688:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800168c:	2200      	movs	r2, #0
 800168e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001690:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001692:	2204      	movs	r2, #4
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80016b4:	4804      	ldr	r0, [pc, #16]	@ (80016c8 <MX_FDCAN2_Init+0xc0>)
 80016b6:	f004 fadf 	bl	8005c78 <HAL_FDCAN_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80016c0:	f000 fd20 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	240003fc 	.word	0x240003fc
 80016cc:	4000a400 	.word	0x4000a400

080016d0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001748 <MX_I2C4_Init+0x78>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016dc:	4a1b      	ldr	r2, [pc, #108]	@ (800174c <MX_I2C4_Init+0x7c>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C4_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C4_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C4_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800170a:	480e      	ldr	r0, [pc, #56]	@ (8001744 <MX_I2C4_Init+0x74>)
 800170c:	f004 ffe2 	bl	80066d4 <HAL_I2C_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001716:	f000 fcf5 	bl	8002104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4809      	ldr	r0, [pc, #36]	@ (8001744 <MX_I2C4_Init+0x74>)
 800171e:	f005 fd29 	bl	8007174 <HAL_I2CEx_ConfigAnalogFilter>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001728:	f000 fcec 	bl	8002104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_I2C4_Init+0x74>)
 8001730:	f005 fd6b 	bl	800720a <HAL_I2CEx_ConfigDigitalFilter>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800173a:	f000 fce3 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2400049c 	.word	0x2400049c
 8001748:	58001c00 	.word	0x58001c00
 800174c:	10707dbc 	.word	0x10707dbc

08001750 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09a      	sub	sp, #104	@ 0x68
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001756:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800175a:	2234      	movs	r2, #52	@ 0x34
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00c fdad 	bl	800e2be <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2234      	movs	r2, #52	@ 0x34
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f00c fda7 	bl	800e2be <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001770:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001772:	4a4f      	ldr	r2, [pc, #316]	@ (80018b0 <MX_LTDC_Init+0x160>)
 8001774:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <MX_LTDC_Init+0x15c>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <MX_LTDC_Init+0x15c>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800178e:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001790:	2207      	movs	r2, #7
 8001792:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001794:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001796:	2203      	movs	r2, #3
 8001798:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800179a:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <MX_LTDC_Init+0x15c>)
 800179c:	220e      	movs	r2, #14
 800179e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80017a0:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017a2:	2205      	movs	r2, #5
 80017a4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80017a6:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017a8:	f240 228e 	movw	r2, #654	@ 0x28e
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80017ae:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017b0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80017b6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017b8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80017bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017c0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80017c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017c6:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017de:	4833      	ldr	r0, [pc, #204]	@ (80018ac <MX_LTDC_Init+0x15c>)
 80017e0:	f005 fd60 	bl	80072a4 <HAL_LTDC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80017ea:	f000 fc8b 	bl	8002104 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800180a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800180e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001810:	2305      	movs	r3, #5
 8001812:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001832:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	481c      	ldr	r0, [pc, #112]	@ (80018ac <MX_LTDC_Init+0x15c>)
 800183c:	f005 fe02 	bl	8007444 <HAL_LTDC_ConfigLayer>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001846:	f000 fc5d 	bl	8002104 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800186c:	2305      	movs	r3, #5
 800186e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	2201      	movs	r2, #1
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_LTDC_Init+0x15c>)
 8001896:	f005 fdd5 	bl	8007444 <HAL_LTDC_ConfigLayer>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80018a0:	f000 fc30 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	3768      	adds	r7, #104	@ 0x68
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	240004f0 	.word	0x240004f0
 80018b0:	50001000 	.word	0x50001000

080018b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <MX_QUADSPI_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018c0:	22ff      	movs	r2, #255	@ 0xff
 80018c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_QUADSPI_Init+0x50>)
 80018f0:	f006 f8fa 	bl	8007ae8 <HAL_QSPI_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80018fa:	f000 fc03 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000598 	.word	0x24000598
 8001908:	52005000 	.word	0x52005000

0800190c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001910:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_RTC_Init+0x48>)
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <MX_RTC_Init+0x4c>)
 8001914:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <MX_RTC_Init+0x48>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800191c:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <MX_RTC_Init+0x48>)
 800191e:	227f      	movs	r2, #127	@ 0x7f
 8001920:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_RTC_Init+0x48>)
 8001924:	22ff      	movs	r2, #255	@ 0xff
 8001926:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <MX_RTC_Init+0x48>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_RTC_Init+0x48>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001934:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <MX_RTC_Init+0x48>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_RTC_Init+0x48>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <MX_RTC_Init+0x48>)
 8001942:	f009 fe6f 	bl	800b624 <HAL_RTC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800194c:	f000 fbda 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	240005e4 	.word	0x240005e4
 8001958:	58004000 	.word	0x58004000

0800195c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001960:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001962:	4a59      	ldr	r2, [pc, #356]	@ (8001ac8 <MX_SAI2_Init+0x16c>)
 8001964:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001966:	4b57      	ldr	r3, [pc, #348]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001968:	2200      	movs	r2, #0
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800196c:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001972:	4b54      	ldr	r3, [pc, #336]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001974:	2240      	movs	r2, #64	@ 0x40
 8001976:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001978:	4b52      	ldr	r3, [pc, #328]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 800197a:	2200      	movs	r2, #0
 800197c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800197e:	4b51      	ldr	r3, [pc, #324]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001980:	2200      	movs	r2, #0
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001984:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800198a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001990:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001996:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800199c:	4b49      	ldr	r3, [pc, #292]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 800199e:	4a4b      	ldr	r2, [pc, #300]	@ (8001acc <MX_SAI2_Init+0x170>)
 80019a0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019a2:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80019a8:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80019ae:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019b4:	4b43      	ldr	r3, [pc, #268]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80019ba:	4b42      	ldr	r3, [pc, #264]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 80019c2:	4b40      	ldr	r3, [pc, #256]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80019d0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019d2:	2208      	movs	r2, #8
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80019d6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019d8:	2201      	movs	r2, #1
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80019dc:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019de:	2200      	movs	r2, #0
 80019e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80019e2:	4b38      	ldr	r3, [pc, #224]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80019e8:	4b36      	ldr	r3, [pc, #216]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80019ee:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80019f4:	4b33      	ldr	r3, [pc, #204]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80019fa:	4b32      	ldr	r3, [pc, #200]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001a00:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001a06:	482f      	ldr	r0, [pc, #188]	@ (8001ac4 <MX_SAI2_Init+0x168>)
 8001a08:	f009 ff24 	bl	800b854 <HAL_SAI_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001a12:	f000 fb77 	bl	8002104 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001a16:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a18:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad4 <MX_SAI2_Init+0x178>)
 8001a1a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a2a:	2240      	movs	r2, #64	@ 0x40
 8001a2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a34:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001ab0:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <MX_SAI2_Init+0x174>)
 8001ab2:	f009 fecf 	bl	800b854 <HAL_SAI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001abc:	f000 fb22 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	24000608 	.word	0x24000608
 8001ac8:	40015c04 	.word	0x40015c04
 8001acc:	0002ee00 	.word	0x0002ee00
 8001ad0:	240006a0 	.word	0x240006a0
 8001ad4:	40015c24 	.word	0x40015c24

08001ad8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001af6:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001af8:	4a20      	ldr	r2, [pc, #128]	@ (8001b7c <MX_TIM1_Init+0xa4>)
 8001afa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b22:	4815      	ldr	r0, [pc, #84]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b24:	f00a f9b6 	bl	800be94 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b2e:	f000 fae9 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480e      	ldr	r0, [pc, #56]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b40:	f00a fa70 	bl	800c024 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b4a:	f000 fadb 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <MX_TIM1_Init+0xa0>)
 8001b60:	f00a fc9c 	bl	800c49c <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b6a:	f000 facb 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24000738 	.word	0x24000738
 8001b7c:	40010000 	.word	0x40010000

08001b80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b84:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001b86:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <MX_USART3_UART_Init+0x94>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bca:	f00a fcf5 	bl	800c5b8 <HAL_UART_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001bd4:	f000 fa96 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bdc:	f00b fd8b 	bl	800d6f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001be6:	f000 fa8d 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bea:	2100      	movs	r1, #0
 8001bec:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bee:	f00b fdc0 	bl	800d772 <HAL_UARTEx_SetRxFifoThreshold>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f000 fa84 	bl	8002104 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <MX_USART3_UART_Init+0x90>)
 8001bfe:	f00b fd41 	bl	800d684 <HAL_UARTEx_DisableFifoMode>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f000 fa7c 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	24000784 	.word	0x24000784
 8001c14:	40004800 	.word	0x40004800

08001c18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001c20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c24:	2209      	movs	r2, #9
 8001c26:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c28:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c60:	f005 fdc8 	bl	80077f4 <HAL_PCD_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001c6a:	f000 fa4b 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	24000818 	.word	0x24000818
 8001c78:	40080000 	.word	0x40080000

08001c7c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c94:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <MX_FMC_Init+0x98>)
 8001c98:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001ca8:	2204      	movs	r2, #4
 8001caa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cae:	2210      	movs	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cb4:	2240      	movs	r2, #64	@ 0x40
 8001cb6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001cea:	2310      	movs	r3, #16
 8001cec:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001cee:	2310      	movs	r3, #16
 8001cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <MX_FMC_Init+0x94>)
 8001cf8:	f00a f890 	bl	800be1c <HAL_SDRAM_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001d02:	f000 f9ff 	bl	8002104 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d06:	bf00      	nop
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24000cfc 	.word	0x24000cfc
 8001d14:	52004140 	.word	0x52004140

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b090      	sub	sp, #64	@ 0x40
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d2e:	4bc1      	ldr	r3, [pc, #772]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	4abf      	ldr	r2, [pc, #764]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	4bbd      	ldr	r3, [pc, #756]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	4bb9      	ldr	r3, [pc, #740]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	4ab8      	ldr	r2, [pc, #736]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d5c:	4bb5      	ldr	r3, [pc, #724]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d6a:	4bb2      	ldr	r3, [pc, #712]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	4ab0      	ldr	r2, [pc, #704]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d7a:	4bae      	ldr	r3, [pc, #696]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d88:	4baa      	ldr	r3, [pc, #680]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	4aa9      	ldr	r2, [pc, #676]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d98:	4ba6      	ldr	r3, [pc, #664]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	4ba3      	ldr	r3, [pc, #652]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	4aa1      	ldr	r2, [pc, #644]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db6:	4b9f      	ldr	r3, [pc, #636]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	4a9a      	ldr	r2, [pc, #616]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd4:	4b97      	ldr	r3, [pc, #604]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de2:	4b94      	ldr	r3, [pc, #592]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	4a92      	ldr	r2, [pc, #584]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df2:	4b90      	ldr	r3, [pc, #576]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e00:	4b8c      	ldr	r3, [pc, #560]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e06:	4a8b      	ldr	r2, [pc, #556]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e10:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1e:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e24:	4a83      	ldr	r2, [pc, #524]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2e:	4b81      	ldr	r3, [pc, #516]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	4a7c      	ldr	r2, [pc, #496]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4c:	4b79      	ldr	r3, [pc, #484]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5a:	4b76      	ldr	r3, [pc, #472]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e60:	4a74      	ldr	r2, [pc, #464]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e62:	f043 0320 	orr.w	r3, r3, #32
 8001e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e6a:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <MX_GPIO_Init+0x31c>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e7e:	486e      	ldr	r0, [pc, #440]	@ (8002038 <MX_GPIO_Init+0x320>)
 8001e80:	f004 fc0e 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PN532_RSTS_Pin|D6_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2148      	movs	r1, #72	@ 0x48
 8001e88:	486c      	ldr	r0, [pc, #432]	@ (800203c <MX_GPIO_Init+0x324>)
 8001e8a:	f004 fc09 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8001e94:	486a      	ldr	r0, [pc, #424]	@ (8002040 <MX_GPIO_Init+0x328>)
 8001e96:	f004 fc03 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D5_Pin|RS_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001ea0:	4868      	ldr	r0, [pc, #416]	@ (8002044 <MX_GPIO_Init+0x32c>)
 8001ea2:	f004 fbfd 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	4867      	ldr	r0, [pc, #412]	@ (8002048 <MX_GPIO_Init+0x330>)
 8001eac:	f004 fbf8 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4865      	ldr	r0, [pc, #404]	@ (800204c <MX_GPIO_Init+0x334>)
 8001eb6:	f004 fbf3 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4864      	ldr	r0, [pc, #400]	@ (8002050 <MX_GPIO_Init+0x338>)
 8001ec0:	f004 fbee 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f241 0104 	movw	r1, #4100	@ 0x1004
 8001eca:	4862      	ldr	r0, [pc, #392]	@ (8002054 <MX_GPIO_Init+0x33c>)
 8001ecc:	f004 fbe8 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	4860      	ldr	r0, [pc, #384]	@ (8002058 <MX_GPIO_Init+0x340>)
 8001ed6:	f004 fbe3 	bl	80066a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8001eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4851      	ldr	r0, [pc, #324]	@ (8002038 <MX_GPIO_Init+0x320>)
 8001ef4:	f004 fa24 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4854      	ldr	r0, [pc, #336]	@ (800205c <MX_GPIO_Init+0x344>)
 8001f0c:	f004 fa18 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001f10:	2330      	movs	r3, #48	@ 0x30
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001f20:	230a      	movs	r3, #10
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4844      	ldr	r0, [pc, #272]	@ (800203c <MX_GPIO_Init+0x324>)
 8001f2c:	f004 fa08 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_RSTS_Pin D6_Pin */
  GPIO_InitStruct.Pin = PN532_RSTS_Pin|D6_Pin;
 8001f30:	2348      	movs	r3, #72	@ 0x48
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f44:	4619      	mov	r1, r3
 8001f46:	483d      	ldr	r0, [pc, #244]	@ (800203c <MX_GPIO_Init+0x324>)
 8001f48:	f004 f9fa 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_ID_Pin OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin|OTG_FS2_PSO_Pin;
 8001f4c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4838      	ldr	r0, [pc, #224]	@ (8002044 <MX_GPIO_Init+0x32c>)
 8001f62:	f004 f9ed 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4835      	ldr	r0, [pc, #212]	@ (8002050 <MX_GPIO_Init+0x338>)
 8001f7c:	f004 f9e0 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_REQ_Pin LD2_Pin */
  GPIO_InitStruct.Pin = PN532_REQ_Pin|LD2_Pin;
 8001f80:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f96:	4619      	mov	r1, r3
 8001f98:	4829      	ldr	r0, [pc, #164]	@ (8002040 <MX_GPIO_Init+0x328>)
 8001f9a:	f004 f9d1 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|RS_Pin;
 8001f9e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4823      	ldr	r0, [pc, #140]	@ (8002044 <MX_GPIO_Init+0x32c>)
 8001fb8:	f004 f9c2 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001fcc:	2306      	movs	r3, #6
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481c      	ldr	r0, [pc, #112]	@ (8002048 <MX_GPIO_Init+0x330>)
 8001fd8:	f004 f9b2 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : RW_Pin */
  GPIO_InitStruct.Pin = RW_Pin;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4815      	ldr	r0, [pc, #84]	@ (8002048 <MX_GPIO_Init+0x330>)
 8001ff4:	f004 f9a4 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002000:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800200a:	4619      	mov	r1, r3
 800200c:	480e      	ldr	r0, [pc, #56]	@ (8002048 <MX_GPIO_Init+0x330>)
 800200e:	f004 f997 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8002012:	2301      	movs	r3, #1
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002022:	4619      	mov	r1, r3
 8002024:	4809      	ldr	r0, [pc, #36]	@ (800204c <MX_GPIO_Init+0x334>)
 8002026:	f004 f98b 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 800202a:	2302      	movs	r3, #2
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <MX_GPIO_Init+0x348>
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	58021c00 	.word	0x58021c00
 800203c:	58021000 	.word	0x58021000
 8002040:	58022000 	.word	0x58022000
 8002044:	58020000 	.word	0x58020000
 8002048:	58021800 	.word	0x58021800
 800204c:	58022800 	.word	0x58022800
 8002050:	58020800 	.word	0x58020800
 8002054:	58020400 	.word	0x58020400
 8002058:	58022400 	.word	0x58022400
 800205c:	58020c00 	.word	0x58020c00
 8002060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206e:	4619      	mov	r1, r3
 8002070:	481f      	ldr	r0, [pc, #124]	@ (80020f0 <MX_GPIO_Init+0x3d8>)
 8002072:	f004 f965 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8002076:	2301      	movs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	4819      	ldr	r0, [pc, #100]	@ (80020f4 <MX_GPIO_Init+0x3dc>)
 800208e:	f004 f957 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 8002092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002098:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a6:	4619      	mov	r1, r3
 80020a8:	4813      	ldr	r0, [pc, #76]	@ (80020f8 <MX_GPIO_Init+0x3e0>)
 80020aa:	f004 f949 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 80020ae:	f241 0304 	movw	r3, #4100	@ 0x1004
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_GPIO_Init+0x3e4>)
 80020c8:	f004 f93a 	bl	8006340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80020cc:	2304      	movs	r3, #4
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	@ (8002100 <MX_GPIO_Init+0x3e8>)
 80020e4:	f004 f92c 	bl	8006340 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020e8:	bf00      	nop
 80020ea:	3740      	adds	r7, #64	@ 0x40
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58022800 	.word	0x58022800
 80020f4:	58020800 	.word	0x58020800
 80020f8:	58021c00 	.word	0x58021c00
 80020fc:	58020400 	.word	0x58020400
 8002100:	58022400 	.word	0x58022400

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <Error_Handler+0x8>

08002110 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b0c8      	sub	sp, #288	@ 0x120
 8002114:	af00      	add	r7, sp, #0
 8002116:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800211a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800211e:	6018      	str	r0, [r3, #0]
 8002120:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002124:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002128:	6019      	str	r1, [r3, #0]
 800212a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800212e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8002132:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8002134:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002138:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	2bff      	cmp	r3, #255	@ 0xff
 8002140:	d806      	bhi.n	8002150 <PN532_WriteFrame+0x40>
 8002142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002146:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	e0aa      	b.n	80022ac <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 800215c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002160:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8002168:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800216c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002170:	2200      	movs	r2, #0
 8002172:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8002174:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002178:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800217c:	22ff      	movs	r2, #255	@ 0xff
 800217e:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002186:	e010      	b.n	80021aa <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8002188:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800218c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002190:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002194:	5cd2      	ldrb	r2, [r2, r3]
 8002196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800219a:	4413      	add	r3, r2
 800219c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80021a0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80021a4:	3301      	adds	r3, #1
 80021a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80021aa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d9ea      	bls.n	8002188 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80021b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021b6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021c6:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80021c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021cc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	425b      	negs	r3, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021e0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80021e8:	e023      	b.n	8002232 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 80021ea:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80021ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80021f2:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	441a      	add	r2, r3
 80021fa:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80021fe:	3305      	adds	r3, #5
 8002200:	7811      	ldrb	r1, [r2, #0]
 8002202:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002206:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800220a:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 800220c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002210:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002214:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4413      	add	r3, r2
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002222:	4413      	add	r3, r2
 8002224:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8002228:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800222c:	3301      	adds	r3, #1
 800222e:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8002232:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002236:	b29b      	uxth	r3, r3
 8002238:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800223c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8002240:	8812      	ldrh	r2, [r2, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d8d1      	bhi.n	80021ea <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8002246:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800224a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	3305      	adds	r3, #5
 8002252:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8002256:	43d2      	mvns	r2, r2
 8002258:	b2d1      	uxtb	r1, r2
 800225a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800225e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002262:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8002264:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002268:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	3306      	adds	r3, #6
 8002270:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002274:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002278:	2100      	movs	r1, #0
 800227a:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 800227c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002280:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800228c:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	3207      	adds	r2, #7
 8002294:	b291      	uxth	r1, r2
 8002296:	f107 0214 	add.w	r2, r7, #20
 800229a:	4610      	mov	r0, r2
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	e000      	b.n	80022ac <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0c8      	sub	sp, #288	@ 0x120
 80022bc:	af00      	add	r7, sp, #0
 80022be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022c6:	6018      	str	r0, [r3, #0]
 80022c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022d6:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80022da:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80022e2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80022f2:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	3207      	adds	r2, #7
 80022fa:	b291      	uxth	r1, r2
 80022fc:	f107 0214 	add.w	r2, r7, #20
 8002300:	4610      	mov	r0, r2
 8002302:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 800230a:	e019      	b.n	8002340 <PN532_ReadFrame+0x88>
        offset += 1;
 800230c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8002310:	3301      	adds	r3, #1
 8002312:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8002316:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800231a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	1dda      	adds	r2, r3, #7
 8002322:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8002326:	429a      	cmp	r2, r3
 8002328:	da0a      	bge.n	8002340 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 800232a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800232e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	485b      	ldr	r0, [pc, #364]	@ (80024a4 <PN532_ReadFrame+0x1ec>)
 8002338:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e0ab      	b.n	8002498 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8002340:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8002344:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002348:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0dc      	beq.n	800230c <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8002352:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8002356:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800235a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	2bff      	cmp	r3, #255	@ 0xff
 8002362:	d00a      	beq.n	800237a <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8002364:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002368:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	484c      	ldr	r0, [pc, #304]	@ (80024a4 <PN532_ReadFrame+0x1ec>)
 8002372:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	e08e      	b.n	8002498 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 800237a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800237e:	3301      	adds	r3, #1
 8002380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8002384:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002388:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	1dda      	adds	r2, r3, #7
 8002390:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8002394:	429a      	cmp	r2, r3
 8002396:	da0a      	bge.n	80023ae <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8002398:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800239c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	4840      	ldr	r0, [pc, #256]	@ (80024a8 <PN532_ReadFrame+0x1f0>)
 80023a6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	e074      	b.n	8002498 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80023ae:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80023b2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80023b6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80023c0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80023c4:	3301      	adds	r3, #1
 80023c6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80023ca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80023ce:	5cd2      	ldrb	r2, [r2, r3]
 80023d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80023d4:	4413      	add	r3, r2
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 80023dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4830      	ldr	r0, [pc, #192]	@ (80024ac <PN532_ReadFrame+0x1f4>)
 80023ea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e052      	b.n	8002498 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80023f8:	e014      	b.n	8002424 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 80023fa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002404:	4413      	add	r3, r2
 8002406:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800240a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800240e:	5cd2      	ldrb	r2, [r2, r3]
 8002410:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002414:	4413      	add	r3, r2
 8002416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800241a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800241e:	3301      	adds	r3, #1
 8002420:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8002424:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8002428:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800242c:	429a      	cmp	r2, r3
 800242e:	d2e4      	bcs.n	80023fa <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8002430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8002438:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800243c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	481a      	ldr	r0, [pc, #104]	@ (80024b0 <PN532_ReadFrame+0x1f8>)
 8002446:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	e024      	b.n	8002498 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 800244e:	2300      	movs	r3, #0
 8002450:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8002454:	e018      	b.n	8002488 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8002456:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8002460:	441a      	add	r2, r3
 8002462:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8002466:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800246a:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800246e:	6809      	ldr	r1, [r1, #0]
 8002470:	440b      	add	r3, r1
 8002472:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8002476:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800247a:	5c8a      	ldrb	r2, [r1, r2]
 800247c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 800247e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8002482:	3301      	adds	r3, #1
 8002484:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8002488:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800248c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002490:	429a      	cmp	r2, r3
 8002492:	d3e0      	bcc.n	8002456 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8002494:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 8002498:	4618      	mov	r0, r3
 800249a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	0800f458 	.word	0x0800f458
 80024a8:	0800f48c 	.word	0x0800f48c
 80024ac:	0800f4a8 	.word	0x0800f4a8
 80024b0:	0800f4d8 	.word	0x0800f4d8

080024b4 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b0c7      	sub	sp, #284	@ 0x11c
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80024be:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 80024c2:	6020      	str	r0, [r4, #0]
 80024c4:	4608      	mov	r0, r1
 80024c6:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80024ca:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80024ce:	600a      	str	r2, [r1, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024d6:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80024da:	4602      	mov	r2, r0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024e6:	460a      	mov	r2, r1
 80024e8:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 80024ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024f2:	22d4      	movs	r2, #212	@ 0xd4
 80024f4:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 80024f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024fe:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002502:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002510:	e012      	b.n	8002538 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8002512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002516:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800251a:	441a      	add	r2, r3
 800251c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002520:	3302      	adds	r3, #2
 8002522:	7811      	ldrb	r1, [r2, #0]
 8002524:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8002528:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800252c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 800252e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002532:	3301      	adds	r3, #1
 8002534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800253c:	b29b      	uxth	r3, r3
 800253e:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8002542:	429a      	cmp	r2, r3
 8002544:	d8e5      	bhi.n	8002512 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8002546:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 800254a:	3302      	adds	r3, #2
 800254c:	b29a      	uxth	r2, r3
 800254e:	f107 0110 	add.w	r1, r7, #16
 8002552:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002556:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	f7ff fdd8 	bl	8002110 <PN532_WriteFrame>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d011      	beq.n	800258a <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8002566:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800256a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8002574:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	485b      	ldr	r0, [pc, #364]	@ (80026f0 <PN532_CallFunction+0x23c>)
 8002582:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	e0ac      	b.n	80026e4 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 800258a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800258e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800259a:	4798      	blx	r3
 800259c:	4603      	mov	r3, r0
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	e09a      	b.n	80026e4 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80025ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f107 0210 	add.w	r2, r7, #16
 80025be:	2106      	movs	r1, #6
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80025ca:	e01c      	b.n	8002606 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80025cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80025d0:	4a48      	ldr	r2, [pc, #288]	@ (80026f4 <PN532_CallFunction+0x240>)
 80025d2:	5cd2      	ldrb	r2, [r2, r3]
 80025d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80025d8:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80025dc:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d00a      	beq.n	80025fc <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80025e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80025ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4841      	ldr	r0, [pc, #260]	@ (80026f8 <PN532_CallFunction+0x244>)
 80025f4:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e073      	b.n	80026e4 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80025fc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002600:	3301      	adds	r3, #1
 8002602:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002606:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800260a:	2b05      	cmp	r3, #5
 800260c:	d9de      	bls.n	80025cc <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 800260e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
 8002622:	f083 0301 	eor.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	e058      	b.n	80026e4 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8002632:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002636:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	3302      	adds	r3, #2
 800263e:	b29a      	uxth	r2, r3
 8002640:	f107 0110 	add.w	r1, r7, #16
 8002644:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002648:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	f7ff fe33 	bl	80022b8 <PN532_ReadFrame>
 8002652:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8002656:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800265a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2bd5      	cmp	r3, #213	@ 0xd5
 8002662:	d10d      	bne.n	8002680 <PN532_CallFunction+0x1cc>
 8002664:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800266c:	785b      	ldrb	r3, [r3, #1]
 800266e:	461a      	mov	r2, r3
 8002670:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002674:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	429a      	cmp	r2, r3
 800267e:	d00a      	beq.n	8002696 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8002680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002684:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	481b      	ldr	r0, [pc, #108]	@ (80026fc <PN532_CallFunction+0x248>)
 800268e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	e026      	b.n	80026e4 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8002696:	2300      	movs	r3, #0
 8002698:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800269c:	e015      	b.n	80026ca <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 800269e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80026a2:	1c9a      	adds	r2, r3, #2
 80026a4:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80026a8:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80026ac:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80026b0:	6809      	ldr	r1, [r1, #0]
 80026b2:	440b      	add	r3, r1
 80026b4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80026b8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80026bc:	5c8a      	ldrb	r2, [r1, r2]
 80026be:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 80026c0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80026c4:	3301      	adds	r3, #1
 80026c6:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 80026ca:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80026d4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d8df      	bhi.n	800269e <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 80026de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80026e2:	3b02      	subs	r3, #2
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	0800f50c 	.word	0x0800f50c
 80026f4:	0800f630 	.word	0x0800f630
 80026f8:	0800f520 	.word	0x0800f520
 80026fc:	0800f54c 	.word	0x0800f54c

08002700 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af04      	add	r7, sp, #16
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 800270a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	2300      	movs	r3, #0
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2304      	movs	r3, #4
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	2102      	movs	r1, #2
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fec8 	bl	80024b4 <PN532_CallFunction>
 8002724:	4603      	mov	r3, r0
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d106      	bne.n	800273a <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <PN532_GetFirmwareVersion+0x44>)
 8002732:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	e000      	b.n	800273c <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	0800f574 	.word	0x0800f574

08002748 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af04      	add	r7, sp, #16
 800274e:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <PN532_SamConfiguration+0x40>)
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	4611      	mov	r1, r2
 800275a:	8019      	strh	r1, [r3, #0]
 800275c:	3302      	adds	r3, #2
 800275e:	0c12      	lsrs	r2, r2, #16
 8002760:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8002762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	2303      	movs	r3, #3
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2300      	movs	r3, #0
 8002774:	2200      	movs	r2, #0
 8002776:	2114      	movs	r1, #20
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fe9b 	bl	80024b4 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	0800f590 	.word	0x0800f590

0800278c <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	@ 0x40
 8002790:	af04      	add	r7, sp, #16
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 800279c:	2301      	movs	r3, #1
 800279e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80027a8:	f107 0210 	add.w	r2, r7, #16
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	2302      	movs	r3, #2
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2313      	movs	r3, #19
 80027bc:	214a      	movs	r1, #74	@ 0x4a
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff fe78 	bl	80024b4 <PN532_CallFunction>
 80027c4:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da02      	bge.n	80027d2 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	e02e      	b.n	8002830 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 80027d2:	7c3b      	ldrb	r3, [r7, #16]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d006      	beq.n	80027e6 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	4816      	ldr	r0, [pc, #88]	@ (8002838 <PN532_ReadPassiveTarget+0xac>)
 80027de:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	e024      	b.n	8002830 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 80027e6:	7d7b      	ldrb	r3, [r7, #21]
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	d906      	bls.n	80027fa <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4812      	ldr	r0, [pc, #72]	@ (800283c <PN532_ReadPassiveTarget+0xb0>)
 80027f2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	e01a      	b.n	8002830 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002800:	e010      	b.n	8002824 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002806:	1d9a      	adds	r2, r3, #6
 8002808:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	440b      	add	r3, r1
 8002810:	3230      	adds	r2, #48	@ 0x30
 8002812:	443a      	add	r2, r7
 8002814:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8002818:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 800281a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800281e:	3301      	adds	r3, #1
 8002820:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002824:	7d7b      	ldrb	r3, [r7, #21]
 8002826:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800282a:	429a      	cmp	r2, r3
 800282c:	d3e9      	bcc.n	8002802 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 800282e:	7d7b      	ldrb	r3, [r7, #21]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3730      	adds	r7, #48	@ 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0800f594 	.word	0x0800f594
 800283c:	0800f5b4 	.word	0x0800f5b4

08002840 <PN532_MifareClassicAuthenticateBlock>:
    uint8_t* uid,
    uint8_t uid_length,
    uint16_t block_number,
    uint16_t key_number,
    uint8_t* key
) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	@ 0x38
 8002844:	af04      	add	r7, sp, #16
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	460b      	mov	r3, r1
 8002850:	71fb      	strb	r3, [r7, #7]
 8002852:	4613      	mov	r3, r2
 8002854:	80bb      	strh	r3, [r7, #4]
    // Build parameters for InDataExchange command to authenticate MiFare card.
    uint8_t response[1] = {0xFF};
 8002856:	23ff      	movs	r3, #255	@ 0xff
 8002858:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t params[3 + MIFARE_UID_MAX_LENGTH + MIFARE_KEY_LENGTH];
    params[0] = 0x01;
 800285c:	2301      	movs	r3, #1
 800285e:	743b      	strb	r3, [r7, #16]
    params[1] = key_number & 0xFF;
 8002860:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002862:	b2db      	uxtb	r3, r3
 8002864:	747b      	strb	r3, [r7, #17]
    params[2] = block_number & 0xFF;
 8002866:	88bb      	ldrh	r3, [r7, #4]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	74bb      	strb	r3, [r7, #18]
    // params[3:3+keylen] = key
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002872:	e010      	b.n	8002896 <PN532_MifareClassicAuthenticateBlock+0x56>
        params[3 + i] = key[i];
 8002874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800287a:	441a      	add	r2, r3
 800287c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002880:	3303      	adds	r3, #3
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	3328      	adds	r3, #40	@ 0x28
 8002886:	443b      	add	r3, r7
 8002888:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < MIFARE_KEY_LENGTH; i++) {
 800288c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002890:	3301      	adds	r3, #1
 8002892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800289a:	2b05      	cmp	r3, #5
 800289c:	d9ea      	bls.n	8002874 <PN532_MifareClassicAuthenticateBlock+0x34>
    }
    // params[3+keylen:] = uid
    for (uint8_t i = 0; i < uid_length; i++) {
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028a4:	e010      	b.n	80028c8 <PN532_MifareClassicAuthenticateBlock+0x88>
        params[3 + MIFARE_KEY_LENGTH + i] = uid[i];
 80028a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	441a      	add	r2, r3
 80028ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028b2:	3309      	adds	r3, #9
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	3328      	adds	r3, #40	@ 0x28
 80028b8:	443b      	add	r3, r7
 80028ba:	f803 2c18 	strb.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < uid_length; i++) {
 80028be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028c2:	3301      	adds	r3, #1
 80028c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3e9      	bcc.n	80028a6 <PN532_MifareClassicAuthenticateBlock+0x66>
    }
    // Send InDataExchange request
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response, sizeof(response),
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3309      	adds	r3, #9
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80028de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80028e2:	9102      	str	r1, [sp, #8]
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2301      	movs	r3, #1
 80028ee:	2140      	movs	r1, #64	@ 0x40
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fddf 	bl	80024b4 <PN532_CallFunction>
                       params, 3 + MIFARE_KEY_LENGTH + uid_length, PN532_DEFAULT_TIMEOUT);
    return response[0];
 80028f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3728      	adds	r7, #40	@ 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <PN532_MifareClassicReadBlock>:
  *     to read.
  * @param response: buffer of length 16 returned if the block is successfully read.
  * @param block_number: specify a block to read.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicReadBlock(PN532* pn532, uint8_t* response, uint16_t block_number) {
 8002902:	b580      	push	{r7, lr}
 8002904:	b08e      	sub	sp, #56	@ 0x38
 8002906:	af04      	add	r7, sp, #16
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
    uint8_t params[] = {0x01, MIFARE_CMD_READ, block_number & 0xFF};
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002916:	2330      	movs	r3, #48	@ 0x30
 8002918:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t buff[MIFARE_BLOCK_LENGTH + 1];
    // Send InDataExchange request to read block of MiFare data.
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, buff, sizeof(buff),
 8002924:	f107 0210 	add.w	r2, r7, #16
 8002928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	2303      	movs	r3, #3
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2311      	movs	r3, #17
 800293a:	2140      	movs	r1, #64	@ 0x40
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff fdb9 	bl	80024b4 <PN532_CallFunction>
                       params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    // Check first response is 0x00 to show success.
    if (buff[0] != PN532_ERROR_NONE) {
 8002942:	7c3b      	ldrb	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <PN532_MifareClassicReadBlock+0x4a>
        return buff[0];
 8002948:	7c3b      	ldrb	r3, [r7, #16]
 800294a:	e019      	b.n	8002980 <PN532_MifareClassicReadBlock+0x7e>
    }
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002952:	e010      	b.n	8002976 <PN532_MifareClassicReadBlock+0x74>
        response[i] = buff[i + 1];
 8002954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	440b      	add	r3, r1
 8002962:	3228      	adds	r2, #40	@ 0x28
 8002964:	443a      	add	r2, r7
 8002966:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800296a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 800296c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002970:	3301      	adds	r3, #1
 8002972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800297a:	2b0f      	cmp	r3, #15
 800297c:	d9ea      	bls.n	8002954 <PN532_MifareClassicReadBlock+0x52>
    }
    return buff[0];
 800297e:	7c3b      	ldrb	r3, [r7, #16]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3728      	adds	r7, #40	@ 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <PN532_MifareClassicWriteBlock>:
  *     write.
  * @param data: data to write.
  * @param block_number: specify a block to write.
  * @retval: PN532 error code.
  */
int PN532_MifareClassicWriteBlock(PN532* pn532, uint8_t* data, uint16_t block_number) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	@ 0x38
 800298c:	af04      	add	r7, sp, #16
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
    uint8_t params[MIFARE_BLOCK_LENGTH + 3];
    uint8_t response[1];
    params[0] = 0x01;  // Max card numbers
 8002996:	2301      	movs	r3, #1
 8002998:	753b      	strb	r3, [r7, #20]
    params[1] = MIFARE_CMD_WRITE;
 800299a:	23a0      	movs	r3, #160	@ 0xa0
 800299c:	757b      	strb	r3, [r7, #21]
    params[2] = block_number & 0xFF;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029aa:	e010      	b.n	80029ce <PN532_MifareClassicWriteBlock+0x46>
        params[3 + i] = data[i];
 80029ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	441a      	add	r2, r3
 80029b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029b8:	3303      	adds	r3, #3
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	3328      	adds	r3, #40	@ 0x28
 80029be:	443b      	add	r3, r7
 80029c0:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < MIFARE_BLOCK_LENGTH; i++) {
 80029c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029c8:	3301      	adds	r3, #1
 80029ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d9ea      	bls.n	80029ac <PN532_MifareClassicWriteBlock+0x24>
    }
    PN532_CallFunction(pn532, PN532_COMMAND_INDATAEXCHANGE, response,
 80029d6:	f107 0210 	add.w	r2, r7, #16
 80029da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029de:	9302      	str	r3, [sp, #8]
 80029e0:	2313      	movs	r3, #19
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2301      	movs	r3, #1
 80029ec:	2140      	movs	r1, #64	@ 0x40
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fd60 	bl	80024b4 <PN532_CallFunction>
                       sizeof(response), params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return response[0];
 80029f4:	7c3b      	ldrb	r3, [r7, #16]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3728      	adds	r7, #40	@ 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c4;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_SET);
 8002a04:	2201      	movs	r2, #1
 8002a06:	2108      	movs	r1, #8
 8002a08:	480c      	ldr	r0, [pc, #48]	@ (8002a3c <PN532_Reset+0x3c>)
 8002a0a:	f003 fe49 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002a0e:	2064      	movs	r0, #100	@ 0x64
 8002a10:	f001 fb26 	bl	8004060 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2108      	movs	r1, #8
 8002a18:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <PN532_Reset+0x3c>)
 8002a1a:	f003 fe41 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8002a1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a22:	f001 fb1d 	bl	8004060 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RSTS_GPIO_Port, PN532_RSTS_Pin, GPIO_PIN_SET);
 8002a26:	2201      	movs	r2, #1
 8002a28:	2108      	movs	r1, #8
 8002a2a:	4804      	ldr	r0, [pc, #16]	@ (8002a3c <PN532_Reset+0x3c>)
 8002a2c:	f003 fe38 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002a30:	2064      	movs	r0, #100	@ 0x64
 8002a32:	f001 fb15 	bl	8004060 <HAL_Delay>
    return PN532_STATUS_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	58021000 	.word	0x58021000

08002a40 <PN532_Log>:

void PN532_Log(const char* log) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4803      	ldr	r0, [pc, #12]	@ (8002a58 <PN532_Log+0x18>)
 8002a4c:	f00b fbae 	bl	800e1ac <iprintf>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800f5dc 	.word	0x0800f5dc

08002a5c <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	220a      	movs	r2, #10
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	2148      	movs	r1, #72	@ 0x48
 8002a72:	4803      	ldr	r0, [pc, #12]	@ (8002a80 <i2c_read+0x24>)
 8002a74:	f003 ffe2 	bl	8006a3c <HAL_I2C_Master_Receive>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	2400049c 	.word	0x2400049c

08002a84 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c4, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	220a      	movs	r2, #10
 8002a94:	9200      	str	r2, [sp, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	2148      	movs	r1, #72	@ 0x48
 8002a9a:	4803      	ldr	r0, [pc, #12]	@ (8002aa8 <i2c_write+0x24>)
 8002a9c:	f003 feb6 	bl	800680c <HAL_I2C_Master_Transmit>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2400049c 	.word	0x2400049c

08002aac <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8002aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
 8002aba:	466b      	mov	r3, sp
 8002abc:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8002abe:	2300      	movs	r3, #0
 8002ac0:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	1e4b      	subs	r3, r1, #1
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	460a      	mov	r2, r1
 8002acc:	2300      	movs	r3, #0
 8002ace:	4690      	mov	r8, r2
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4614      	mov	r4, r2
 8002aec:	461d      	mov	r5, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	00eb      	lsls	r3, r5, #3
 8002af8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afc:	00e2      	lsls	r2, r4, #3
 8002afe:	460b      	mov	r3, r1
 8002b00:	3307      	adds	r3, #7
 8002b02:	08db      	lsrs	r3, r3, #3
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	ebad 0d03 	sub.w	sp, sp, r3
 8002b0a:	466b      	mov	r3, sp
 8002b0c:	3300      	adds	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff ffa0 	bl	8002a5c <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8002b1c:	7a3b      	ldrb	r3, [r7, #8]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d002      	beq.n	8002b28 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e01a      	b.n	8002b5e <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff ff93 	bl	8002a5c <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]
 8002b3a:	e00a      	b.n	8002b52 <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	440b      	add	r3, r1
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	5c8a      	ldrb	r2, [r1, r2]
 8002b4a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8ef      	bhi.n	8002b3c <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	46b5      	mov	sp, r6
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b6a <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff82 	bl	8002a84 <i2c_write>
    return PN532_STATUS_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8002b92:	2300      	movs	r3, #0
 8002b94:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8002b96:	f001 fa57 	bl	8004048 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8002b9c:	e00d      	b.n	8002bba <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff59 	bl	8002a5c <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <PN532_I2C_WaitReady+0x2a>
            return true;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e00b      	b.n	8002bcc <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f001 fa53 	bl	8004060 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8002bba:	f001 fa45 	bl	8004048 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d8e9      	bhi.n	8002b9e <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_SET);
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bde:	480e      	ldr	r0, [pc, #56]	@ (8002c18 <PN532_I2C_Wakeup+0x44>)
 8002be0:	f003 fd5e 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002be4:	2064      	movs	r0, #100	@ 0x64
 8002be6:	f001 fa3b 	bl	8004060 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_RESET);
 8002bea:	2200      	movs	r2, #0
 8002bec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bf0:	4809      	ldr	r0, [pc, #36]	@ (8002c18 <PN532_I2C_Wakeup+0x44>)
 8002bf2:	f003 fd55 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002bf6:	2064      	movs	r0, #100	@ 0x64
 8002bf8:	f001 fa32 	bl	8004060 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOI, PN532_REQ_Pin, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c02:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <PN532_I2C_Wakeup+0x44>)
 8002c04:	f003 fd4c 	bl	80066a0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8002c08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c0c:	f001 fa28 	bl	8004060 <HAL_Delay>
    return PN532_STATUS_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	58022000 	.word	0x58022000

08002c1c <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <PN532_I2C_Init+0x3c>)
 8002c28:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <PN532_I2C_Init+0x40>)
 8002c2e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <PN532_I2C_Init+0x44>)
 8002c34:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	@ (8002c64 <PN532_I2C_Init+0x48>)
 8002c3a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <PN532_I2C_Init+0x4c>)
 8002c40:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <PN532_I2C_Init+0x50>)
 8002c46:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4798      	blx	r3
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	08002a01 	.word	0x08002a01
 8002c5c:	08002aad 	.word	0x08002aad
 8002c60:	08002b6b 	.word	0x08002b6b
 8002c64:	08002b8b 	.word	0x08002b8b
 8002c68:	08002bd5 	.word	0x08002bd5
 8002c6c:	08002a41 	.word	0x08002a41

08002c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_MspInit+0x30>)
 8002c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <HAL_MspInit+0x30>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_MspInit+0x30>)
 8002c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	58024400 	.word	0x58024400

08002ca4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	@ 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5f      	ldr	r2, [pc, #380]	@ (8002e40 <HAL_ADC_MspInit+0x19c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d133      	bne.n	8002d2e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002cce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cde:	4a5a      	ldr	r2, [pc, #360]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ce8:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002cea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	4b54      	ldr	r3, [pc, #336]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cfc:	4a52      	ldr	r2, [pc, #328]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d06:	4b50      	ldr	r3, [pc, #320]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002d14:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002d18:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8002d1c:	f001 f9e4 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8002d20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d24:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8002d28:	f001 f9de 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d2c:	e083      	b.n	8002e36 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a46      	ldr	r2, [pc, #280]	@ (8002e4c <HAL_ADC_MspInit+0x1a8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d133      	bne.n	8002da0 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002d38:	4b42      	ldr	r3, [pc, #264]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a41      	ldr	r2, [pc, #260]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002d40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_ADC_MspInit+0x1a0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10e      	bne.n	8002d68 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d50:	4a3d      	ldr	r2, [pc, #244]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d52:	f043 0320 	orr.w	r3, r3, #32
 8002d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d68:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d6e:	4a36      	ldr	r2, [pc, #216]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d78:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002d86:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002d8a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8002d8e:	f001 f9ab 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8002d92:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d96:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8002d9a:	f001 f9a5 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002d9e:	e04a      	b.n	8002e36 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <HAL_ADC_MspInit+0x1ac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d145      	bne.n	8002e36 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002daa:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002db0:	4a25      	ldr	r2, [pc, #148]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dba:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dec:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <HAL_ADC_MspInit+0x1a4>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <HAL_ADC_MspInit+0x1b0>)
 8002e1a:	f003 fa91 	bl	8006340 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002e1e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002e22:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002e26:	f001 f95f 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002e2a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002e2e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002e32:	f001 f959 	bl	80040e8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002e36:	bf00      	nop
 8002e38:	3738      	adds	r7, #56	@ 0x38
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	24000e38 	.word	0x24000e38
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	40022100 	.word	0x40022100
 8002e50:	58026000 	.word	0x58026000
 8002e54:	58021400 	.word	0x58021400

08002e58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b092      	sub	sp, #72	@ 0x48
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a87      	ldr	r2, [pc, #540]	@ (8003094 <HAL_ETH_MspInit+0x23c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f040 8108 	bne.w	800308c <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002e7c:	4b86      	ldr	r3, [pc, #536]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e82:	4a85      	ldr	r2, [pc, #532]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e8c:	4b82      	ldr	r3, [pc, #520]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ea0:	4a7d      	ldr	r2, [pc, #500]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002eb8:	4b77      	ldr	r3, [pc, #476]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ebe:	4a76      	ldr	r2, [pc, #472]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002ec8:	4b73      	ldr	r3, [pc, #460]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ed6:	4b70      	ldr	r3, [pc, #448]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002edc:	4a6e      	ldr	r2, [pc, #440]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ef4:	4b68      	ldr	r3, [pc, #416]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efa:	4a67      	ldr	r2, [pc, #412]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002efc:	f043 0310 	orr.w	r3, r3, #16
 8002f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f04:	4b64      	ldr	r3, [pc, #400]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f12:	4b61      	ldr	r3, [pc, #388]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f18:	4a5f      	ldr	r2, [pc, #380]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f22:	4b5d      	ldr	r3, [pc, #372]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f30:	4b59      	ldr	r3, [pc, #356]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f36:	4a58      	ldr	r2, [pc, #352]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f40:	4b55      	ldr	r3, [pc, #340]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4e:	4b52      	ldr	r3, [pc, #328]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f72:	4a49      	ldr	r2, [pc, #292]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f7c:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f90:	4a41      	ldr	r2, [pc, #260]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <HAL_ETH_MspInit+0x240>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8002fa8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fba:	230b      	movs	r3, #11
 8002fbc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4835      	ldr	r0, [pc, #212]	@ (800309c <HAL_ETH_MspInit+0x244>)
 8002fc6:	f003 f9bb 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fda:	230b      	movs	r3, #11
 8002fdc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	482e      	ldr	r0, [pc, #184]	@ (80030a0 <HAL_ETH_MspInit+0x248>)
 8002fe6:	f003 f9ab 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8002fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ffc:	230b      	movs	r3, #11
 8002ffe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003004:	4619      	mov	r1, r3
 8003006:	4827      	ldr	r0, [pc, #156]	@ (80030a4 <HAL_ETH_MspInit+0x24c>)
 8003008:	f003 f99a 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 800300c:	233e      	movs	r3, #62	@ 0x3e
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800301c:	230b      	movs	r3, #11
 800301e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003020:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003024:	4619      	mov	r1, r3
 8003026:	4820      	ldr	r0, [pc, #128]	@ (80030a8 <HAL_ETH_MspInit+0x250>)
 8003028:	f003 f98a 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 800302c:	230c      	movs	r3, #12
 800302e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800303c:	230b      	movs	r3, #11
 800303e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003040:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003044:	4619      	mov	r1, r3
 8003046:	4819      	ldr	r0, [pc, #100]	@ (80030ac <HAL_ETH_MspInit+0x254>)
 8003048:	f003 f97a 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 800304c:	2386      	movs	r3, #134	@ 0x86
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800305c:	230b      	movs	r3, #11
 800305e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003060:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003064:	4619      	mov	r1, r3
 8003066:	4812      	ldr	r0, [pc, #72]	@ (80030b0 <HAL_ETH_MspInit+0x258>)
 8003068:	f003 f96a 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 800306c:	2303      	movs	r3, #3
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800307c:	230b      	movs	r3, #11
 800307e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003080:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003084:	4619      	mov	r1, r3
 8003086:	480b      	ldr	r0, [pc, #44]	@ (80030b4 <HAL_ETH_MspInit+0x25c>)
 8003088:	f003 f95a 	bl	8006340 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800308c:	bf00      	nop
 800308e:	3748      	adds	r7, #72	@ 0x48
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40028000 	.word	0x40028000
 8003098:	58024400 	.word	0x58024400
 800309c:	58021800 	.word	0x58021800
 80030a0:	58021000 	.word	0x58021000
 80030a4:	58022000 	.word	0x58022000
 80030a8:	58020800 	.word	0x58020800
 80030ac:	58021c00 	.word	0x58021c00
 80030b0:	58020000 	.word	0x58020000
 80030b4:	58020400 	.word	0x58020400

080030b8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0bc      	sub	sp, #240	@ 0xf0
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d0:	f107 0318 	add.w	r3, r7, #24
 80030d4:	22c0      	movs	r2, #192	@ 0xc0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f00b f8f0 	bl	800e2be <memset>
  if(hfdcan->Instance==FDCAN1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_FDCAN_MspInit+0x188>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d151      	bne.n	800318c <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80030f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80030f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fc:	f107 0318 	add.w	r3, r7, #24
 8003100:	4618      	mov	r0, r3
 8003102:	f005 fd91 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800310c:	f7fe fffa 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003110:	4b4c      	ldr	r3, [pc, #304]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a4b      	ldr	r2, [pc, #300]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 8003118:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10e      	bne.n	8003140 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003122:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003124:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003128:	4a47      	ldr	r2, [pc, #284]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003132:	4b45      	ldr	r3, [pc, #276]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003134:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003140:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003146:	4a40      	ldr	r2, [pc, #256]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003150:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800315e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003178:	2309      	movs	r3, #9
 800317a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800317e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003182:	4619      	mov	r1, r3
 8003184:	4831      	ldr	r0, [pc, #196]	@ (800324c <HAL_FDCAN_MspInit+0x194>)
 8003186:	f003 f8db 	bl	8006340 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800318a:	e055      	b.n	8003238 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2f      	ldr	r2, [pc, #188]	@ (8003250 <HAL_FDCAN_MspInit+0x198>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d150      	bne.n	8003238 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003196:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80031a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80031a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f005 fd3a 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80031ba:	f7fe ffa3 	bl	8002104 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80031be:	4b21      	ldr	r3, [pc, #132]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 80031c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80031c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003244 <HAL_FDCAN_MspInit+0x18c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10e      	bne.n	80031ee <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 80031d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031dc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 80031e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 80031f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <HAL_FDCAN_MspInit+0x190>)
 8003200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 800320c:	f242 0320 	movw	r3, #8224	@ 0x2020
 8003210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003226:	2309      	movs	r3, #9
 8003228:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003230:	4619      	mov	r1, r3
 8003232:	4808      	ldr	r0, [pc, #32]	@ (8003254 <HAL_FDCAN_MspInit+0x19c>)
 8003234:	f003 f884 	bl	8006340 <HAL_GPIO_Init>
}
 8003238:	bf00      	nop
 800323a:	37f0      	adds	r7, #240	@ 0xf0
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	4000a000 	.word	0x4000a000
 8003244:	24000e3c 	.word	0x24000e3c
 8003248:	58024400 	.word	0x58024400
 800324c:	58021c00 	.word	0x58021c00
 8003250:	4000a400 	.word	0x4000a400
 8003254:	58020400 	.word	0x58020400

08003258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b0bc      	sub	sp, #240	@ 0xf0
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	22c0      	movs	r2, #192	@ 0xc0
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f00b f820 	bl	800e2be <memset>
  if(hi2c->Instance==I2C4)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a39      	ldr	r2, [pc, #228]	@ (8003368 <HAL_I2C_MspInit+0x110>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d16a      	bne.n	800335e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003288:	f04f 0210 	mov.w	r2, #16
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003294:	2300      	movs	r3, #0
 8003296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800329a:	f107 0318 	add.w	r3, r7, #24
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 fcc2 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80032aa:	f7fe ff2b 	bl	8002104 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ae:	4b2f      	ldr	r3, [pc, #188]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b4:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032be:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032cc:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d2:	4a26      	ldr	r2, [pc, #152]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032d4:	f043 0308 	orr.w	r3, r3, #8
 80032d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032dc:	4b23      	ldr	r3, [pc, #140]	@ (800336c <HAL_I2C_MspInit+0x114>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f0:	2312      	movs	r3, #18
 80032f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8003302:	2306      	movs	r3, #6
 8003304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800330c:	4619      	mov	r1, r3
 800330e:	4818      	ldr	r0, [pc, #96]	@ (8003370 <HAL_I2C_MspInit+0x118>)
 8003310:	f003 f816 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331c:	2312      	movs	r3, #18
 800331e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800332e:	2304      	movs	r3, #4
 8003330:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003334:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003338:	4619      	mov	r1, r3
 800333a:	480e      	ldr	r0, [pc, #56]	@ (8003374 <HAL_I2C_MspInit+0x11c>)
 800333c:	f003 f800 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003340:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_I2C_MspInit+0x114>)
 8003342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003346:	4a09      	ldr	r2, [pc, #36]	@ (800336c <HAL_I2C_MspInit+0x114>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003350:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_I2C_MspInit+0x114>)
 8003352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800335e:	bf00      	nop
 8003360:	37f0      	adds	r7, #240	@ 0xf0
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	58001c00 	.word	0x58001c00
 800336c:	58024400 	.word	0x58024400
 8003370:	58020400 	.word	0x58020400
 8003374:	58020c00 	.word	0x58020c00

08003378 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b0be      	sub	sp, #248	@ 0xf8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003390:	f107 0320 	add.w	r3, r7, #32
 8003394:	22c0      	movs	r2, #192	@ 0xc0
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f00a ff90 	bl	800e2be <memset>
  if(hltdc->Instance==LTDC)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a66      	ldr	r2, [pc, #408]	@ (800353c <HAL_LTDC_MspInit+0x1c4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f040 80c4 	bne.w	8003532 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033aa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80033b6:	2320      	movs	r3, #32
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80033ba:	23c0      	movs	r3, #192	@ 0xc0
 80033bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80033be:	2302      	movs	r3, #2
 80033c0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80033c2:	2302      	movs	r3, #2
 80033c4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80033c6:	2302      	movs	r3, #2
 80033c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80033ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80033d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033d4:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033da:	f107 0320 	add.w	r3, r7, #32
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fc22 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 80033ea:	f7fe fe8b 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033ee:	4b54      	ldr	r3, [pc, #336]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 80033f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033f4:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 80033f6:	f043 0308 	orr.w	r3, r3, #8
 80033fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033fe:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800340c:	4b4c      	ldr	r3, [pc, #304]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003412:	4a4b      	ldr	r2, [pc, #300]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800341c:	4b48      	ldr	r3, [pc, #288]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800341e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800342a:	4b45      	ldr	r3, [pc, #276]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003430:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800343a:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003448:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344e:	4a3c      	ldr	r2, [pc, #240]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003458:	4b39      	ldr	r3, [pc, #228]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003466:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800346c:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 800346e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003472:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_LTDC_MspInit+0x1c8>)
 8003478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800347c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8003484:	23fc      	movs	r3, #252	@ 0xfc
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2302      	movs	r3, #2
 800348c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800349c:	230e      	movs	r3, #14
 800349e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4826      	ldr	r0, [pc, #152]	@ (8003544 <HAL_LTDC_MspInit+0x1cc>)
 80034aa:	f002 ff49 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80034ae:	f24d 2303 	movw	r3, #53763	@ 0xd203
 80034b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034c8:	230e      	movs	r3, #14
 80034ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034ce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80034d2:	4619      	mov	r1, r3
 80034d4:	481c      	ldr	r0, [pc, #112]	@ (8003548 <HAL_LTDC_MspInit+0x1d0>)
 80034d6:	f002 ff33 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80034da:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034f4:	230e      	movs	r3, #14
 80034f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80034fa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80034fe:	4619      	mov	r1, r3
 8003500:	4812      	ldr	r0, [pc, #72]	@ (800354c <HAL_LTDC_MspInit+0x1d4>)
 8003502:	f002 ff1d 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800350a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003520:	230e      	movs	r3, #14
 8003522:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003526:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800352a:	4619      	mov	r1, r3
 800352c:	4808      	ldr	r0, [pc, #32]	@ (8003550 <HAL_LTDC_MspInit+0x1d8>)
 800352e:	f002 ff07 	bl	8006340 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003532:	bf00      	nop
 8003534:	37f8      	adds	r7, #248	@ 0xf8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	50001000 	.word	0x50001000
 8003540:	58024400 	.word	0x58024400
 8003544:	58022800 	.word	0x58022800
 8003548:	58022000 	.word	0x58022000
 800354c:	58022400 	.word	0x58022400
 8003550:	58021c00 	.word	0x58021c00

08003554 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b0bc      	sub	sp, #240	@ 0xf0
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	22c0      	movs	r2, #192	@ 0xc0
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f00a fea2 	bl	800e2be <memset>
  if(hqspi->Instance==QUADSPI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_QSPI_MspInit+0x184>)
 8003580:	4293      	cmp	r3, r2
 8003582:	f040 80a5 	bne.w	80036d0 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8003586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8003592:	2300      	movs	r3, #0
 8003594:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003596:	f107 0318 	add.w	r3, r7, #24
 800359a:	4618      	mov	r0, r3
 800359c:	f005 fb44 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80035a6:	f7fe fdad 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80035aa:	4b4c      	ldr	r3, [pc, #304]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035b0:	4a4a      	ldr	r2, [pc, #296]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80035ba:	4b48      	ldr	r3, [pc, #288]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80035c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ce:	4a43      	ldr	r2, [pc, #268]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035d8:	4b40      	ldr	r3, [pc, #256]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035e6:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ec:	4a3b      	ldr	r2, [pc, #236]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035ee:	f043 0320 	orr.w	r3, r3, #32
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f6:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003604:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360a:	4a34      	ldr	r2, [pc, #208]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003614:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_QSPI_MspInit+0x188>)
 8003616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003622:	2340      	movs	r3, #64	@ 0x40
 8003624:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800363a:	230a      	movs	r3, #10
 800363c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003640:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003644:	4619      	mov	r1, r3
 8003646:	4826      	ldr	r0, [pc, #152]	@ (80036e0 <HAL_QSPI_MspInit+0x18c>)
 8003648:	f002 fe7a 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800364c:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003650:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003666:	2309      	movs	r3, #9
 8003668:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800366c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003670:	4619      	mov	r1, r3
 8003672:	481c      	ldr	r0, [pc, #112]	@ (80036e4 <HAL_QSPI_MspInit+0x190>)
 8003674:	f002 fe64 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800367c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003692:	230a      	movs	r3, #10
 8003694:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003698:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800369c:	4619      	mov	r1, r3
 800369e:	4811      	ldr	r0, [pc, #68]	@ (80036e4 <HAL_QSPI_MspInit+0x190>)
 80036a0:	f002 fe4e 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80036be:	2309      	movs	r3, #9
 80036c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036c8:	4619      	mov	r1, r3
 80036ca:	4807      	ldr	r0, [pc, #28]	@ (80036e8 <HAL_QSPI_MspInit+0x194>)
 80036cc:	f002 fe38 	bl	8006340 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80036d0:	bf00      	nop
 80036d2:	37f0      	adds	r7, #240	@ 0xf0
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	52005000 	.word	0x52005000
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58020400 	.word	0x58020400
 80036e4:	58021400 	.word	0x58021400
 80036e8:	58020c00 	.word	0x58020c00

080036ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0b2      	sub	sp, #200	@ 0xc8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	22c0      	movs	r2, #192	@ 0xc0
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f00a fdde 	bl	800e2be <memset>
  if(hrtc->Instance==RTC)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a10      	ldr	r2, [pc, #64]	@ (8003748 <HAL_RTC_MspInit+0x5c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d119      	bne.n	8003740 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800370c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800371c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4618      	mov	r0, r3
 8003726:	f005 fa7f 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003730:	f7fe fce8 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_RTC_MspInit+0x60>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4a04      	ldr	r2, [pc, #16]	@ (800374c <HAL_RTC_MspInit+0x60>)
 800373a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373e:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003740:	bf00      	nop
 8003742:	37c8      	adds	r7, #200	@ 0xc8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	58004000 	.word	0x58004000
 800374c:	58024400 	.word	0x58024400

08003750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0b      	ldr	r2, [pc, #44]	@ (800378c <HAL_TIM_Base_MspInit+0x3c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003762:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_TIM_Base_MspInit+0x40>)
 8003764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003768:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <HAL_TIM_Base_MspInit+0x40>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_TIM_Base_MspInit+0x40>)
 8003774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40010000 	.word	0x40010000
 8003790:	58024400 	.word	0x58024400

08003794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b0ba      	sub	sp, #232	@ 0xe8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	22c0      	movs	r2, #192	@ 0xc0
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f00a fd82 	bl	800e2be <memset>
  if(huart->Instance==USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a27      	ldr	r2, [pc, #156]	@ (800385c <HAL_UART_MspInit+0xc8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d146      	bne.n	8003852 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037c4:	f04f 0202 	mov.w	r2, #2
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037d6:	f107 0310 	add.w	r3, r7, #16
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 fa24 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80037e6:	f7fe fc8d 	bl	8002104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 80037ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 80037f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80037fa:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 80037fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003808:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380e:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_UART_MspInit+0xcc>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003826:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800382a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003840:	2307      	movs	r3, #7
 8003842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800384a:	4619      	mov	r1, r3
 800384c:	4805      	ldr	r0, [pc, #20]	@ (8003864 <HAL_UART_MspInit+0xd0>)
 800384e:	f002 fd77 	bl	8006340 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003852:	bf00      	nop
 8003854:	37e8      	adds	r7, #232	@ 0xe8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40004800 	.word	0x40004800
 8003860:	58024400 	.word	0x58024400
 8003864:	58020400 	.word	0x58020400

08003868 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0ba      	sub	sp, #232	@ 0xe8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	22c0      	movs	r2, #192	@ 0xc0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f00a fd18 	bl	800e2be <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a30      	ldr	r2, [pc, #192]	@ (8003954 <HAL_PCD_MspInit+0xec>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d159      	bne.n	800394c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003898:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80038a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	4618      	mov	r0, r3
 80038b2:	f005 f9b9 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80038bc:	f7fe fc22 	bl	8002104 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80038c0:	f004 f902 	bl	8007ac8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ca:	4a23      	ldr	r2, [pc, #140]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038d4:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80038e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80038f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4817      	ldr	r0, [pc, #92]	@ (800395c <HAL_PCD_MspInit+0xf4>)
 80038fe:	f002 fd1f 	bl	8006340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8003902:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800391c:	230a      	movs	r3, #10
 800391e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003922:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003926:	4619      	mov	r1, r3
 8003928:	480c      	ldr	r0, [pc, #48]	@ (800395c <HAL_PCD_MspInit+0xf4>)
 800392a:	f002 fd09 	bl	8006340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 8003930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003934:	4a08      	ldr	r2, [pc, #32]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 8003936:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800393a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_PCD_MspInit+0xf0>)
 8003940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800394c:	bf00      	nop
 800394e:	37e8      	adds	r7, #232	@ 0xe8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40080000 	.word	0x40080000
 8003958:	58024400 	.word	0x58024400
 800395c:	58020000 	.word	0x58020000

08003960 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003960:	b580      	push	{r7, lr}
 8003962:	b0b8      	sub	sp, #224	@ 0xe0
 8003964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003966:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003976:	4b51      	ldr	r3, [pc, #324]	@ (8003abc <HAL_FMC_MspInit+0x15c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 8099 	bne.w	8003ab2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8003980:	4b4e      	ldr	r3, [pc, #312]	@ (8003abc <HAL_FMC_MspInit+0x15c>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	22c0      	movs	r2, #192	@ 0xc0
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f00a fc95 	bl	800e2be <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003994:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a4:	f107 0308 	add.w	r3, r7, #8
 80039a8:	4618      	mov	r0, r3
 80039aa:	f005 f93d 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80039b4:	f7fe fba6 	bl	8002104 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039b8:	4b41      	ldr	r3, [pc, #260]	@ (8003ac0 <HAL_FMC_MspInit+0x160>)
 80039ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039be:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <HAL_FMC_MspInit+0x160>)
 80039c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80039c8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <HAL_FMC_MspInit+0x160>)
 80039ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80039ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80039d6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80039da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039f0:	230c      	movs	r3, #12
 80039f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039f6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80039fa:	4619      	mov	r1, r3
 80039fc:	4831      	ldr	r0, [pc, #196]	@ (8003ac4 <HAL_FMC_MspInit+0x164>)
 80039fe:	f002 fc9f 	bl	8006340 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8003a02:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003a06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a22:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a26:	4619      	mov	r1, r3
 8003a28:	4827      	ldr	r0, [pc, #156]	@ (8003ac8 <HAL_FMC_MspInit+0x168>)
 8003a2a:	f002 fc89 	bl	8006340 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8003a2e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003a32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a52:	4619      	mov	r1, r3
 8003a54:	481d      	ldr	r0, [pc, #116]	@ (8003acc <HAL_FMC_MspInit+0x16c>)
 8003a56:	f002 fc73 	bl	8006340 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8003a5a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a74:	230c      	movs	r3, #12
 8003a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a7a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4813      	ldr	r0, [pc, #76]	@ (8003ad0 <HAL_FMC_MspInit+0x170>)
 8003a82:	f002 fc5d 	bl	8006340 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a86:	23e0      	movs	r3, #224	@ 0xe0
 8003a88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003aa4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	480a      	ldr	r0, [pc, #40]	@ (8003ad4 <HAL_FMC_MspInit+0x174>)
 8003aac:	f002 fc48 	bl	8006340 <HAL_GPIO_Init>
 8003ab0:	e000      	b.n	8003ab4 <HAL_FMC_MspInit+0x154>
    return;
 8003ab2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003ab4:	37e0      	adds	r7, #224	@ 0xe0
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	24000e40 	.word	0x24000e40
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	58021000 	.word	0x58021000
 8003ac8:	58021800 	.word	0x58021800
 8003acc:	58020c00 	.word	0x58020c00
 8003ad0:	58021400 	.word	0x58021400
 8003ad4:	58021c00 	.word	0x58021c00

08003ad8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003ae0:	f7ff ff3e 	bl	8003960 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ba      	sub	sp, #232	@ 0xe8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003af4:	f107 0310 	add.w	r3, r7, #16
 8003af8:	22c0      	movs	r2, #192	@ 0xc0
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f00a fbde 	bl	800e2be <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a45      	ldr	r2, [pc, #276]	@ (8003c1c <HAL_SAI_MspInit+0x130>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d13e      	bne.n	8003b8a <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b1c:	f107 0310 	add.w	r3, r7, #16
 8003b20:	4618      	mov	r0, r3
 8003b22:	f005 f881 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8003b2c:	f7fe faea 	bl	8002104 <Error_Handler>
    }

    if (SAI2_client == 0)
 8003b30:	4b3b      	ldr	r3, [pc, #236]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10e      	bne.n	8003b56 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003b38:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b3e:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003b40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8003b56:	4b32      	ldr	r3, [pc, #200]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a30      	ldr	r2, [pc, #192]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003b5e:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8003b60:	23f0      	movs	r3, #240	@ 0xf0
 8003b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003b78:	230a      	movs	r3, #10
 8003b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003b7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4828      	ldr	r0, [pc, #160]	@ (8003c28 <HAL_SAI_MspInit+0x13c>)
 8003b86:	f002 fbdb 	bl	8006340 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a27      	ldr	r2, [pc, #156]	@ (8003c2c <HAL_SAI_MspInit+0x140>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d13f      	bne.n	8003c14 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ba4:	f107 0310 	add.w	r3, r7, #16
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f005 f83d 	bl	8008c28 <HAL_RCCEx_PeriphCLKConfig>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8003bb4:	f7fe faa6 	bl	8002104 <Error_Handler>
    }

      if (SAI2_client == 0)
 8003bb8:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10e      	bne.n	8003bde <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bc6:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003bc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <HAL_SAI_MspInit+0x138>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c20 <HAL_SAI_MspInit+0x134>)
 8003be6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003c02:	230a      	movs	r3, #10
 8003c04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4808      	ldr	r0, [pc, #32]	@ (8003c30 <HAL_SAI_MspInit+0x144>)
 8003c10:	f002 fb96 	bl	8006340 <HAL_GPIO_Init>

    }
}
 8003c14:	bf00      	nop
 8003c16:	37e8      	adds	r7, #232	@ 0xe8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40015c04 	.word	0x40015c04
 8003c20:	24000e44 	.word	0x24000e44
 8003c24:	58024400 	.word	0x58024400
 8003c28:	58022000 	.word	0x58022000
 8003c2c:	40015c24 	.word	0x40015c24
 8003c30:	58021800 	.word	0x58021800

08003c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c38:	bf00      	nop
 8003c3a:	e7fd      	b.n	8003c38 <NMI_Handler+0x4>

08003c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <HardFault_Handler+0x4>

08003c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <MemManage_Handler+0x4>

08003c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <BusFault_Handler+0x4>

08003c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <UsageFault_Handler+0x4>

08003c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c8a:	f000 f9c9 	bl	8004020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e00a      	b.n	8003cba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	4601      	mov	r1, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	60ba      	str	r2, [r7, #8]
 8003cb0:	b2ca      	uxtb	r2, r1
 8003cb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dbf0      	blt.n	8003ca4 <_read+0x12>
  }

  return len;
 8003cc2:	687b      	ldr	r3, [r7, #4]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e009      	b.n	8003cf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	60ba      	str	r2, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	dbf1      	blt.n	8003cde <_write+0x12>
  }
  return len;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_close>:

int _close(int file)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d2c:	605a      	str	r2, [r3, #4]
  return 0;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_isatty>:

int _isatty(int file)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d44:	2301      	movs	r3, #1
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <_sbrk+0x5c>)
 8003d76:	4b15      	ldr	r3, [pc, #84]	@ (8003dcc <_sbrk+0x60>)
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d80:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <_sbrk+0x64>)
 8003d8a:	4a12      	ldr	r2, [pc, #72]	@ (8003dd4 <_sbrk+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d8e:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d207      	bcs.n	8003dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d9c:	f00a fade 	bl	800e35c <__errno>
 8003da0:	4603      	mov	r3, r0
 8003da2:	220c      	movs	r2, #12
 8003da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e009      	b.n	8003dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	4a05      	ldr	r2, [pc, #20]	@ (8003dd0 <_sbrk+0x64>)
 8003dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	24080000 	.word	0x24080000
 8003dcc:	00000400 	.word	0x00000400
 8003dd0:	24000e48 	.word	0x24000e48
 8003dd4:	24000fa0 	.word	0x24000fa0

08003dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <SystemInit+0xe4>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	4a36      	ldr	r2, [pc, #216]	@ (8003ebc <SystemInit+0xe4>)
 8003de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dec:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <SystemInit+0xe8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d807      	bhi.n	8003e08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003df8:	4b31      	ldr	r3, [pc, #196]	@ (8003ec0 <SystemInit+0xe8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 030f 	bic.w	r3, r3, #15
 8003e00:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec0 <SystemInit+0xe8>)
 8003e02:	f043 0307 	orr.w	r3, r3, #7
 8003e06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec4 <SystemInit+0xec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec4 <SystemInit+0xec>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <SystemInit+0xec>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec4 <SystemInit+0xec>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4929      	ldr	r1, [pc, #164]	@ (8003ec4 <SystemInit+0xec>)
 8003e20:	4b29      	ldr	r3, [pc, #164]	@ (8003ec8 <SystemInit+0xf0>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e26:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <SystemInit+0xe8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e32:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <SystemInit+0xe8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 030f 	bic.w	r3, r3, #15
 8003e3a:	4a21      	ldr	r2, [pc, #132]	@ (8003ec0 <SystemInit+0xe8>)
 8003e3c:	f043 0307 	orr.w	r3, r3, #7
 8003e40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e42:	4b20      	ldr	r3, [pc, #128]	@ (8003ec4 <SystemInit+0xec>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e48:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <SystemInit+0xec>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <SystemInit+0xec>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <SystemInit+0xec>)
 8003e56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <SystemInit+0xf4>)
 8003e58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <SystemInit+0xec>)
 8003e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <SystemInit+0xf8>)
 8003e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e60:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <SystemInit+0xec>)
 8003e62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed4 <SystemInit+0xfc>)
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e66:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <SystemInit+0xec>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <SystemInit+0xec>)
 8003e6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ed4 <SystemInit+0xfc>)
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e72:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <SystemInit+0xec>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e78:	4b12      	ldr	r3, [pc, #72]	@ (8003ec4 <SystemInit+0xec>)
 8003e7a:	4a16      	ldr	r2, [pc, #88]	@ (8003ed4 <SystemInit+0xfc>)
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <SystemInit+0xec>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <SystemInit+0xec>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec4 <SystemInit+0xec>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <SystemInit+0xec>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <SystemInit+0x100>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <SystemInit+0x104>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea2:	d202      	bcs.n	8003eaa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <SystemInit+0x108>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee4 <SystemInit+0x10c>)
 8003eac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003eb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00
 8003ec0:	52002000 	.word	0x52002000
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ecc:	02020200 	.word	0x02020200
 8003ed0:	01ff0000 	.word	0x01ff0000
 8003ed4:	01010280 	.word	0x01010280
 8003ed8:	5c001000 	.word	0x5c001000
 8003edc:	ffff0000 	.word	0xffff0000
 8003ee0:	51008108 	.word	0x51008108
 8003ee4:	52004000 	.word	0x52004000

08003ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8003ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003eec:	f7ff ff74 	bl	8003dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef0:	480c      	ldr	r0, [pc, #48]	@ (8003f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ef2:	490d      	ldr	r1, [pc, #52]	@ (8003f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef8:	e002      	b.n	8003f00 <LoopCopyDataInit>

08003efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003efe:	3304      	adds	r3, #4

08003f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f04:	d3f9      	bcc.n	8003efa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f06:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f08:	4c0a      	ldr	r4, [pc, #40]	@ (8003f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f0c:	e001      	b.n	8003f12 <LoopFillZerobss>

08003f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f10:	3204      	adds	r2, #4

08003f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f14:	d3fb      	bcc.n	8003f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f16:	f00a fa27 	bl	800e368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f1a:	f7fc fcd3 	bl	80008c4 <main>
  bx  lr
 8003f1e:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8003f20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f28:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003f2c:	0800f6b4 	.word	0x0800f6b4
  ldr r2, =_sbss
 8003f30:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8003f34:	24000f9c 	.word	0x24000f9c

08003f38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f38:	e7fe      	b.n	8003f38 <ADC3_IRQHandler>
	...

08003f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f42:	2003      	movs	r0, #3
 8003f44:	f001 fa32 	bl	80053ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f48:	f004 fc98 	bl	800887c <HAL_RCC_GetSysClockFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <HAL_Init+0x68>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	4913      	ldr	r1, [pc, #76]	@ (8003fa8 <HAL_Init+0x6c>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f66:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <HAL_Init+0x68>)
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <HAL_Init+0x6c>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fac <HAL_Init+0x70>)
 8003f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <HAL_Init+0x74>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f86:	2000      	movs	r0, #0
 8003f88:	f000 f814 	bl	8003fb4 <HAL_InitTick>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e002      	b.n	8003f9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f96:	f7fe fe6b 	bl	8002c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	0800f638 	.word	0x0800f638
 8003fac:	24000004 	.word	0x24000004
 8003fb0:	24000000 	.word	0x24000000

08003fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_InitTick+0x60>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e021      	b.n	800400c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fc8:	4b13      	ldr	r3, [pc, #76]	@ (8004018 <HAL_InitTick+0x64>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_InitTick+0x60>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fa09 	bl	80053f6 <HAL_SYSTICK_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00e      	b.n	800400c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d80a      	bhi.n	800400a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f001 f9e1 	bl	80053c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004000:	4a06      	ldr	r2, [pc, #24]	@ (800401c <HAL_InitTick+0x68>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2400000c 	.word	0x2400000c
 8004018:	24000000 	.word	0x24000000
 800401c:	24000008 	.word	0x24000008

08004020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_IncTick+0x20>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_IncTick+0x24>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4413      	add	r3, r2
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_IncTick+0x24>)
 8004032:	6013      	str	r3, [r2, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2400000c 	.word	0x2400000c
 8004044:	24000e4c 	.word	0x24000e4c

08004048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return uwTick;
 800404c:	4b03      	ldr	r3, [pc, #12]	@ (800405c <HAL_GetTick+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	24000e4c 	.word	0x24000e4c

08004060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7ff ffee 	bl	8004048 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d005      	beq.n	8004086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407a:	4b0a      	ldr	r3, [pc, #40]	@ (80040a4 <HAL_Delay+0x44>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004086:	bf00      	nop
 8004088:	f7ff ffde 	bl	8004048 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d8f7      	bhi.n	8004088 <HAL_Delay+0x28>
  {
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2400000c 	.word	0x2400000c

080040a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <HAL_GetREVID+0x14>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0c1b      	lsrs	r3, r3, #16
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	5c001000 	.word	0x5c001000

080040c0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80040d0:	4904      	ldr	r1, [pc, #16]	@ (80040e4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	58000400 	.word	0x58000400

080040e8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	4904      	ldr	r1, [pc, #16]	@ (8004110 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	58000400 	.word	0x58000400

08004114 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3360      	adds	r3, #96	@ 0x60
 800418e:	461a      	mov	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	431a      	orrs	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	611a      	str	r2, [r3, #16]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3360      	adds	r3, #96	@ 0x60
 80041fe:	461a      	mov	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	431a      	orrs	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	601a      	str	r2, [r3, #0]
  }
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3330      	adds	r3, #48	@ 0x30
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	4413      	add	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	211f      	movs	r1, #31
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	f003 011f 	and.w	r1, r3, #31
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	431a      	orrs	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3314      	adds	r3, #20
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0e5b      	lsrs	r3, r3, #25
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0d1b      	lsrs	r3, r3, #20
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2107      	movs	r1, #7
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	401a      	ands	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0d1b      	lsrs	r3, r3, #20
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	431a      	orrs	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0318 	and.w	r3, r3, #24
 80042f6:	4908      	ldr	r1, [pc, #32]	@ (8004318 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042f8:	40d9      	lsrs	r1, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	400b      	ands	r3, r1
 80042fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	000fffff 	.word	0x000fffff

0800431c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b04      	ldr	r3, [pc, #16]	@ (800433c <LL_ADC_DisableDeepPowerDown+0x20>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6093      	str	r3, [r2, #8]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	5fffffc0 	.word	0x5fffffc0

08004340 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004354:	d101      	bne.n	800435a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <LL_ADC_EnableInternalRegulator+0x24>)
 8004376:	4013      	ands	r3, r2
 8004378:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	6fffffc0 	.word	0x6fffffc0

08004390 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a4:	d101      	bne.n	80043aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <LL_ADC_IsEnabled+0x18>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <LL_ADC_IsEnabled+0x1a>
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d101      	bne.n	80043f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d101      	bne.n	800441c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b089      	sub	sp, #36	@ 0x24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004438:	2300      	movs	r3, #0
 800443a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e18f      	b.n	8004766 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe fc25 	bl	8002ca4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff67 	bl	8004340 <LL_ADC_IsDeepPowerDownEnabled>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff4d 	bl	800431c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff82 	bl	8004390 <LL_ADC_IsInternalRegulatorEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d114      	bne.n	80044bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ff66 	bl	8004368 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800449c:	4b87      	ldr	r3, [pc, #540]	@ (80046bc <HAL_ADC_Init+0x290>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	4a87      	ldr	r2, [pc, #540]	@ (80046c0 <HAL_ADC_Init+0x294>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044ae:	e002      	b.n	80044b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f9      	bne.n	80044b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff65 	bl	8004390 <LL_ADC_IsInternalRegulatorEnabled>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff76 	bl	80043de <LL_ADC_REG_IsConversionOngoing>
 80044f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8129 	bne.w	8004754 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 8125 	bne.w	8004754 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004512:	f043 0202 	orr.w	r2, r3, #2
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff4a 	bl	80043b8 <LL_ADC_IsEnabled>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d136      	bne.n	8004598 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_ADC_Init+0x298>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_ADC_Init+0x112>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a63      	ldr	r2, [pc, #396]	@ (80046c8 <HAL_ADC_Init+0x29c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10e      	bne.n	800455c <HAL_ADC_Init+0x130>
 800453e:	4861      	ldr	r0, [pc, #388]	@ (80046c4 <HAL_ADC_Init+0x298>)
 8004540:	f7ff ff3a 	bl	80043b8 <LL_ADC_IsEnabled>
 8004544:	4604      	mov	r4, r0
 8004546:	4860      	ldr	r0, [pc, #384]	@ (80046c8 <HAL_ADC_Init+0x29c>)
 8004548:	f7ff ff36 	bl	80043b8 <LL_ADC_IsEnabled>
 800454c:	4603      	mov	r3, r0
 800454e:	4323      	orrs	r3, r4
 8004550:	2b00      	cmp	r3, #0
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e008      	b.n	800456e <HAL_ADC_Init+0x142>
 800455c:	485b      	ldr	r0, [pc, #364]	@ (80046cc <HAL_ADC_Init+0x2a0>)
 800455e:	f7ff ff2b 	bl	80043b8 <LL_ADC_IsEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d012      	beq.n	8004598 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a53      	ldr	r2, [pc, #332]	@ (80046c4 <HAL_ADC_Init+0x298>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_ADC_Init+0x15a>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a51      	ldr	r2, [pc, #324]	@ (80046c8 <HAL_ADC_Init+0x29c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_ADC_Init+0x15e>
 8004586:	4a52      	ldr	r2, [pc, #328]	@ (80046d0 <HAL_ADC_Init+0x2a4>)
 8004588:	e000      	b.n	800458c <HAL_ADC_Init+0x160>
 800458a:	4a52      	ldr	r2, [pc, #328]	@ (80046d4 <HAL_ADC_Init+0x2a8>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff fdbe 	bl	8004114 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004598:	f7ff fd86 	bl	80040a8 <HAL_GetREVID>
 800459c:	4603      	mov	r3, r0
 800459e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d914      	bls.n	80045d0 <HAL_ADC_Init+0x1a4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d110      	bne.n	80045d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	7d5b      	ldrb	r3, [r3, #21]
 80045b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7f1b      	ldrb	r3, [r3, #28]
 80045c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80045c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045c8:	f043 030c 	orr.w	r3, r3, #12
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e00d      	b.n	80045ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7d5b      	ldrb	r3, [r3, #21]
 80045d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7f1b      	ldrb	r3, [r3, #28]
 80045e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7f1b      	ldrb	r3, [r3, #28]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d106      	bne.n	8004602 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	045b      	lsls	r3, r3, #17
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004616:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_ADC_Init+0x2ac>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fed1 	bl	80043de <LL_ADC_REG_IsConversionOngoing>
 800463c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fede 	bl	8004404 <LL_ADC_INJ_IsConversionOngoing>
 8004648:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d15f      	bne.n	8004710 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d15c      	bne.n	8004710 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	7d1b      	ldrb	r3, [r3, #20]
 800465a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <HAL_ADC_Init+0x2b0>)
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	430b      	orrs	r3, r1
 8004676:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800467e:	2b01      	cmp	r3, #1
 8004680:	d130      	bne.n	80046e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_ADC_Init+0x2b4>)
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004696:	3a01      	subs	r2, #1
 8004698:	0411      	lsls	r1, r2, #16
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046aa:	430a      	orrs	r2, r1
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
 80046b8:	e01c      	b.n	80046f4 <HAL_ADC_Init+0x2c8>
 80046ba:	bf00      	nop
 80046bc:	24000000 	.word	0x24000000
 80046c0:	053e2d63 	.word	0x053e2d63
 80046c4:	40022000 	.word	0x40022000
 80046c8:	40022100 	.word	0x40022100
 80046cc:	58026000 	.word	0x58026000
 80046d0:	40022300 	.word	0x40022300
 80046d4:	58026300 	.word	0x58026300
 80046d8:	fff0c003 	.word	0xfff0c003
 80046dc:	ffffbffc 	.word	0xffffbffc
 80046e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fb8c 	bl	8004e28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10c      	bne.n	8004732 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	f023 010f 	bic.w	r1, r3, #15
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004730:	e007      	b.n	8004742 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 020f 	bic.w	r2, r2, #15
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
 8004752:	e007      	b.n	8004764 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004764:	7ffb      	ldrb	r3, [r7, #31]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	@ 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	bf00      	nop

08004770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b0a1      	sub	sp, #132	@ 0x84
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a65      	ldr	r2, [pc, #404]	@ (8004920 <HAL_ADC_ConfigChannel+0x1b0>)
 800478a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x2a>
 8004796:	2302      	movs	r3, #2
 8004798:	e32e      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x688>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fe19 	bl	80043de <LL_ADC_REG_IsConversionOngoing>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 8313 	bne.w	8004dda <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	db2c      	blt.n	8004816 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d108      	bne.n	80047da <HAL_ADC_ConfigChannel+0x6a>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0e9b      	lsrs	r3, r3, #26
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2201      	movs	r2, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	e016      	b.n	8004808 <HAL_ADC_ConfigChannel+0x98>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ea:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80047f2:	2320      	movs	r3, #32
 80047f4:	e003      	b.n	80047fe <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80047f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2201      	movs	r2, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	69d1      	ldr	r1, [r2, #28]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	430b      	orrs	r3, r1
 8004814:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	f7ff fcfe 	bl	8004224 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fdd6 	bl	80043de <LL_ADC_REG_IsConversionOngoing>
 8004832:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fde3 	bl	8004404 <LL_ADC_INJ_IsConversionOngoing>
 800483e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004840:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 80b8 	bne.w	80049b8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 80b4 	bne.w	80049b8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6819      	ldr	r1, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	461a      	mov	r2, r3
 800485e:	f7ff fd0d 	bl	800427c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004862:	4b30      	ldr	r3, [pc, #192]	@ (8004924 <HAL_ADC_ConfigChannel+0x1b4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800486a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486e:	d10b      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x118>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	e01d      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x154>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x13e>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	089b      	lsrs	r3, r3, #2
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	e00a      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x154>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d02c      	beq.n	8004928 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6919      	ldr	r1, [r3, #16]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048dc:	f7ff fc4e 	bl	800417c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6919      	ldr	r1, [r3, #16]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	7e5b      	ldrb	r3, [r3, #25]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x186>
 80048f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80048f4:	e000      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x188>
 80048f6:	2300      	movs	r3, #0
 80048f8:	461a      	mov	r2, r3
 80048fa:	f7ff fc78 	bl	80041ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	7e1b      	ldrb	r3, [r3, #24]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x1a4>
 800490e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004912:	e000      	b.n	8004916 <HAL_ADC_ConfigChannel+0x1a6>
 8004914:	2300      	movs	r3, #0
 8004916:	461a      	mov	r2, r3
 8004918:	f7ff fc50 	bl	80041bc <LL_ADC_SetDataRightShift>
 800491c:	e04c      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x248>
 800491e:	bf00      	nop
 8004920:	47ff0000 	.word	0x47ff0000
 8004924:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	069b      	lsls	r3, r3, #26
 8004938:	429a      	cmp	r2, r3
 800493a:	d107      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800494a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800496e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004976:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004992:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	069b      	lsls	r3, r3, #26
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d107      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80049b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fcfb 	bl	80043b8 <LL_ADC_IsEnabled>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8211 	bne.w	8004dec <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f7ff fc7c 	bl	80042d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4aa1      	ldr	r2, [pc, #644]	@ (8004c68 <HAL_ADC_ConfigChannel+0x4f8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	f040 812e 	bne.w	8004c44 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x2a0>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0e9b      	lsrs	r3, r3, #26
 80049fe:	3301      	adds	r3, #1
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2b09      	cmp	r3, #9
 8004a06:	bf94      	ite	ls
 8004a08:	2301      	movls	r3, #1
 8004a0a:	2300      	movhi	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	e019      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x2d4>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004a28:	2320      	movs	r3, #32
 8004a2a:	e003      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	bf94      	ite	ls
 8004a3e:	2301      	movls	r3, #1
 8004a40:	2300      	movhi	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d079      	beq.n	8004b3c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x2f4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	069b      	lsls	r3, r3, #26
 8004a5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a62:	e015      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x320>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a74:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e003      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	069b      	lsls	r3, r3, #26
 8004a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x340>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	e017      	b.n	8004ae0 <HAL_ADC_ConfigChannel+0x370>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	e003      	b.n	8004ad4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	ea42 0103 	orr.w	r1, r2, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x396>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e9b      	lsrs	r3, r3, #26
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	051b      	lsls	r3, r3, #20
 8004b04:	e018      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x3c8>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0e:	fa93 f3a3 	rbit	r3, r3
 8004b12:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	e003      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b24:	fab3 f383 	clz	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	e07e      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x3e8>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	0e9b      	lsrs	r3, r3, #26
 8004b4e:	3301      	adds	r3, #1
 8004b50:	069b      	lsls	r3, r3, #26
 8004b52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b56:	e015      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x414>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	069b      	lsls	r3, r3, #26
 8004b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x434>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	e017      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x464>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	61bb      	str	r3, [r7, #24]
  return result;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x490>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3b1e      	subs	r3, #30
 8004bf8:	051b      	lsls	r3, r3, #20
 8004bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bfe:	e01b      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x4c8>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	fa93 f3a3 	rbit	r3, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
  return result;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004c18:	2320      	movs	r3, #32
 8004c1a:	e003      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	3301      	adds	r3, #1
 8004c26:	f003 021f 	and.w	r2, r3, #31
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	3b1e      	subs	r3, #30
 8004c32:	051b      	lsls	r3, r3, #20
 8004c34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7ff fb1c 	bl	800427c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f280 80cf 	bge.w	8004dec <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a06      	ldr	r2, [pc, #24]	@ (8004c6c <HAL_ADC_ConfigChannel+0x4fc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_ConfigChannel+0x4f2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a04      	ldr	r2, [pc, #16]	@ (8004c70 <HAL_ADC_ConfigChannel+0x500>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10a      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x508>
 8004c62:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <HAL_ADC_ConfigChannel+0x504>)
 8004c64:	e009      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x50a>
 8004c66:	bf00      	nop
 8004c68:	47ff0000 	.word	0x47ff0000
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40022100 	.word	0x40022100
 8004c74:	40022300 	.word	0x40022300
 8004c78:	4b61      	ldr	r3, [pc, #388]	@ (8004e00 <HAL_ADC_ConfigChannel+0x690>)
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fa70 	bl	8004160 <LL_ADC_GetCommonPathInternalCh>
 8004c80:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5f      	ldr	r2, [pc, #380]	@ (8004e04 <HAL_ADC_ConfigChannel+0x694>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADC_ConfigChannel+0x526>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5d      	ldr	r2, [pc, #372]	@ (8004e08 <HAL_ADC_ConfigChannel+0x698>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10e      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x544>
 8004c96:	485b      	ldr	r0, [pc, #364]	@ (8004e04 <HAL_ADC_ConfigChannel+0x694>)
 8004c98:	f7ff fb8e 	bl	80043b8 <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	485a      	ldr	r0, [pc, #360]	@ (8004e08 <HAL_ADC_ConfigChannel+0x698>)
 8004ca0:	f7ff fb8a 	bl	80043b8 <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4323      	orrs	r3, r4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e008      	b.n	8004cc6 <HAL_ADC_ConfigChannel+0x556>
 8004cb4:	4855      	ldr	r0, [pc, #340]	@ (8004e0c <HAL_ADC_ConfigChannel+0x69c>)
 8004cb6:	f7ff fb7f 	bl	80043b8 <LL_ADC_IsEnabled>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d07d      	beq.n	8004dc6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a50      	ldr	r2, [pc, #320]	@ (8004e10 <HAL_ADC_ConfigChannel+0x6a0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d130      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x5c6>
 8004cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d12b      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a4a      	ldr	r2, [pc, #296]	@ (8004e0c <HAL_ADC_ConfigChannel+0x69c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f040 8081 	bne.w	8004dec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a45      	ldr	r2, [pc, #276]	@ (8004e04 <HAL_ADC_ConfigChannel+0x694>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0x58e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a43      	ldr	r2, [pc, #268]	@ (8004e08 <HAL_ADC_ConfigChannel+0x698>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x592>
 8004cfe:	4a45      	ldr	r2, [pc, #276]	@ (8004e14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d00:	e000      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x594>
 8004d02:	4a3f      	ldr	r2, [pc, #252]	@ (8004e00 <HAL_ADC_ConfigChannel+0x690>)
 8004d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7ff fa14 	bl	800413a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d12:	4b41      	ldr	r3, [pc, #260]	@ (8004e18 <HAL_ADC_ConfigChannel+0x6a8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	4a40      	ldr	r2, [pc, #256]	@ (8004e1c <HAL_ADC_ConfigChannel+0x6ac>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	3301      	adds	r3, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d26:	e002      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f9      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d34:	e05a      	b.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a39      	ldr	r2, [pc, #228]	@ (8004e20 <HAL_ADC_ConfigChannel+0x6b0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d11e      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x60e>
 8004d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d119      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e0c <HAL_ADC_ConfigChannel+0x69c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d14b      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	@ (8004e04 <HAL_ADC_ConfigChannel+0x694>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_ADC_ConfigChannel+0x5f8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a29      	ldr	r2, [pc, #164]	@ (8004e08 <HAL_ADC_ConfigChannel+0x698>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d101      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x5fc>
 8004d68:	4a2a      	ldr	r2, [pc, #168]	@ (8004e14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004d6a:	e000      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x5fe>
 8004d6c:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <HAL_ADC_ConfigChannel+0x690>)
 8004d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7ff f9df 	bl	800413a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d7c:	e036      	b.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_ADC_ConfigChannel+0x6b4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d131      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
 8004d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d12c      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <HAL_ADC_ConfigChannel+0x69c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d127      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <HAL_ADC_ConfigChannel+0x694>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0x640>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a17      	ldr	r2, [pc, #92]	@ (8004e08 <HAL_ADC_ConfigChannel+0x698>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x644>
 8004db0:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <HAL_ADC_ConfigChannel+0x6a4>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x646>
 8004db4:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <HAL_ADC_ConfigChannel+0x690>)
 8004db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f7ff f9bb 	bl	800413a <LL_ADC_SetCommonPathInternalCh>
 8004dc4:	e012      	b.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004dd8:	e008      	b.n	8004dec <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004df4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3784      	adds	r7, #132	@ 0x84
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	58026300 	.word	0x58026300
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40022100 	.word	0x40022100
 8004e0c:	58026000 	.word	0x58026000
 8004e10:	cb840000 	.word	0xcb840000
 8004e14:	40022300 	.word	0x40022300
 8004e18:	24000000 	.word	0x24000000
 8004e1c:	053e2d63 	.word	0x053e2d63
 8004e20:	c7520000 	.word	0xc7520000
 8004e24:	cfb80000 	.word	0xcfb80000

08004e28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a7a      	ldr	r2, [pc, #488]	@ (8005020 <ADC_ConfigureBoostMode+0x1f8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <ADC_ConfigureBoostMode+0x1c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a79      	ldr	r2, [pc, #484]	@ (8005024 <ADC_ConfigureBoostMode+0x1fc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d109      	bne.n	8004e58 <ADC_ConfigureBoostMode+0x30>
 8004e44:	4b78      	ldr	r3, [pc, #480]	@ (8005028 <ADC_ConfigureBoostMode+0x200>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e008      	b.n	8004e6a <ADC_ConfigureBoostMode+0x42>
 8004e58:	4b74      	ldr	r3, [pc, #464]	@ (800502c <ADC_ConfigureBoostMode+0x204>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e6e:	f003 fe7f 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8004e72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e7c:	d010      	beq.n	8004ea0 <ADC_ConfigureBoostMode+0x78>
 8004e7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e82:	d873      	bhi.n	8004f6c <ADC_ConfigureBoostMode+0x144>
 8004e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e88:	d002      	beq.n	8004e90 <ADC_ConfigureBoostMode+0x68>
 8004e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e8e:	d16d      	bne.n	8004f6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	60fb      	str	r3, [r7, #12]
        break;
 8004e9e:	e068      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	60fb      	str	r3, [r7, #12]
        break;
 8004ea6:	e064      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ea8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	f005 f8c4 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 8004eb4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004ebe:	d051      	beq.n	8004f64 <ADC_ConfigureBoostMode+0x13c>
 8004ec0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004ec4:	d854      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004ec6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004eca:	d047      	beq.n	8004f5c <ADC_ConfigureBoostMode+0x134>
 8004ecc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ed0:	d84e      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004ed2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ed6:	d03d      	beq.n	8004f54 <ADC_ConfigureBoostMode+0x12c>
 8004ed8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004edc:	d848      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee2:	d033      	beq.n	8004f4c <ADC_ConfigureBoostMode+0x124>
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee8:	d842      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004eea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004eee:	d029      	beq.n	8004f44 <ADC_ConfigureBoostMode+0x11c>
 8004ef0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004ef4:	d83c      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004ef6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004efa:	d01a      	beq.n	8004f32 <ADC_ConfigureBoostMode+0x10a>
 8004efc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f00:	d836      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004f02:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f06:	d014      	beq.n	8004f32 <ADC_ConfigureBoostMode+0x10a>
 8004f08:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f0c:	d830      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f12:	d00e      	beq.n	8004f32 <ADC_ConfigureBoostMode+0x10a>
 8004f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f18:	d82a      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004f1a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f1e:	d008      	beq.n	8004f32 <ADC_ConfigureBoostMode+0x10a>
 8004f20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f24:	d824      	bhi.n	8004f70 <ADC_ConfigureBoostMode+0x148>
 8004f26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f2a:	d002      	beq.n	8004f32 <ADC_ConfigureBoostMode+0x10a>
 8004f2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f30:	d11e      	bne.n	8004f70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	0c9b      	lsrs	r3, r3, #18
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	60fb      	str	r3, [r7, #12]
        break;
 8004f42:	e016      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
        break;
 8004f4a:	e012      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	60fb      	str	r3, [r7, #12]
        break;
 8004f52:	e00e      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	60fb      	str	r3, [r7, #12]
        break;
 8004f5a:	e00a      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	09db      	lsrs	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
        break;
 8004f62:	e006      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	60fb      	str	r3, [r7, #12]
        break;
 8004f6a:	e002      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f70:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004f72:	f7ff f899 	bl	80040a8 <HAL_GetREVID>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d815      	bhi.n	8004fac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a2b      	ldr	r2, [pc, #172]	@ (8005030 <ADC_ConfigureBoostMode+0x208>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d908      	bls.n	8004f9a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f96:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f98:	e03e      	b.n	8005018 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	e035      	b.n	8005018 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005034 <ADC_ConfigureBoostMode+0x20c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d808      	bhi.n	8004fcc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	e025      	b.n	8005018 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a1a      	ldr	r2, [pc, #104]	@ (8005038 <ADC_ConfigureBoostMode+0x210>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d80a      	bhi.n	8004fea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	e016      	b.n	8005018 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a13      	ldr	r2, [pc, #76]	@ (800503c <ADC_ConfigureBoostMode+0x214>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d80a      	bhi.n	8005008 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	e007      	b.n	8005018 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40022000 	.word	0x40022000
 8005024:	40022100 	.word	0x40022100
 8005028:	40022300 	.word	0x40022300
 800502c:	58026300 	.word	0x58026300
 8005030:	01312d00 	.word	0x01312d00
 8005034:	005f5e10 	.word	0x005f5e10
 8005038:	00bebc20 	.word	0x00bebc20
 800503c:	017d7840 	.word	0x017d7840

08005040 <LL_ADC_IsEnabled>:
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <LL_ADC_IsEnabled+0x18>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <LL_ADC_IsEnabled+0x1a>
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <LL_ADC_REG_IsConversionOngoing>:
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b04      	cmp	r3, #4
 8005078:	d101      	bne.n	800507e <LL_ADC_REG_IsConversionOngoing+0x18>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b09f      	sub	sp, #124	@ 0x7c
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0be      	b.n	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a5c      	ldr	r2, [pc, #368]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d102      	bne.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	e001      	b.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e09d      	b.n	8005228 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff ffb9 	bl	8005066 <LL_ADC_REG_IsConversionOngoing>
 80050f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ffb3 	bl	8005066 <LL_ADC_REG_IsConversionOngoing>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d17f      	bne.n	8005206 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005108:	2b00      	cmp	r3, #0
 800510a:	d17c      	bne.n	8005206 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a47      	ldr	r2, [pc, #284]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a46      	ldr	r2, [pc, #280]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d101      	bne.n	8005124 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005120:	4b45      	ldr	r3, [pc, #276]	@ (8005238 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005122:	e000      	b.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005124:	4b45      	ldr	r3, [pc, #276]	@ (800523c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005126:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d039      	beq.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	431a      	orrs	r2, r3
 800513e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005140:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a3a      	ldr	r2, [pc, #232]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a38      	ldr	r2, [pc, #224]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10e      	bne.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005156:	4836      	ldr	r0, [pc, #216]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005158:	f7ff ff72 	bl	8005040 <LL_ADC_IsEnabled>
 800515c:	4604      	mov	r4, r0
 800515e:	4835      	ldr	r0, [pc, #212]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005160:	f7ff ff6e 	bl	8005040 <LL_ADC_IsEnabled>
 8005164:	4603      	mov	r3, r0
 8005166:	4323      	orrs	r3, r4
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005174:	4832      	ldr	r0, [pc, #200]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005176:	f7ff ff63 	bl	8005040 <LL_ADC_IsEnabled>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d047      	beq.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800518a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	4b2d      	ldr	r3, [pc, #180]	@ (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005190:	4013      	ands	r3, r2
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	430a      	orrs	r2, r1
 800519c:	431a      	orrs	r2, r3
 800519e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051a2:	e03a      	b.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80051a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d10e      	bne.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80051c4:	481a      	ldr	r0, [pc, #104]	@ (8005230 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051c6:	f7ff ff3b 	bl	8005040 <LL_ADC_IsEnabled>
 80051ca:	4604      	mov	r4, r0
 80051cc:	4819      	ldr	r0, [pc, #100]	@ (8005234 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051ce:	f7ff ff37 	bl	8005040 <LL_ADC_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4323      	orrs	r3, r4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e008      	b.n	80051f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80051e2:	4817      	ldr	r0, [pc, #92]	@ (8005240 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051e4:	f7ff ff2c 	bl	8005040 <LL_ADC_IsEnabled>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d010      	beq.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051fe:	4013      	ands	r3, r2
 8005200:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005202:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005204:	e009      	b.n	800521a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005218:	e000      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800521a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005224:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005228:	4618      	mov	r0, r3
 800522a:	377c      	adds	r7, #124	@ 0x7c
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}
 8005230:	40022000 	.word	0x40022000
 8005234:	40022100 	.word	0x40022100
 8005238:	40022300 	.word	0x40022300
 800523c:	58026300 	.word	0x58026300
 8005240:	58026000 	.word	0x58026000
 8005244:	fffff0e0 	.word	0xfffff0e0

08005248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <__NVIC_SetPriorityGrouping+0x40>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005270:	4b06      	ldr	r3, [pc, #24]	@ (800528c <__NVIC_SetPriorityGrouping+0x44>)
 8005272:	4313      	orrs	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005276:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <__NVIC_SetPriorityGrouping+0x40>)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	60d3      	str	r3, [r2, #12]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	e000ed00 	.word	0xe000ed00
 800528c:	05fa0000 	.word	0x05fa0000

08005290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005294:	4b04      	ldr	r3, [pc, #16]	@ (80052a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 0307 	and.w	r3, r3, #7
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db0a      	blt.n	80052d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	490c      	ldr	r1, [pc, #48]	@ (80052f8 <__NVIC_SetPriority+0x4c>)
 80052c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	440b      	add	r3, r1
 80052d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d4:	e00a      	b.n	80052ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4908      	ldr	r1, [pc, #32]	@ (80052fc <__NVIC_SetPriority+0x50>)
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	3b04      	subs	r3, #4
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	761a      	strb	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	e000e100 	.word	0xe000e100
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	@ 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0307 	rsb	r3, r3, #7
 800531a:	2b04      	cmp	r3, #4
 800531c:	bf28      	it	cs
 800531e:	2304      	movcs	r3, #4
 8005320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3304      	adds	r3, #4
 8005326:	2b06      	cmp	r3, #6
 8005328:	d902      	bls.n	8005330 <NVIC_EncodePriority+0x30>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3b03      	subs	r3, #3
 800532e:	e000      	b.n	8005332 <NVIC_EncodePriority+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	401a      	ands	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005348:	f04f 31ff 	mov.w	r1, #4294967295
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43d9      	mvns	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	4313      	orrs	r3, r2
         );
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	@ 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3b01      	subs	r3, #1
 8005374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005378:	d301      	bcc.n	800537e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800537a:	2301      	movs	r3, #1
 800537c:	e00f      	b.n	800539e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537e:	4a0a      	ldr	r2, [pc, #40]	@ (80053a8 <SysTick_Config+0x40>)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005386:	210f      	movs	r1, #15
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	f7ff ff8e 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005390:	4b05      	ldr	r3, [pc, #20]	@ (80053a8 <SysTick_Config+0x40>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005396:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <SysTick_Config+0x40>)
 8005398:	2207      	movs	r2, #7
 800539a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	e000e010 	.word	0xe000e010

080053ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff47 	bl	8005248 <__NVIC_SetPriorityGrouping>
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	4603      	mov	r3, r0
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff5e 	bl	8005290 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff90 	bl	8005300 <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5f 	bl	80052ac <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ffb2 	bl	8005368 <SysTick_Config>
 8005404:	4603      	mov	r3, r0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0e3      	b.n	80055ea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2223      	movs	r2, #35	@ 0x23
 8005430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fd fd0f 	bl	8002e58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543a:	4b6e      	ldr	r3, [pc, #440]	@ (80055f4 <HAL_ETH_Init+0x1e4>)
 800543c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005440:	4a6c      	ldr	r2, [pc, #432]	@ (80055f4 <HAL_ETH_Init+0x1e4>)
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800544a:	4b6a      	ldr	r3, [pc, #424]	@ (80055f4 <HAL_ETH_Init+0x1e4>)
 800544c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	7a1b      	ldrb	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005460:	2000      	movs	r0, #0
 8005462:	f7fe fe2d 	bl	80040c0 <HAL_SYSCFG_ETHInterfaceSelect>
 8005466:	e003      	b.n	8005470 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005468:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800546c:	f7fe fe28 	bl	80040c0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005470:	4b61      	ldr	r3, [pc, #388]	@ (80055f8 <HAL_ETH_Init+0x1e8>)
 8005472:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800548a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800548c:	f7fe fddc 	bl	8004048 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005492:	e011      	b.n	80054b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005494:	f7fe fdd8 	bl	8004048 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054a2:	d909      	bls.n	80054b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2204      	movs	r2, #4
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	22e0      	movs	r2, #224	@ 0xe0
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e098      	b.n	80055ea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e4      	bne.n	8005494 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f89e 	bl	800560c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80054d0:	f003 fb4e 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a49      	ldr	r2, [pc, #292]	@ (80055fc <HAL_ETH_Init+0x1ec>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	0c9a      	lsrs	r2, r3, #18
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3a01      	subs	r2, #1
 80054e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fa81 	bl	80059f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80054fa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800550a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	22e0      	movs	r2, #224	@ 0xe0
 8005526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e05d      	b.n	80055ea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005536:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800553a:	4b31      	ldr	r3, [pc, #196]	@ (8005600 <HAL_ETH_Init+0x1f0>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6952      	ldr	r2, [r2, #20]
 8005542:	0051      	lsls	r1, r2, #1
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	430b      	orrs	r3, r1
 800554a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800554e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fae9 	bl	8005b2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fb2f 	bl	8005bbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	3305      	adds	r3, #5
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	3304      	adds	r3, #4
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4619      	mov	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	3303      	adds	r3, #3
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	061a      	lsls	r2, r3, #24
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	3302      	adds	r3, #2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800559c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80055aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80055ac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b11      	ldr	r3, [pc, #68]	@ (8005604 <HAL_ETH_Init+0x1f4>)
 80055be:	430b      	orrs	r3, r1
 80055c0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005608 <HAL_ETH_Init+0x1f8>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2210      	movs	r2, #16
 80055e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	58000400 	.word	0x58000400
 80055fc:	431bde83 	.word	0x431bde83
 8005600:	ffff8001 	.word	0xffff8001
 8005604:	0c020060 	.word	0x0c020060
 8005608:	0c20c000 	.word	0x0c20c000

0800560c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800561c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005624:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005626:	f003 faa3 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 800562a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a1a      	ldr	r2, [pc, #104]	@ (8005698 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d804      	bhi.n	800563e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e022      	b.n	8005684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4a16      	ldr	r2, [pc, #88]	@ (800569c <HAL_ETH_SetMDIOClockRange+0x90>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d204      	bcs.n	8005650 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e019      	b.n	8005684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d915      	bls.n	8005684 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a12      	ldr	r2, [pc, #72]	@ (80056a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d804      	bhi.n	800566a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e00c      	b.n	8005684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4a0e      	ldr	r2, [pc, #56]	@ (80056a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d804      	bhi.n	800567c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e003      	b.n	8005684 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	02160ebf 	.word	0x02160ebf
 800569c:	03938700 	.word	0x03938700
 80056a0:	05f5e0ff 	.word	0x05f5e0ff
 80056a4:	08f0d17f 	.word	0x08f0d17f
 80056a8:	0ee6b27f 	.word	0x0ee6b27f

080056ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80056be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	791b      	ldrb	r3, [r3, #4]
 80056c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80056c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	7b1b      	ldrb	r3, [r3, #12]
 80056cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80056ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	7b5b      	ldrb	r3, [r3, #13]
 80056d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80056d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	7b9b      	ldrb	r3, [r3, #14]
 80056dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80056de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	7bdb      	ldrb	r3, [r3, #15]
 80056e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	7c12      	ldrb	r2, [r2, #16]
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d102      	bne.n	80056f6 <ETH_SetMACConfig+0x4a>
 80056f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80056f4:	e000      	b.n	80056f8 <ETH_SetMACConfig+0x4c>
 80056f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	7c52      	ldrb	r2, [r2, #17]
 80056fe:	2a00      	cmp	r2, #0
 8005700:	d102      	bne.n	8005708 <ETH_SetMACConfig+0x5c>
 8005702:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005706:	e000      	b.n	800570a <ETH_SetMACConfig+0x5e>
 8005708:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800570a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	7c9b      	ldrb	r3, [r3, #18]
 8005710:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005712:	431a      	orrs	r2, r3
               macconf->Speed |
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005718:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800571e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	7f1b      	ldrb	r3, [r3, #28]
 8005724:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	7f5b      	ldrb	r3, [r3, #29]
 800572c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800572e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	7f92      	ldrb	r2, [r2, #30]
 8005734:	2a00      	cmp	r2, #0
 8005736:	d102      	bne.n	800573e <ETH_SetMACConfig+0x92>
 8005738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800573c:	e000      	b.n	8005740 <ETH_SetMACConfig+0x94>
 800573e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005740:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	7fdb      	ldrb	r3, [r3, #31]
 8005746:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005748:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005750:	2a00      	cmp	r2, #0
 8005752:	d102      	bne.n	800575a <ETH_SetMACConfig+0xae>
 8005754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005758:	e000      	b.n	800575c <ETH_SetMACConfig+0xb0>
 800575a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800575c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800576a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800576c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b56      	ldr	r3, [pc, #344]	@ (80058d8 <ETH_SetMACConfig+0x22c>)
 800577e:	4013      	ands	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	430b      	orrs	r3, r1
 8005788:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005796:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005798:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80057a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80057ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	d102      	bne.n	80057be <ETH_SetMACConfig+0x112>
 80057b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80057bc:	e000      	b.n	80057c0 <ETH_SetMACConfig+0x114>
 80057be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80057c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4b42      	ldr	r3, [pc, #264]	@ (80058dc <ETH_SetMACConfig+0x230>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	430b      	orrs	r3, r1
 80057dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <ETH_SetMACConfig+0x234>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005808:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800580e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005816:	2a00      	cmp	r2, #0
 8005818:	d101      	bne.n	800581e <ETH_SetMACConfig+0x172>
 800581a:	2280      	movs	r2, #128	@ 0x80
 800581c:	e000      	b.n	8005820 <ETH_SetMACConfig+0x174>
 800581e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005820:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005826:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005832:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005836:	4013      	ands	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	430b      	orrs	r3, r1
 8005840:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005848:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005850:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	f023 0103 	bic.w	r1, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	430a      	orrs	r2, r1
 800586a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005876:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005892:	2a00      	cmp	r2, #0
 8005894:	d101      	bne.n	800589a <ETH_SetMACConfig+0x1ee>
 8005896:	2240      	movs	r2, #64	@ 0x40
 8005898:	e000      	b.n	800589c <ETH_SetMACConfig+0x1f0>
 800589a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800589c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80058a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80058a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80058ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80058bc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	00048083 	.word	0x00048083
 80058dc:	c0f88000 	.word	0xc0f88000
 80058e0:	fffffef0 	.word	0xfffffef0

080058e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b38      	ldr	r3, [pc, #224]	@ (80059dc <ETH_SetDMAConfig+0xf8>)
 80058fa:	4013      	ands	r3, r2
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	6811      	ldr	r1, [r2, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	430b      	orrs	r3, r1
 8005906:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800590a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	791b      	ldrb	r3, [r3, #4]
 8005910:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005916:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7b1b      	ldrb	r3, [r3, #12]
 800591c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	4b2c      	ldr	r3, [pc, #176]	@ (80059e0 <ETH_SetDMAConfig+0xfc>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	430b      	orrs	r3, r1
 8005938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800593c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	7b5b      	ldrb	r3, [r3, #13]
 8005942:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005954:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005958:	4b22      	ldr	r3, [pc, #136]	@ (80059e4 <ETH_SetDMAConfig+0x100>)
 800595a:	4013      	ands	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	430b      	orrs	r3, r1
 8005964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005968:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	7d1b      	ldrb	r3, [r3, #20]
 8005974:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005976:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	7f5b      	ldrb	r3, [r3, #29]
 800597c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800598a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800598e:	4b16      	ldr	r3, [pc, #88]	@ (80059e8 <ETH_SetDMAConfig+0x104>)
 8005990:	4013      	ands	r3, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	430b      	orrs	r3, r1
 800599a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800599e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	7f1b      	ldrb	r3, [r3, #28]
 80059a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80059bc:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <ETH_SetDMAConfig+0x108>)
 80059be:	4013      	ands	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	430b      	orrs	r3, r1
 80059c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059cc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	ffff87fd 	.word	0xffff87fd
 80059e0:	ffff2ffe 	.word	0xffff2ffe
 80059e4:	fffec000 	.word	0xfffec000
 80059e8:	ffc0efef 	.word	0xffc0efef
 80059ec:	7fc0ffff 	.word	0x7fc0ffff

080059f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b0a4      	sub	sp, #144	@ 0x90
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80059fe:	2300      	movs	r3, #0
 8005a00:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a30:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005a48:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005a4c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a54:	2300      	movs	r3, #0
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a72:	2300      	movs	r3, #0
 8005a74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005aa0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005aac:	2302      	movs	r3, #2
 8005aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005aca:	2300      	movs	r3, #0
 8005acc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fde6 	bl	80056ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005afa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005afe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005b08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005b10:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005b16:	f107 0308 	add.w	r3, r7, #8
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fee1 	bl	80058e4 <ETH_SetDMAConfig>
}
 8005b22:	bf00      	nop
 8005b24:	3790      	adds	r7, #144	@ 0x90
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e01d      	b.n	8005b74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	440b      	add	r3, r1
 8005b48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	3206      	adds	r2, #6
 8005b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d9de      	bls.n	8005b38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e023      	b.n	8005c12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	440b      	add	r3, r1
 8005bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	3212      	adds	r2, #18
 8005c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d9d8      	bls.n	8005bca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2303      	movs	r3, #3
 8005c42:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c52:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b098      	sub	sp, #96	@ 0x60
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005c80:	4a84      	ldr	r2, [pc, #528]	@ (8005e94 <HAL_FDCAN_Init+0x21c>)
 8005c82:	f107 030c 	add.w	r3, r7, #12
 8005c86:	4611      	mov	r1, r2
 8005c88:	224c      	movs	r2, #76	@ 0x4c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f008 fb93 	bl	800e3b6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e1c6      	b.n	8006028 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e98 <HAL_FDCAN_Init+0x220>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d106      	bne.n	8005cb2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd f9f6 	bl	80030b8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0210 	bic.w	r2, r2, #16
 8005cda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cdc:	f7fe f9b4 	bl	8004048 <HAL_GetTick>
 8005ce0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005ce2:	e014      	b.n	8005d0e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ce4:	f7fe f9b0 	bl	8004048 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b0a      	cmp	r3, #10
 8005cf0:	d90d      	bls.n	8005d0e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2203      	movs	r2, #3
 8005d06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e18c      	b.n	8006028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d0e3      	beq.n	8005ce4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d2c:	f7fe f98c 	bl	8004048 <HAL_GetTick>
 8005d30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d32:	e014      	b.n	8005d5e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d34:	f7fe f988 	bl	8004048 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b0a      	cmp	r3, #10
 8005d40:	d90d      	bls.n	8005d5e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2203      	movs	r2, #3
 8005d56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e164      	b.n	8006028 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0e3      	beq.n	8005d34 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0202 	orr.w	r2, r2, #2
 8005d7a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7c1b      	ldrb	r3, [r3, #16]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d108      	bne.n	8005d96 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d92:	619a      	str	r2, [r3, #24]
 8005d94:	e007      	b.n	8005da6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7c5b      	ldrb	r3, [r3, #17]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d108      	bne.n	8005dc0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dbc:	619a      	str	r2, [r3, #24]
 8005dbe:	e007      	b.n	8005dd0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	7c9b      	ldrb	r3, [r3, #18]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d108      	bne.n	8005dea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	e007      	b.n	8005dfa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005df8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005e1e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0210 	bic.w	r2, r2, #16
 8005e2e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d108      	bne.n	8005e4a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0204 	orr.w	r2, r2, #4
 8005e46:	619a      	str	r2, [r3, #24]
 8005e48:	e030      	b.n	8005eac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02c      	beq.n	8005eac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d020      	beq.n	8005e9c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e68:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0210 	orr.w	r2, r2, #16
 8005e78:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d114      	bne.n	8005eac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0220 	orr.w	r2, r2, #32
 8005e90:	619a      	str	r2, [r3, #24]
 8005e92:	e00b      	b.n	8005eac <HAL_FDCAN_Init+0x234>
 8005e94:	0800f5e4 	.word	0x0800f5e4
 8005e98:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0220 	orr.w	r2, r2, #32
 8005eaa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ebc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ed4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ed6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee0:	d115      	bne.n	8005f0e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	3b01      	subs	r3, #1
 8005eee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ef0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005efa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f0a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f0c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f34:	4413      	add	r3, r2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d011      	beq.n	8005f5e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005f42:	f023 0107 	bic.w	r1, r3, #7
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3360      	adds	r3, #96	@ 0x60
 8005f4e:	443b      	add	r3, r7
 8005f50:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d011      	beq.n	8005f8a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f6e:	f023 0107 	bic.w	r1, r3, #7
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	3360      	adds	r3, #96	@ 0x60
 8005f7a:	443b      	add	r3, r7
 8005f7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f9a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	3360      	adds	r3, #96	@ 0x60
 8005fa6:	443b      	add	r3, r7
 8005fa8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005fc8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	3360      	adds	r3, #96	@ 0x60
 8005fd4:	443b      	add	r3, r7
 8005fd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a11      	ldr	r2, [pc, #68]	@ (8006030 <HAL_FDCAN_Init+0x3b8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d107      	bne.n	8006000 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f022 0203 	bic.w	r2, r2, #3
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f80b 	bl	8006034 <FDCAN_CalcultateRamBlockAddresses>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006024:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006028:	4618      	mov	r0, r3
 800602a:	3760      	adds	r7, #96	@ 0x60
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	4000a000 	.word	0x4000a000

08006034 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006040:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800604a:	4ba7      	ldr	r3, [pc, #668]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800604c:	4013      	ands	r3, r2
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0091      	lsls	r1, r2, #2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	430b      	orrs	r3, r1
 8006058:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006064:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	041a      	lsls	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	4413      	add	r3, r2
 8006080:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800608a:	4b97      	ldr	r3, [pc, #604]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0091      	lsls	r1, r2, #2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6812      	ldr	r2, [r2, #0]
 8006096:	430b      	orrs	r3, r1
 8006098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	041a      	lsls	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80060cc:	4b86      	ldr	r3, [pc, #536]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	0091      	lsls	r1, r2, #2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6812      	ldr	r2, [r2, #0]
 80060d8:	430b      	orrs	r3, r1
 80060da:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ee:	041a      	lsls	r2, r3, #16
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	4413      	add	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006114:	4b74      	ldr	r3, [pc, #464]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	0091      	lsls	r1, r2, #2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	430b      	orrs	r3, r1
 8006122:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800612e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006136:	041a      	lsls	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800615c:	4b62      	ldr	r3, [pc, #392]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800615e:	4013      	ands	r3, r2
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	0091      	lsls	r1, r2, #2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	430b      	orrs	r3, r1
 800616a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006188:	4b57      	ldr	r3, [pc, #348]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	0091      	lsls	r1, r2, #2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	430b      	orrs	r3, r1
 8006196:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061a2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061aa:	041a      	lsls	r2, r3, #16
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	4413      	add	r3, r2
 80061c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80061ca:	4b47      	ldr	r3, [pc, #284]	@ (80062e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	0091      	lsls	r1, r2, #2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	430b      	orrs	r3, r1
 80061d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061e4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006200:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006208:	061a      	lsls	r2, r3, #24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006218:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800621a:	4413      	add	r3, r2
 800621c:	009a      	lsls	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800626c:	441a      	add	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006284:	441a      	add	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	441a      	add	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062de:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d915      	bls.n	8006310 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80062e4:	e006      	b.n	80062f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80062e6:	bf00      	nop
 80062e8:	ffff0003 	.word	0xffff0003
 80062ec:	10002b00 	.word	0x10002b00
 80062f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2203      	movs	r2, #3
 8006308:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e010      	b.n	8006332 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e005      	b.n	8006324 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d3f3      	bcc.n	8006318 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	@ 0x24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800634e:	4b89      	ldr	r3, [pc, #548]	@ (8006574 <HAL_GPIO_Init+0x234>)
 8006350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006352:	e194      	b.n	800667e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	2101      	movs	r1, #1
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	fa01 f303 	lsl.w	r3, r1, r3
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8186 	beq.w	8006678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d005      	beq.n	8006384 <HAL_GPIO_Init+0x44>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d130      	bne.n	80063e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	2203      	movs	r2, #3
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063ba:	2201      	movs	r2, #1
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	091b      	lsrs	r3, r3, #4
 80063d0:	f003 0201 	and.w	r2, r3, #1
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d017      	beq.n	8006422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	2203      	movs	r2, #3
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	4313      	orrs	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d123      	bne.n	8006476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	08da      	lsrs	r2, r3, #3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3208      	adds	r2, #8
 8006436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	220f      	movs	r2, #15
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	08da      	lsrs	r2, r3, #3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3208      	adds	r2, #8
 8006470:	69b9      	ldr	r1, [r7, #24]
 8006472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	2203      	movs	r2, #3
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0203 	and.w	r2, r3, #3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80e0 	beq.w	8006678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006578 <HAL_GPIO_Init+0x238>)
 80064ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064be:	4a2e      	ldr	r2, [pc, #184]	@ (8006578 <HAL_GPIO_Init+0x238>)
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80064c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006578 <HAL_GPIO_Init+0x238>)
 80064ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064d6:	4a29      	ldr	r2, [pc, #164]	@ (800657c <HAL_GPIO_Init+0x23c>)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	3302      	adds	r3, #2
 80064de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a20      	ldr	r2, [pc, #128]	@ (8006580 <HAL_GPIO_Init+0x240>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d052      	beq.n	80065a8 <HAL_GPIO_Init+0x268>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <HAL_GPIO_Init+0x244>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d031      	beq.n	800656e <HAL_GPIO_Init+0x22e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1e      	ldr	r2, [pc, #120]	@ (8006588 <HAL_GPIO_Init+0x248>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d02b      	beq.n	800656a <HAL_GPIO_Init+0x22a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <HAL_GPIO_Init+0x24c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d025      	beq.n	8006566 <HAL_GPIO_Init+0x226>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1c      	ldr	r2, [pc, #112]	@ (8006590 <HAL_GPIO_Init+0x250>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01f      	beq.n	8006562 <HAL_GPIO_Init+0x222>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <HAL_GPIO_Init+0x254>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d019      	beq.n	800655e <HAL_GPIO_Init+0x21e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <HAL_GPIO_Init+0x258>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <HAL_GPIO_Init+0x21a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a19      	ldr	r2, [pc, #100]	@ (800659c <HAL_GPIO_Init+0x25c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00d      	beq.n	8006556 <HAL_GPIO_Init+0x216>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <HAL_GPIO_Init+0x260>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d007      	beq.n	8006552 <HAL_GPIO_Init+0x212>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <HAL_GPIO_Init+0x264>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_GPIO_Init+0x20e>
 800654a:	2309      	movs	r3, #9
 800654c:	e02d      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 800654e:	230a      	movs	r3, #10
 8006550:	e02b      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 8006552:	2308      	movs	r3, #8
 8006554:	e029      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 8006556:	2307      	movs	r3, #7
 8006558:	e027      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 800655a:	2306      	movs	r3, #6
 800655c:	e025      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 800655e:	2305      	movs	r3, #5
 8006560:	e023      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 8006562:	2304      	movs	r3, #4
 8006564:	e021      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 8006566:	2303      	movs	r3, #3
 8006568:	e01f      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 800656a:	2302      	movs	r3, #2
 800656c:	e01d      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 800656e:	2301      	movs	r3, #1
 8006570:	e01b      	b.n	80065aa <HAL_GPIO_Init+0x26a>
 8006572:	bf00      	nop
 8006574:	58000080 	.word	0x58000080
 8006578:	58024400 	.word	0x58024400
 800657c:	58000400 	.word	0x58000400
 8006580:	58020000 	.word	0x58020000
 8006584:	58020400 	.word	0x58020400
 8006588:	58020800 	.word	0x58020800
 800658c:	58020c00 	.word	0x58020c00
 8006590:	58021000 	.word	0x58021000
 8006594:	58021400 	.word	0x58021400
 8006598:	58021800 	.word	0x58021800
 800659c:	58021c00 	.word	0x58021c00
 80065a0:	58022000 	.word	0x58022000
 80065a4:	58022400 	.word	0x58022400
 80065a8:	2300      	movs	r3, #0
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	f002 0203 	and.w	r2, r2, #3
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	4093      	lsls	r3, r2
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065ba:	4938      	ldr	r1, [pc, #224]	@ (800669c <HAL_GPIO_Init+0x35c>)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	3302      	adds	r3, #2
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800661c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	43db      	mvns	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f ae63 	bne.w	8006354 <HAL_GPIO_Init+0x14>
  }
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	3724      	adds	r7, #36	@ 0x24
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	58000400 	.word	0x58000400

080066a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	807b      	strh	r3, [r7, #2]
 80066ac:	4613      	mov	r3, r2
 80066ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066b0:	787b      	ldrb	r3, [r7, #1]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066b6:	887a      	ldrh	r2, [r7, #2]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066bc:	e003      	b.n	80066c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	041a      	lsls	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	619a      	str	r2, [r3, #24]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e08b      	b.n	80067fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fc fdac 	bl	8003258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2224      	movs	r2, #36	@ 0x24
 8006704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006724:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006734:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d107      	bne.n	800674e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800674a:	609a      	str	r2, [r3, #8]
 800674c:	e006      	b.n	800675c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800675a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d108      	bne.n	8006776 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006772:	605a      	str	r2, [r3, #4]
 8006774:	e007      	b.n	8006786 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6859      	ldr	r1, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b1d      	ldr	r3, [pc, #116]	@ (8006808 <HAL_I2C_Init+0x134>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69d9      	ldr	r1, [r3, #28]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1a      	ldr	r2, [r3, #32]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	02008000 	.word	0x02008000

0800680c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	461a      	mov	r2, r3
 8006818:	460b      	mov	r3, r1
 800681a:	817b      	strh	r3, [r7, #10]
 800681c:	4613      	mov	r3, r2
 800681e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b20      	cmp	r3, #32
 800682a:	f040 80fd 	bne.w	8006a28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_I2C_Master_Transmit+0x30>
 8006838:	2302      	movs	r3, #2
 800683a:	e0f6      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006844:	f7fd fc00 	bl	8004048 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	2319      	movs	r3, #25
 8006850:	2201      	movs	r2, #1
 8006852:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fa0a 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e0e1      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2221      	movs	r2, #33	@ 0x21
 800686a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2210      	movs	r2, #16
 8006872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	893a      	ldrh	r2, [r7, #8]
 8006886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006892:	b29b      	uxth	r3, r3
 8006894:	2bff      	cmp	r3, #255	@ 0xff
 8006896:	d906      	bls.n	80068a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	22ff      	movs	r2, #255	@ 0xff
 800689c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800689e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	e007      	b.n	80068b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80068b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d024      	beq.n	8006908 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	3301      	adds	r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	8979      	ldrh	r1, [r7, #10]
 80068fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006a34 <HAL_I2C_Master_Transmit+0x228>)
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fc05 	bl	8007110 <I2C_TransferConfig>
 8006906:	e066      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800690c:	b2da      	uxtb	r2, r3
 800690e:	8979      	ldrh	r1, [r7, #10]
 8006910:	4b48      	ldr	r3, [pc, #288]	@ (8006a34 <HAL_I2C_Master_Transmit+0x228>)
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fbfa 	bl	8007110 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800691c:	e05b      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	6a39      	ldr	r1, [r7, #32]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f9fd 	bl	8006d22 <I2C_WaitOnTXISFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07b      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d034      	beq.n	80069d6 <HAL_I2C_Master_Transmit+0x1ca>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d130      	bne.n	80069d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	2200      	movs	r2, #0
 800697c:	2180      	movs	r1, #128	@ 0x80
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f976 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e04d      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	2bff      	cmp	r3, #255	@ 0xff
 8006996:	d90e      	bls.n	80069b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	22ff      	movs	r2, #255	@ 0xff
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	8979      	ldrh	r1, [r7, #10]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fbae 	bl	8007110 <I2C_TransferConfig>
 80069b4:	e00f      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	8979      	ldrh	r1, [r7, #10]
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fb9d 	bl	8007110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d19e      	bne.n	800691e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	6a39      	ldr	r1, [r7, #32]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f9e3 	bl	8006db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e01a      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2220      	movs	r2, #32
 80069fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <HAL_I2C_Master_Transmit+0x22c>)
 8006a08:	400b      	ands	r3, r1
 8006a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	80002000 	.word	0x80002000
 8006a38:	fe00e800 	.word	0xfe00e800

08006a3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	461a      	mov	r2, r3
 8006a48:	460b      	mov	r3, r1
 8006a4a:	817b      	strh	r3, [r7, #10]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	f040 80db 	bne.w	8006c14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_I2C_Master_Receive+0x30>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0d4      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a74:	f7fd fae8 	bl	8004048 <HAL_GetTick>
 8006a78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2319      	movs	r3, #25
 8006a80:	2201      	movs	r2, #1
 8006a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f8f2 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e0bf      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2222      	movs	r2, #34	@ 0x22
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2210      	movs	r2, #16
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	893a      	ldrh	r2, [r7, #8]
 8006ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2bff      	cmp	r3, #255	@ 0xff
 8006ac6:	d90e      	bls.n	8006ae6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	22ff      	movs	r2, #255	@ 0xff
 8006acc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	8979      	ldrh	r1, [r7, #10]
 8006ad6:	4b52      	ldr	r3, [pc, #328]	@ (8006c20 <HAL_I2C_Master_Receive+0x1e4>)
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fb16 	bl	8007110 <I2C_TransferConfig>
 8006ae4:	e06d      	b.n	8006bc2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	8979      	ldrh	r1, [r7, #10]
 8006af8:	4b49      	ldr	r3, [pc, #292]	@ (8006c20 <HAL_I2C_Master_Receive+0x1e4>)
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fb05 	bl	8007110 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b06:	e05c      	b.n	8006bc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	6a39      	ldr	r1, [r7, #32]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f993 	bl	8006e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e07c      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d034      	beq.n	8006bc2 <HAL_I2C_Master_Receive+0x186>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d130      	bne.n	8006bc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2200      	movs	r2, #0
 8006b68:	2180      	movs	r1, #128	@ 0x80
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f880 	bl	8006c70 <I2C_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e04d      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2bff      	cmp	r3, #255	@ 0xff
 8006b82:	d90e      	bls.n	8006ba2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	22ff      	movs	r2, #255	@ 0xff
 8006b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	8979      	ldrh	r1, [r7, #10]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fab8 	bl	8007110 <I2C_TransferConfig>
 8006ba0:	e00f      	b.n	8006bc2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	8979      	ldrh	r1, [r7, #10]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 faa7 	bl	8007110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d19d      	bne.n	8006b08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	6a39      	ldr	r1, [r7, #32]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f8ed 	bl	8006db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e01a      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2220      	movs	r2, #32
 8006be6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6859      	ldr	r1, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <HAL_I2C_Master_Receive+0x1e8>)
 8006bf4:	400b      	ands	r3, r1
 8006bf6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e000      	b.n	8006c16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c14:	2302      	movs	r3, #2
  }
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	80002400 	.word	0x80002400
 8006c24:	fe00e800 	.word	0xfe00e800

08006c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d007      	beq.n	8006c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	619a      	str	r2, [r3, #24]
  }
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c80:	e03b      	b.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f962 	bl	8006f50 <I2C_IsErrorOccurred>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e041      	b.n	8006d1a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d02d      	beq.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fd f9d3 	bl	8004048 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d122      	bne.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2301      	moveq	r3, #1
 8006cc6:	2300      	movne	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d113      	bne.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00f      	b.n	8006d1a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0b4      	beq.n	8006c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d2e:	e033      	b.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f90b 	bl	8006f50 <I2C_IsErrorOccurred>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e031      	b.n	8006da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d025      	beq.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4c:	f7fd f97c 	bl	8004048 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11a      	bne.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d013      	beq.n	8006d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d74:	f043 0220 	orr.w	r2, r3, #32
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e007      	b.n	8006da8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d1c4      	bne.n	8006d30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dbc:	e02f      	b.n	8006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f8c4 	bl	8006f50 <I2C_IsErrorOccurred>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e02d      	b.n	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fd f939 	bl	8004048 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11a      	bne.n	8006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d013      	beq.n	8006e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e007      	b.n	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d1c8      	bne.n	8006dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006e48:	e071      	b.n	8006f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f87e 	bl	8006f50 <I2C_IsErrorOccurred>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d13b      	bne.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d138      	bne.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d105      	bne.n	8006e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b10      	cmp	r3, #16
 8006e98:	d121      	bne.n	8006ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2210      	movs	r2, #16
 8006ea0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2220      	movs	r2, #32
 8006eae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006ebc:	400b      	ands	r3, r1
 8006ebe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
 8006edc:	e002      	b.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006ee4:	f7fd f8b0 	bl	8004048 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d302      	bcc.n	8006efa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d119      	bne.n	8006f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d116      	bne.n	8006f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d00f      	beq.n	8006f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d002      	beq.n	8006f42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d083      	beq.n	8006e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	fe00e800 	.word	0xfe00e800

08006f50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	@ 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f003 0310 	and.w	r3, r3, #16
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d068      	beq.n	800704e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2210      	movs	r2, #16
 8006f82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f84:	e049      	b.n	800701a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d045      	beq.n	800701a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f8e:	f7fd f85b 	bl	8004048 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d302      	bcc.n	8006fa4 <I2C_IsErrorOccurred+0x54>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13a      	bne.n	800701a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc6:	d121      	bne.n	800700c <I2C_IsErrorOccurred+0xbc>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fce:	d01d      	beq.n	800700c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006fd0:	7cfb      	ldrb	r3, [r7, #19]
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d01a      	beq.n	800700c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fe4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006fe6:	f7fd f82f 	bl	8004048 <HAL_GetTick>
 8006fea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fec:	e00e      	b.n	800700c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fee:	f7fd f82b 	bl	8004048 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b19      	cmp	r3, #25
 8006ffa:	d907      	bls.n	800700c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	f043 0320 	orr.w	r3, r3, #32
 8007002:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800700a:	e006      	b.n	800701a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b20      	cmp	r3, #32
 8007018:	d1e9      	bne.n	8006fee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b20      	cmp	r3, #32
 8007026:	d003      	beq.n	8007030 <I2C_IsErrorOccurred+0xe0>
 8007028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0aa      	beq.n	8006f86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007030:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2220      	movs	r2, #32
 800703e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	f043 0304 	orr.w	r3, r3, #4
 8007046:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f043 0308 	orr.w	r3, r3, #8
 8007088:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007092:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80070bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01c      	beq.n	80070fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fdaf 	bl	8006c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6859      	ldr	r1, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <I2C_IsErrorOccurred+0x1bc>)
 80070d6:	400b      	ands	r3, r1
 80070d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80070fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007102:	4618      	mov	r0, r3
 8007104:	3728      	adds	r7, #40	@ 0x28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	fe00e800 	.word	0xfe00e800

08007110 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	817b      	strh	r3, [r7, #10]
 800711e:	4613      	mov	r3, r2
 8007120:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007122:	897b      	ldrh	r3, [r7, #10]
 8007124:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007128:	7a7b      	ldrb	r3, [r7, #9]
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007130:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	4313      	orrs	r3, r2
 800713a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800713e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	0d5b      	lsrs	r3, r3, #21
 800714a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800714e:	4b08      	ldr	r3, [pc, #32]	@ (8007170 <I2C_TransferConfig+0x60>)
 8007150:	430b      	orrs	r3, r1
 8007152:	43db      	mvns	r3, r3
 8007154:	ea02 0103 	and.w	r1, r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	03ff63ff 	.word	0x03ff63ff

08007174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b20      	cmp	r3, #32
 8007188:	d138      	bne.n	80071fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007194:	2302      	movs	r3, #2
 8007196:	e032      	b.n	80071fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2224      	movs	r2, #36	@ 0x24
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	6819      	ldr	r1, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b20      	cmp	r3, #32
 800721e:	d139      	bne.n	8007294 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800722a:	2302      	movs	r3, #2
 800722c:	e033      	b.n	8007296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	@ 0x24
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0201 	bic.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800725c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0bf      	b.n	8007436 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fc f854 	bl	8003378 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80072e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6999      	ldr	r1, [r3, #24]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	4b4a      	ldr	r3, [pc, #296]	@ (8007440 <HAL_LTDC_Init+0x19c>)
 8007318:	400b      	ands	r3, r1
 800731a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68d9      	ldr	r1, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b3e      	ldr	r3, [pc, #248]	@ (8007440 <HAL_LTDC_Init+0x19c>)
 8007346:	400b      	ands	r3, r1
 8007348:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68d9      	ldr	r1, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6919      	ldr	r1, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b33      	ldr	r3, [pc, #204]	@ (8007440 <HAL_LTDC_Init+0x19c>)
 8007374:	400b      	ands	r3, r1
 8007376:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6919      	ldr	r1, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6959      	ldr	r1, [r3, #20]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b27      	ldr	r3, [pc, #156]	@ (8007440 <HAL_LTDC_Init+0x19c>)
 80073a2:	400b      	ands	r3, r1
 80073a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6959      	ldr	r1, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80073e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0206 	orr.w	r2, r2, #6
 8007412:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	f000f800 	.word	0xf000f800

08007444 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007444:	b5b0      	push	{r4, r5, r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_LTDC_ConfigLayer+0x1a>
 800745a:	2302      	movs	r3, #2
 800745c:	e02c      	b.n	80074b8 <HAL_LTDC_ConfigLayer+0x74>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2134      	movs	r1, #52	@ 0x34
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	4413      	add	r3, r2
 800747a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4614      	mov	r4, r2
 8007482:	461d      	mov	r5, r3
 8007484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800748c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f811 	bl	80074c0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bdb0      	pop	{r4, r5, r7, pc}

080074c0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	@ 0x24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074dc:	4413      	add	r3, r2
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	4413      	add	r3, r2
 80074ee:	3384      	adds	r3, #132	@ 0x84
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	4611      	mov	r1, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	01d2      	lsls	r2, r2, #7
 80074fc:	440a      	add	r2, r1
 80074fe:	3284      	adds	r2, #132	@ 0x84
 8007500:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007504:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007516:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007518:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4619      	mov	r1, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	440b      	add	r3, r1
 8007526:	3384      	adds	r3, #132	@ 0x84
 8007528:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800752e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800753e:	4413      	add	r3, r2
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	01db      	lsls	r3, r3, #7
 800754e:	4413      	add	r3, r2
 8007550:	3384      	adds	r3, #132	@ 0x84
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	4611      	mov	r1, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	01d2      	lsls	r2, r2, #7
 800755e:	440a      	add	r2, r1
 8007560:	3284      	adds	r2, #132	@ 0x84
 8007562:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007566:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007576:	4413      	add	r3, r2
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	01db      	lsls	r3, r3, #7
 8007584:	440b      	add	r3, r1
 8007586:	3384      	adds	r3, #132	@ 0x84
 8007588:	4619      	mov	r1, r3
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	01db      	lsls	r3, r3, #7
 800759a:	4413      	add	r3, r2
 800759c:	3384      	adds	r3, #132	@ 0x84
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	4611      	mov	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	01d2      	lsls	r2, r2, #7
 80075aa:	440a      	add	r2, r1
 80075ac:	3284      	adds	r2, #132	@ 0x84
 80075ae:	f023 0307 	bic.w	r3, r3, #7
 80075b2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	01db      	lsls	r3, r3, #7
 80075be:	4413      	add	r3, r2
 80075c0:	3384      	adds	r3, #132	@ 0x84
 80075c2:	461a      	mov	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80075da:	041b      	lsls	r3, r3, #16
 80075dc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	061b      	lsls	r3, r3, #24
 80075e4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	01db      	lsls	r3, r3, #7
 80075f0:	4413      	add	r3, r2
 80075f2:	3384      	adds	r3, #132	@ 0x84
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	01db      	lsls	r3, r3, #7
 8007600:	4413      	add	r3, r2
 8007602:	3384      	adds	r3, #132	@ 0x84
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007610:	461a      	mov	r2, r3
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	431a      	orrs	r2, r3
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4619      	mov	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	01db      	lsls	r3, r3, #7
 8007624:	440b      	add	r3, r1
 8007626:	3384      	adds	r3, #132	@ 0x84
 8007628:	4619      	mov	r1, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	01db      	lsls	r3, r3, #7
 800763a:	4413      	add	r3, r2
 800763c:	3384      	adds	r3, #132	@ 0x84
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	4611      	mov	r1, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	01d2      	lsls	r2, r2, #7
 800764a:	440a      	add	r2, r1
 800764c:	3284      	adds	r2, #132	@ 0x84
 800764e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007652:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	01db      	lsls	r3, r3, #7
 800765e:	4413      	add	r3, r2
 8007660:	3384      	adds	r3, #132	@ 0x84
 8007662:	461a      	mov	r2, r3
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	01db      	lsls	r3, r3, #7
 8007674:	4413      	add	r3, r2
 8007676:	3384      	adds	r3, #132	@ 0x84
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4619      	mov	r1, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	01db      	lsls	r3, r3, #7
 8007684:	440b      	add	r3, r1
 8007686:	3384      	adds	r3, #132	@ 0x84
 8007688:	4619      	mov	r1, r3
 800768a:	4b58      	ldr	r3, [pc, #352]	@ (80077ec <LTDC_SetConfig+0x32c>)
 800768c:	4013      	ands	r3, r2
 800768e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	68f9      	ldr	r1, [r7, #12]
 800769a:	6809      	ldr	r1, [r1, #0]
 800769c:	4608      	mov	r0, r1
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	01c9      	lsls	r1, r1, #7
 80076a2:	4401      	add	r1, r0
 80076a4:	3184      	adds	r1, #132	@ 0x84
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	4413      	add	r3, r2
 80076b6:	3384      	adds	r3, #132	@ 0x84
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	4413      	add	r3, r2
 80076c6:	3384      	adds	r3, #132	@ 0x84
 80076c8:	461a      	mov	r2, r3
 80076ca:	2300      	movs	r3, #0
 80076cc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	01db      	lsls	r3, r3, #7
 80076d8:	4413      	add	r3, r2
 80076da:	3384      	adds	r3, #132	@ 0x84
 80076dc:	461a      	mov	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80076ec:	2304      	movs	r3, #4
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e01b      	b.n	800772a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d102      	bne.n	8007700 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80076fa:	2303      	movs	r3, #3
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e014      	b.n	800772a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b04      	cmp	r3, #4
 8007706:	d00b      	beq.n	8007720 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800770c:	2b02      	cmp	r3, #2
 800770e:	d007      	beq.n	8007720 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007714:	2b03      	cmp	r3, #3
 8007716:	d003      	beq.n	8007720 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800771c:	2b07      	cmp	r3, #7
 800771e:	d102      	bne.n	8007726 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007720:	2302      	movs	r3, #2
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	e001      	b.n	800772a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007726:	2301      	movs	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	01db      	lsls	r3, r3, #7
 8007734:	4413      	add	r3, r2
 8007736:	3384      	adds	r3, #132	@ 0x84
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	4611      	mov	r1, r2
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	01d2      	lsls	r2, r2, #7
 8007744:	440a      	add	r2, r1
 8007746:	3284      	adds	r2, #132	@ 0x84
 8007748:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800774c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	1acb      	subs	r3, r1, r3
 8007764:	69f9      	ldr	r1, [r7, #28]
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800776c:	68f9      	ldr	r1, [r7, #12]
 800776e:	6809      	ldr	r1, [r1, #0]
 8007770:	4608      	mov	r0, r1
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	01c9      	lsls	r1, r1, #7
 8007776:	4401      	add	r1, r0
 8007778:	3184      	adds	r1, #132	@ 0x84
 800777a:	4313      	orrs	r3, r2
 800777c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	01db      	lsls	r3, r3, #7
 8007788:	4413      	add	r3, r2
 800778a:	3384      	adds	r3, #132	@ 0x84
 800778c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	01db      	lsls	r3, r3, #7
 8007798:	440b      	add	r3, r1
 800779a:	3384      	adds	r3, #132	@ 0x84
 800779c:	4619      	mov	r1, r3
 800779e:	4b14      	ldr	r3, [pc, #80]	@ (80077f0 <LTDC_SetConfig+0x330>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	01db      	lsls	r3, r3, #7
 80077ae:	4413      	add	r3, r2
 80077b0:	3384      	adds	r3, #132	@ 0x84
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	01db      	lsls	r3, r3, #7
 80077c4:	4413      	add	r3, r2
 80077c6:	3384      	adds	r3, #132	@ 0x84
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	4611      	mov	r1, r2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	01d2      	lsls	r2, r2, #7
 80077d4:	440a      	add	r2, r1
 80077d6:	3284      	adds	r2, #132	@ 0x84
 80077d8:	f043 0301 	orr.w	r3, r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	3724      	adds	r7, #36	@ 0x24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	fffff8f8 	.word	0xfffff8f8
 80077f0:	fffff800 	.word	0xfffff800

080077f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af02      	add	r7, sp, #8
 80077fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e0fe      	b.n	8007a04 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fc f824 	bl	8003868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2203      	movs	r2, #3
 8007824:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f006 f965 	bl	800dafc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7c1a      	ldrb	r2, [r3, #16]
 800783a:	f88d 2000 	strb.w	r2, [sp]
 800783e:	3304      	adds	r3, #4
 8007840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007842:	f006 f8e9 	bl	800da18 <USB_CoreInit>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0d5      	b.n	8007a04 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f006 f95d 	bl	800db1e <USB_SetCurrentMode>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d005      	beq.n	8007876 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e0c6      	b.n	8007a04 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
 800787a:	e04a      	b.n	8007912 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800787c:	7bfa      	ldrb	r2, [r7, #15]
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	440b      	add	r3, r1
 800788a:	3315      	adds	r3, #21
 800788c:	2201      	movs	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007890:	7bfa      	ldrb	r2, [r7, #15]
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3314      	adds	r3, #20
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	b298      	uxth	r0, r3
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	332e      	adds	r3, #46	@ 0x2e
 80078b8:	4602      	mov	r2, r0
 80078ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80078bc:	7bfa      	ldrb	r2, [r7, #15]
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	3318      	adds	r3, #24
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80078d0:	7bfa      	ldrb	r2, [r7, #15]
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	331c      	adds	r3, #28
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078e4:	7bfa      	ldrb	r2, [r7, #15]
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	3320      	adds	r3, #32
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80078f8:	7bfa      	ldrb	r2, [r7, #15]
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	4613      	mov	r3, r2
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	3324      	adds	r3, #36	@ 0x24
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	3301      	adds	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	791b      	ldrb	r3, [r3, #4]
 8007916:	7bfa      	ldrb	r2, [r7, #15]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3af      	bcc.n	800787c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
 8007920:	e044      	b.n	80079ac <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007922:	7bfa      	ldrb	r2, [r7, #15]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007938:	7bfa      	ldrb	r2, [r7, #15]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800794a:	7bfa      	ldrb	r2, [r7, #15]
 800794c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800794e:	7bfa      	ldrb	r2, [r7, #15]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007960:	2200      	movs	r2, #0
 8007962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800797a:	7bfa      	ldrb	r2, [r7, #15]
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007990:	7bfa      	ldrb	r2, [r7, #15]
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	3301      	adds	r3, #1
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	791b      	ldrb	r3, [r3, #4]
 80079b0:	7bfa      	ldrb	r2, [r7, #15]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3b5      	bcc.n	8007922 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1a      	ldrb	r2, [r3, #16]
 80079be:	f88d 2000 	strb.w	r2, [sp]
 80079c2:	3304      	adds	r3, #4
 80079c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c6:	f006 f8f7 	bl	800dbb8 <USB_DevInit>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e013      	b.n	8007a04 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7b1b      	ldrb	r3, [r3, #12]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d102      	bne.n	80079f8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f80a 	bl	8007a0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f006 fab2 	bl	800df66 <USB_DevDisconnect>

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a3a:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <HAL_PCDEx_ActivateLPM+0x44>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	10000003 	.word	0x10000003

08007a54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a5c:	4b19      	ldr	r3, [pc, #100]	@ (8007ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d00a      	beq.n	8007a7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a68:	4b16      	ldr	r3, [pc, #88]	@ (8007ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d001      	beq.n	8007a7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e01f      	b.n	8007aba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e01d      	b.n	8007aba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a7e:	4b11      	ldr	r3, [pc, #68]	@ (8007ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f023 0207 	bic.w	r2, r3, #7
 8007a86:	490f      	ldr	r1, [pc, #60]	@ (8007ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a8e:	f7fc fadb 	bl	8004048 <HAL_GetTick>
 8007a92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a94:	e009      	b.n	8007aaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a96:	f7fc fad7 	bl	8004048 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aa4:	d901      	bls.n	8007aaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e007      	b.n	8007aba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007aaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <HAL_PWREx_ConfigSupply+0x70>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab6:	d1ee      	bne.n	8007a96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	58024800 	.word	0x58024800

08007ac8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ad6:	60d3      	str	r3, [r2, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	58024800 	.word	0x58024800

08007ae8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007af0:	f7fc faaa 	bl	8004048 <HAL_GetTick>
 8007af4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e05f      	b.n	8007bc0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d107      	bne.n	8007b1c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fb fd21 	bl	8003554 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007b12:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f85a 	bl	8007bd0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	021a      	lsls	r2, r3, #8
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2120      	movs	r1, #32
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f852 	bl	8007bec <QSPI_WaitFlagStateUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d135      	bne.n	8007bbe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc8 <HAL_QSPI_Init+0xe0>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6852      	ldr	r2, [r2, #4]
 8007b60:	0611      	lsls	r1, r2, #24
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68d2      	ldr	r2, [r2, #12]
 8007b66:	4311      	orrs	r1, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	69d2      	ldr	r2, [r2, #28]
 8007b6c:	4311      	orrs	r1, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6a12      	ldr	r2, [r2, #32]
 8007b72:	4311      	orrs	r1, r2
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <HAL_QSPI_Init+0xe4>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6912      	ldr	r2, [r2, #16]
 8007b8a:	0411      	lsls	r1, r2, #16
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6952      	ldr	r2, [r2, #20]
 8007b90:	4311      	orrs	r1, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6992      	ldr	r2, [r2, #24]
 8007b96:	4311      	orrs	r1, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	00ffff2f 	.word	0x00ffff2f
 8007bcc:	ffe0f8fe 	.word	0xffe0f8fe

08007bd0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007bfc:	e01a      	b.n	8007c34 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d016      	beq.n	8007c34 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7fc fa1f 	bl	8004048 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c28:	f043 0201 	orr.w	r2, r3, #1
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e00e      	b.n	8007c52 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1d6      	bne.n	8007bfe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	@ 0x30
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f000 bc48 	b.w	8008500 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8088 	beq.w	8007d8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c7e:	4b99      	ldr	r3, [pc, #612]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c88:	4b96      	ldr	r3, [pc, #600]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d007      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x48>
 8007c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c96:	2b18      	cmp	r3, #24
 8007c98:	d111      	bne.n	8007cbe <HAL_RCC_OscConfig+0x62>
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d10c      	bne.n	8007cbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d06d      	beq.n	8007d8c <HAL_RCC_OscConfig+0x130>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d169      	bne.n	8007d8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f000 bc21 	b.w	8008500 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x7a>
 8007cc8:	4b86      	ldr	r3, [pc, #536]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a85      	ldr	r2, [pc, #532]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	e02e      	b.n	8007d34 <HAL_RCC_OscConfig+0xd8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10c      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x9c>
 8007cde:	4b81      	ldr	r3, [pc, #516]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a80      	ldr	r2, [pc, #512]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ce4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	4b7e      	ldr	r3, [pc, #504]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a7d      	ldr	r2, [pc, #500]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	e01d      	b.n	8007d34 <HAL_RCC_OscConfig+0xd8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCC_OscConfig+0xc0>
 8007d02:	4b78      	ldr	r3, [pc, #480]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a77      	ldr	r2, [pc, #476]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	4b75      	ldr	r3, [pc, #468]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a74      	ldr	r2, [pc, #464]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e00b      	b.n	8007d34 <HAL_RCC_OscConfig+0xd8>
 8007d1c:	4b71      	ldr	r3, [pc, #452]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a70      	ldr	r2, [pc, #448]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d013      	beq.n	8007d64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fc f984 	bl	8004048 <HAL_GetTick>
 8007d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d44:	f7fc f980 	bl	8004048 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b64      	cmp	r3, #100	@ 0x64
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e3d4      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d56:	4b63      	ldr	r3, [pc, #396]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0xe8>
 8007d62:	e014      	b.n	8007d8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fc f970 	bl	8004048 <HAL_GetTick>
 8007d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d6c:	f7fc f96c 	bl	8004048 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b64      	cmp	r3, #100	@ 0x64
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e3c0      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d7e:	4b59      	ldr	r3, [pc, #356]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f0      	bne.n	8007d6c <HAL_RCC_OscConfig+0x110>
 8007d8a:	e000      	b.n	8007d8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80ca 	beq.w	8007f30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9c:	4b51      	ldr	r3, [pc, #324]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007da4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007da6:	4b4f      	ldr	r3, [pc, #316]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007daa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x166>
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	2b18      	cmp	r3, #24
 8007db6:	d156      	bne.n	8007e66 <HAL_RCC_OscConfig+0x20a>
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d151      	bne.n	8007e66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007dc2:	4b48      	ldr	r3, [pc, #288]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <HAL_RCC_OscConfig+0x17e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e392      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dda:	4b42      	ldr	r3, [pc, #264]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f023 0219 	bic.w	r2, r3, #25
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	493f      	ldr	r1, [pc, #252]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fc f92c 	bl	8004048 <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df4:	f7fc f928 	bl	8004048 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e37c      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e06:	4b37      	ldr	r3, [pc, #220]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e12:	f7fc f949 	bl	80040a8 <HAL_GetREVID>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d817      	bhi.n	8007e50 <HAL_RCC_OscConfig+0x1f4>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b40      	cmp	r3, #64	@ 0x40
 8007e26:	d108      	bne.n	8007e3a <HAL_RCC_OscConfig+0x1de>
 8007e28:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e30:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e38:	e07a      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	031b      	lsls	r3, r3, #12
 8007e48:	4926      	ldr	r1, [pc, #152]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e4e:	e06f      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e50:	4b24      	ldr	r3, [pc, #144]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	4921      	ldr	r1, [pc, #132]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e64:	e064      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d047      	beq.n	8007efe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 0219 	bic.w	r2, r3, #25
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	491a      	ldr	r1, [pc, #104]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fc f8e2 	bl	8004048 <HAL_GetTick>
 8007e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e88:	f7fc f8de 	bl	8004048 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e332      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ea6:	f7fc f8ff 	bl	80040a8 <HAL_GetREVID>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d819      	bhi.n	8007ee8 <HAL_RCC_OscConfig+0x28c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b40      	cmp	r3, #64	@ 0x40
 8007eba:	d108      	bne.n	8007ece <HAL_RCC_OscConfig+0x272>
 8007ebc:	4b09      	ldr	r3, [pc, #36]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ec4:	4a07      	ldr	r2, [pc, #28]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eca:	6053      	str	r3, [r2, #4]
 8007ecc:	e030      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
 8007ece:	4b05      	ldr	r3, [pc, #20]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	031b      	lsls	r3, r3, #12
 8007edc:	4901      	ldr	r1, [pc, #4]	@ (8007ee4 <HAL_RCC_OscConfig+0x288>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	604b      	str	r3, [r1, #4]
 8007ee2:	e025      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	4b9a      	ldr	r3, [pc, #616]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	061b      	lsls	r3, r3, #24
 8007ef6:	4997      	ldr	r1, [pc, #604]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	e018      	b.n	8007f30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007efe:	4b95      	ldr	r3, [pc, #596]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a94      	ldr	r2, [pc, #592]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fc f89d 	bl	8004048 <HAL_GetTick>
 8007f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f12:	f7fc f899 	bl	8004048 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e2ed      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f24:	4b8b      	ldr	r3, [pc, #556]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80a9 	beq.w	8008090 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f3e:	4b85      	ldr	r3, [pc, #532]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f48:	4b82      	ldr	r3, [pc, #520]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d007      	beq.n	8007f64 <HAL_RCC_OscConfig+0x308>
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b18      	cmp	r3, #24
 8007f58:	d13a      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x374>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d135      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f64:	4b7b      	ldr	r3, [pc, #492]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <HAL_RCC_OscConfig+0x320>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	2b80      	cmp	r3, #128	@ 0x80
 8007f76:	d001      	beq.n	8007f7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e2c1      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f7c:	f7fc f894 	bl	80040a8 <HAL_GetREVID>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d817      	bhi.n	8007fba <HAL_RCC_OscConfig+0x35e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d108      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x348>
 8007f92:	4b70      	ldr	r3, [pc, #448]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007f9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fa0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fa2:	e075      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	069b      	lsls	r3, r3, #26
 8007fb2:	4968      	ldr	r1, [pc, #416]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fb8:	e06a      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fba:	4b66      	ldr	r3, [pc, #408]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	061b      	lsls	r3, r3, #24
 8007fc8:	4962      	ldr	r1, [pc, #392]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fce:	e05f      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d042      	beq.n	800805e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8007fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fc f830 	bl	8004048 <HAL_GetTick>
 8007fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fec:	f7fc f82c 	bl	8004048 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e280      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ffe:	4b55      	ldr	r3, [pc, #340]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0f0      	beq.n	8007fec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800800a:	f7fc f84d 	bl	80040a8 <HAL_GetREVID>
 800800e:	4603      	mov	r3, r0
 8008010:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008014:	4293      	cmp	r3, r2
 8008016:	d817      	bhi.n	8008048 <HAL_RCC_OscConfig+0x3ec>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	2b20      	cmp	r3, #32
 800801e:	d108      	bne.n	8008032 <HAL_RCC_OscConfig+0x3d6>
 8008020:	4b4c      	ldr	r3, [pc, #304]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008028:	4a4a      	ldr	r2, [pc, #296]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 800802a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800802e:	6053      	str	r3, [r2, #4]
 8008030:	e02e      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
 8008032:	4b48      	ldr	r3, [pc, #288]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	069b      	lsls	r3, r3, #26
 8008040:	4944      	ldr	r1, [pc, #272]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008042:	4313      	orrs	r3, r2
 8008044:	604b      	str	r3, [r1, #4]
 8008046:	e023      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
 8008048:	4b42      	ldr	r3, [pc, #264]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	493f      	ldr	r1, [pc, #252]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008058:	4313      	orrs	r3, r2
 800805a:	60cb      	str	r3, [r1, #12]
 800805c:	e018      	b.n	8008090 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800805e:	4b3d      	ldr	r3, [pc, #244]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a3c      	ldr	r2, [pc, #240]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806a:	f7fb ffed 	bl	8004048 <HAL_GetTick>
 800806e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008070:	e008      	b.n	8008084 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008072:	f7fb ffe9 	bl	8004048 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e23d      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008084:	4b33      	ldr	r3, [pc, #204]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f0      	bne.n	8008072 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b00      	cmp	r3, #0
 800809a:	d036      	beq.n	800810a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d019      	beq.n	80080d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 80080a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080a8:	4a2a      	ldr	r2, [pc, #168]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b0:	f7fb ffca 	bl	8004048 <HAL_GetTick>
 80080b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080b8:	f7fb ffc6 	bl	8004048 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e21a      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ca:	4b22      	ldr	r3, [pc, #136]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 80080cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0f0      	beq.n	80080b8 <HAL_RCC_OscConfig+0x45c>
 80080d6:	e018      	b.n	800810a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 80080da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 80080de:	f023 0301 	bic.w	r3, r3, #1
 80080e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e4:	f7fb ffb0 	bl	8004048 <HAL_GetTick>
 80080e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ec:	f7fb ffac 	bl	8004048 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e200      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080fe:	4b15      	ldr	r3, [pc, #84]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f0      	bne.n	80080ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d039      	beq.n	800818a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01c      	beq.n	8008158 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a0c      	ldr	r2, [pc, #48]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008128:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800812a:	f7fb ff8d 	bl	8004048 <HAL_GetTick>
 800812e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008132:	f7fb ff89 	bl	8004048 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e1dd      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008144:	4b03      	ldr	r3, [pc, #12]	@ (8008154 <HAL_RCC_OscConfig+0x4f8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <HAL_RCC_OscConfig+0x4d6>
 8008150:	e01b      	b.n	800818a <HAL_RCC_OscConfig+0x52e>
 8008152:	bf00      	nop
 8008154:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008158:	4b9b      	ldr	r3, [pc, #620]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a9a      	ldr	r2, [pc, #616]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800815e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008162:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008164:	f7fb ff70 	bl	8004048 <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800816c:	f7fb ff6c 	bl	8004048 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1c0      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800817e:	4b92      	ldr	r3, [pc, #584]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8081 	beq.w	800829a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008198:	4b8c      	ldr	r3, [pc, #560]	@ (80083cc <HAL_RCC_OscConfig+0x770>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a8b      	ldr	r2, [pc, #556]	@ (80083cc <HAL_RCC_OscConfig+0x770>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a4:	f7fb ff50 	bl	8004048 <HAL_GetTick>
 80081a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ac:	f7fb ff4c 	bl	8004048 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b64      	cmp	r3, #100	@ 0x64
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e1a0      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081be:	4b83      	ldr	r3, [pc, #524]	@ (80083cc <HAL_RCC_OscConfig+0x770>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d106      	bne.n	80081e0 <HAL_RCC_OscConfig+0x584>
 80081d2:	4b7d      	ldr	r3, [pc, #500]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d6:	4a7c      	ldr	r2, [pc, #496]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80081de:	e02d      	b.n	800823c <HAL_RCC_OscConfig+0x5e0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10c      	bne.n	8008202 <HAL_RCC_OscConfig+0x5a6>
 80081e8:	4b77      	ldr	r3, [pc, #476]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ec:	4a76      	ldr	r2, [pc, #472]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081ee:	f023 0301 	bic.w	r3, r3, #1
 80081f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80081f4:	4b74      	ldr	r3, [pc, #464]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f8:	4a73      	ldr	r2, [pc, #460]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80081fa:	f023 0304 	bic.w	r3, r3, #4
 80081fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008200:	e01c      	b.n	800823c <HAL_RCC_OscConfig+0x5e0>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b05      	cmp	r3, #5
 8008208:	d10c      	bne.n	8008224 <HAL_RCC_OscConfig+0x5c8>
 800820a:	4b6f      	ldr	r3, [pc, #444]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	4a6e      	ldr	r2, [pc, #440]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008210:	f043 0304 	orr.w	r3, r3, #4
 8008214:	6713      	str	r3, [r2, #112]	@ 0x70
 8008216:	4b6c      	ldr	r3, [pc, #432]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	4a6b      	ldr	r2, [pc, #428]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6713      	str	r3, [r2, #112]	@ 0x70
 8008222:	e00b      	b.n	800823c <HAL_RCC_OscConfig+0x5e0>
 8008224:	4b68      	ldr	r3, [pc, #416]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008228:	4a67      	ldr	r2, [pc, #412]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008230:	4b65      	ldr	r3, [pc, #404]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008234:	4a64      	ldr	r2, [pc, #400]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008236:	f023 0304 	bic.w	r3, r3, #4
 800823a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d015      	beq.n	8008270 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008244:	f7fb ff00 	bl	8004048 <HAL_GetTick>
 8008248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800824a:	e00a      	b.n	8008262 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824c:	f7fb fefc 	bl	8004048 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825a:	4293      	cmp	r3, r2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e14e      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008262:	4b59      	ldr	r3, [pc, #356]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0ee      	beq.n	800824c <HAL_RCC_OscConfig+0x5f0>
 800826e:	e014      	b.n	800829a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008270:	f7fb feea 	bl	8004048 <HAL_GetTick>
 8008274:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008276:	e00a      	b.n	800828e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008278:	f7fb fee6 	bl	8004048 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e138      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800828e:	4b4e      	ldr	r3, [pc, #312]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1ee      	bne.n	8008278 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 812d 	beq.w	80084fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082a4:	4b48      	ldr	r3, [pc, #288]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ac:	2b18      	cmp	r3, #24
 80082ae:	f000 80bd 	beq.w	800842c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	f040 809e 	bne.w	80083f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082bc:	4b42      	ldr	r3, [pc, #264]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a41      	ldr	r2, [pc, #260]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80082c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c8:	f7fb febe 	bl	8004048 <HAL_GetTick>
 80082cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d0:	f7fb feba 	bl	8004048 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e10e      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e2:	4b39      	ldr	r3, [pc, #228]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f0      	bne.n	80082d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082ee:	4b36      	ldr	r3, [pc, #216]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80082f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082f2:	4b37      	ldr	r3, [pc, #220]	@ (80083d0 <HAL_RCC_OscConfig+0x774>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082fe:	0112      	lsls	r2, r2, #4
 8008300:	430a      	orrs	r2, r1
 8008302:	4931      	ldr	r1, [pc, #196]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	628b      	str	r3, [r1, #40]	@ 0x28
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830c:	3b01      	subs	r3, #1
 800830e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	3b01      	subs	r3, #1
 8008318:	025b      	lsls	r3, r3, #9
 800831a:	b29b      	uxth	r3, r3
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	3b01      	subs	r3, #1
 8008324:	041b      	lsls	r3, r3, #16
 8008326:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008330:	3b01      	subs	r3, #1
 8008332:	061b      	lsls	r3, r3, #24
 8008334:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008338:	4923      	ldr	r1, [pc, #140]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800833a:	4313      	orrs	r3, r2
 800833c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800833e:	4b22      	ldr	r3, [pc, #136]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008342:	4a21      	ldr	r2, [pc, #132]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800834a:	4b1f      	ldr	r3, [pc, #124]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800834c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800834e:	4b21      	ldr	r3, [pc, #132]	@ (80083d4 <HAL_RCC_OscConfig+0x778>)
 8008350:	4013      	ands	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008356:	00d2      	lsls	r2, r2, #3
 8008358:	491b      	ldr	r1, [pc, #108]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800835e:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f023 020c 	bic.w	r2, r3, #12
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	4917      	ldr	r1, [pc, #92]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800836c:	4313      	orrs	r3, r2
 800836e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008370:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	f023 0202 	bic.w	r2, r3, #2
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837c:	4912      	ldr	r1, [pc, #72]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008382:	4b11      	ldr	r3, [pc, #68]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a10      	ldr	r2, [pc, #64]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800838c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838e:	4b0e      	ldr	r3, [pc, #56]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008392:	4a0d      	ldr	r2, [pc, #52]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 8008394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008398:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800839a:	4b0b      	ldr	r3, [pc, #44]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a0a      	ldr	r2, [pc, #40]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80083a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083a6:	4b08      	ldr	r3, [pc, #32]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	4a07      	ldr	r2, [pc, #28]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80083ac:	f043 0301 	orr.w	r3, r3, #1
 80083b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fb fe43 	bl	8004048 <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083c4:	e011      	b.n	80083ea <HAL_RCC_OscConfig+0x78e>
 80083c6:	bf00      	nop
 80083c8:	58024400 	.word	0x58024400
 80083cc:	58024800 	.word	0x58024800
 80083d0:	fffffc0c 	.word	0xfffffc0c
 80083d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083d8:	f7fb fe36 	bl	8004048 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e08a      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083ea:	4b47      	ldr	r3, [pc, #284]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x77c>
 80083f6:	e082      	b.n	80084fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f8:	4b43      	ldr	r3, [pc, #268]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a42      	ldr	r2, [pc, #264]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80083fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fb fe20 	bl	8004048 <HAL_GetTick>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800840c:	f7fb fe1c 	bl	8004048 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e070      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800841e:	4b3a      	ldr	r3, [pc, #232]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x7b0>
 800842a:	e068      	b.n	80084fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800842c:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008432:	4b35      	ldr	r3, [pc, #212]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008436:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	2b01      	cmp	r3, #1
 800843e:	d031      	beq.n	80084a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f003 0203 	and.w	r2, r3, #3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800844a:	429a      	cmp	r2, r3
 800844c:	d12a      	bne.n	80084a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	091b      	lsrs	r3, r3, #4
 8008452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800845a:	429a      	cmp	r2, r3
 800845c:	d122      	bne.n	80084a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008468:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d11a      	bne.n	80084a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	0a5b      	lsrs	r3, r3, #9
 8008472:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800847c:	429a      	cmp	r2, r3
 800847e:	d111      	bne.n	80084a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	0c1b      	lsrs	r3, r3, #16
 8008484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800848e:	429a      	cmp	r2, r3
 8008490:	d108      	bne.n	80084a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	0e1b      	lsrs	r3, r3, #24
 8008496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d001      	beq.n	80084a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e02b      	b.n	8008500 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084a8:	4b17      	ldr	r3, [pc, #92]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ac:	08db      	lsrs	r3, r3, #3
 80084ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d01f      	beq.n	80084fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084be:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c2:	4a11      	ldr	r2, [pc, #68]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084ca:	f7fb fdbd 	bl	8004048 <HAL_GetTick>
 80084ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084d0:	bf00      	nop
 80084d2:	f7fb fdb9 	bl	8004048 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	4293      	cmp	r3, r2
 80084dc:	d0f9      	beq.n	80084d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084de:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084e2:	4b0a      	ldr	r3, [pc, #40]	@ (800850c <HAL_RCC_OscConfig+0x8b0>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084ea:	00d2      	lsls	r2, r2, #3
 80084ec:	4906      	ldr	r1, [pc, #24]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80084f2:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f6:	4a04      	ldr	r2, [pc, #16]	@ (8008508 <HAL_RCC_OscConfig+0x8ac>)
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3730      	adds	r7, #48	@ 0x30
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	58024400 	.word	0x58024400
 800850c:	ffff0007 	.word	0xffff0007

08008510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e19c      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008524:	4b8a      	ldr	r3, [pc, #552]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	429a      	cmp	r2, r3
 8008530:	d910      	bls.n	8008554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008532:	4b87      	ldr	r3, [pc, #540]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 020f 	bic.w	r2, r3, #15
 800853a:	4985      	ldr	r1, [pc, #532]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	4313      	orrs	r3, r2
 8008540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008542:	4b83      	ldr	r3, [pc, #524]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d001      	beq.n	8008554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e184      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d010      	beq.n	8008582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	4b7b      	ldr	r3, [pc, #492]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800856c:	429a      	cmp	r2, r3
 800856e:	d908      	bls.n	8008582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008570:	4b78      	ldr	r3, [pc, #480]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	4975      	ldr	r1, [pc, #468]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 800857e:	4313      	orrs	r3, r2
 8008580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d010      	beq.n	80085b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695a      	ldr	r2, [r3, #20]
 8008592:	4b70      	ldr	r3, [pc, #448]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800859a:	429a      	cmp	r2, r3
 800859c:	d908      	bls.n	80085b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800859e:	4b6d      	ldr	r3, [pc, #436]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	496a      	ldr	r1, [pc, #424]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	4b64      	ldr	r3, [pc, #400]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d908      	bls.n	80085de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085cc:	4b61      	ldr	r3, [pc, #388]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	495e      	ldr	r1, [pc, #376]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69da      	ldr	r2, [r3, #28]
 80085ee:	4b59      	ldr	r3, [pc, #356]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d908      	bls.n	800860c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085fa:	4b56      	ldr	r3, [pc, #344]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	4953      	ldr	r1, [pc, #332]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008608:	4313      	orrs	r3, r2
 800860a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d010      	beq.n	800863a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	4b4d      	ldr	r3, [pc, #308]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	429a      	cmp	r2, r3
 8008626:	d908      	bls.n	800863a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008628:	4b4a      	ldr	r3, [pc, #296]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f023 020f 	bic.w	r2, r3, #15
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	4947      	ldr	r1, [pc, #284]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008636:	4313      	orrs	r3, r2
 8008638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d055      	beq.n	80086f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008646:	4b43      	ldr	r3, [pc, #268]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	4940      	ldr	r1, [pc, #256]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008654:	4313      	orrs	r3, r2
 8008656:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d107      	bne.n	8008670 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008660:	4b3c      	ldr	r3, [pc, #240]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d121      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0f6      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d107      	bne.n	8008688 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008678:	4b36      	ldr	r3, [pc, #216]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d115      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e0ea      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d107      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008690:	4b30      	ldr	r3, [pc, #192]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008698:	2b00      	cmp	r3, #0
 800869a:	d109      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0de      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086a0:	4b2c      	ldr	r3, [pc, #176]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0d6      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086b0:	4b28      	ldr	r3, [pc, #160]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f023 0207 	bic.w	r2, r3, #7
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4925      	ldr	r1, [pc, #148]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c2:	f7fb fcc1 	bl	8004048 <HAL_GetTick>
 80086c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086c8:	e00a      	b.n	80086e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ca:	f7fb fcbd 	bl	8004048 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e0be      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d1eb      	bne.n	80086ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d010      	beq.n	8008720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	429a      	cmp	r2, r3
 800870c:	d208      	bcs.n	8008720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800870e:	4b11      	ldr	r3, [pc, #68]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f023 020f 	bic.w	r2, r3, #15
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	490e      	ldr	r1, [pc, #56]	@ (8008754 <HAL_RCC_ClockConfig+0x244>)
 800871c:	4313      	orrs	r3, r2
 800871e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d214      	bcs.n	8008758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872e:	4b08      	ldr	r3, [pc, #32]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f023 020f 	bic.w	r2, r3, #15
 8008736:	4906      	ldr	r1, [pc, #24]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	4b04      	ldr	r3, [pc, #16]	@ (8008750 <HAL_RCC_ClockConfig+0x240>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d005      	beq.n	8008758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e086      	b.n	800885e <HAL_RCC_ClockConfig+0x34e>
 8008750:	52002000 	.word	0x52002000
 8008754:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0304 	and.w	r3, r3, #4
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691a      	ldr	r2, [r3, #16]
 8008768:	4b3f      	ldr	r3, [pc, #252]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008770:	429a      	cmp	r2, r3
 8008772:	d208      	bcs.n	8008786 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008774:	4b3c      	ldr	r3, [pc, #240]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	4939      	ldr	r1, [pc, #228]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008782:	4313      	orrs	r3, r2
 8008784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	4b34      	ldr	r3, [pc, #208]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800879e:	429a      	cmp	r2, r3
 80087a0:	d208      	bcs.n	80087b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087a2:	4b31      	ldr	r3, [pc, #196]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	492e      	ldr	r1, [pc, #184]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	4b28      	ldr	r3, [pc, #160]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d208      	bcs.n	80087e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087d0:	4b25      	ldr	r3, [pc, #148]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	4922      	ldr	r1, [pc, #136]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0320 	and.w	r3, r3, #32
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d010      	beq.n	8008810 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	69da      	ldr	r2, [r3, #28]
 80087f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d208      	bcs.n	8008810 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	4917      	ldr	r1, [pc, #92]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 800880c:	4313      	orrs	r3, r2
 800880e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008810:	f000 f834 	bl	800887c <HAL_RCC_GetSysClockFreq>
 8008814:	4602      	mov	r2, r0
 8008816:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	4912      	ldr	r1, [pc, #72]	@ (800886c <HAL_RCC_ClockConfig+0x35c>)
 8008822:	5ccb      	ldrb	r3, [r1, r3]
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
 800882c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800882e:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <HAL_RCC_ClockConfig+0x358>)
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	4a0d      	ldr	r2, [pc, #52]	@ (800886c <HAL_RCC_ClockConfig+0x35c>)
 8008838:	5cd3      	ldrb	r3, [r2, r3]
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
 8008844:	4a0a      	ldr	r2, [pc, #40]	@ (8008870 <HAL_RCC_ClockConfig+0x360>)
 8008846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008848:	4a0a      	ldr	r2, [pc, #40]	@ (8008874 <HAL_RCC_ClockConfig+0x364>)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800884e:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <HAL_RCC_ClockConfig+0x368>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fbae 	bl	8003fb4 <HAL_InitTick>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	58024400 	.word	0x58024400
 800886c:	0800f638 	.word	0x0800f638
 8008870:	24000004 	.word	0x24000004
 8008874:	24000000 	.word	0x24000000
 8008878:	24000008 	.word	0x24000008

0800887c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800887c:	b480      	push	{r7}
 800887e:	b089      	sub	sp, #36	@ 0x24
 8008880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008882:	4bb3      	ldr	r3, [pc, #716]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800888a:	2b18      	cmp	r3, #24
 800888c:	f200 8155 	bhi.w	8008b3a <HAL_RCC_GetSysClockFreq+0x2be>
 8008890:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088fd 	.word	0x080088fd
 800889c:	08008b3b 	.word	0x08008b3b
 80088a0:	08008b3b 	.word	0x08008b3b
 80088a4:	08008b3b 	.word	0x08008b3b
 80088a8:	08008b3b 	.word	0x08008b3b
 80088ac:	08008b3b 	.word	0x08008b3b
 80088b0:	08008b3b 	.word	0x08008b3b
 80088b4:	08008b3b 	.word	0x08008b3b
 80088b8:	08008923 	.word	0x08008923
 80088bc:	08008b3b 	.word	0x08008b3b
 80088c0:	08008b3b 	.word	0x08008b3b
 80088c4:	08008b3b 	.word	0x08008b3b
 80088c8:	08008b3b 	.word	0x08008b3b
 80088cc:	08008b3b 	.word	0x08008b3b
 80088d0:	08008b3b 	.word	0x08008b3b
 80088d4:	08008b3b 	.word	0x08008b3b
 80088d8:	08008929 	.word	0x08008929
 80088dc:	08008b3b 	.word	0x08008b3b
 80088e0:	08008b3b 	.word	0x08008b3b
 80088e4:	08008b3b 	.word	0x08008b3b
 80088e8:	08008b3b 	.word	0x08008b3b
 80088ec:	08008b3b 	.word	0x08008b3b
 80088f0:	08008b3b 	.word	0x08008b3b
 80088f4:	08008b3b 	.word	0x08008b3b
 80088f8:	0800892f 	.word	0x0800892f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fc:	4b94      	ldr	r3, [pc, #592]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008908:	4b91      	ldr	r3, [pc, #580]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a90      	ldr	r2, [pc, #576]	@ (8008b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800891a:	e111      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800891c:	4b8d      	ldr	r3, [pc, #564]	@ (8008b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800891e:	61bb      	str	r3, [r7, #24]
      break;
 8008920:	e10e      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008922:	4b8d      	ldr	r3, [pc, #564]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008924:	61bb      	str	r3, [r7, #24]
      break;
 8008926:	e10b      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008928:	4b8c      	ldr	r3, [pc, #560]	@ (8008b5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800892a:	61bb      	str	r3, [r7, #24]
      break;
 800892c:	e108      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800892e:	4b88      	ldr	r3, [pc, #544]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	f003 0303 	and.w	r3, r3, #3
 8008936:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008938:	4b85      	ldr	r3, [pc, #532]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008942:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008944:	4b82      	ldr	r3, [pc, #520]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800894e:	4b80      	ldr	r3, [pc, #512]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80e1 	beq.w	8008b34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b02      	cmp	r3, #2
 8008976:	f000 8083 	beq.w	8008a80 <HAL_RCC_GetSysClockFreq+0x204>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b02      	cmp	r3, #2
 800897e:	f200 80a1 	bhi.w	8008ac4 <HAL_RCC_GetSysClockFreq+0x248>
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_RCC_GetSysClockFreq+0x114>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d056      	beq.n	8008a3c <HAL_RCC_GetSysClockFreq+0x1c0>
 800898e:	e099      	b.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008990:	4b6f      	ldr	r3, [pc, #444]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02d      	beq.n	80089f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800899c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	08db      	lsrs	r3, r3, #3
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008b54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	ee07 3a90 	vmov	s15, r3
 80089b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c6:	4b62      	ldr	r3, [pc, #392]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80089f6:	e087      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b51      	ldr	r3, [pc, #324]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a3a:	e065      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b40      	ldr	r3, [pc, #256]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a7e:	e043      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b2f      	ldr	r3, [pc, #188]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac2:	e021      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b08:	4b11      	ldr	r3, [pc, #68]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b12:	3301      	adds	r3, #1
 8008b14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	ee07 3a90 	vmov	s15, r3
 8008b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2c:	ee17 3a90 	vmov	r3, s15
 8008b30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b32:	e005      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61bb      	str	r3, [r7, #24]
      break;
 8008b38:	e002      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b3a:	4b07      	ldr	r3, [pc, #28]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b3c:	61bb      	str	r3, [r7, #24]
      break;
 8008b3e:	bf00      	nop
  }

  return sysclockfreq;
 8008b40:	69bb      	ldr	r3, [r7, #24]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3724      	adds	r7, #36	@ 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	58024400 	.word	0x58024400
 8008b54:	03d09000 	.word	0x03d09000
 8008b58:	003d0900 	.word	0x003d0900
 8008b5c:	017d7840 	.word	0x017d7840
 8008b60:	46000000 	.word	0x46000000
 8008b64:	4c742400 	.word	0x4c742400
 8008b68:	4a742400 	.word	0x4a742400
 8008b6c:	4bbebc20 	.word	0x4bbebc20

08008b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b76:	f7ff fe81 	bl	800887c <HAL_RCC_GetSysClockFreq>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b10      	ldr	r3, [pc, #64]	@ (8008bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	f003 030f 	and.w	r3, r3, #15
 8008b86:	490f      	ldr	r1, [pc, #60]	@ (8008bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b88:	5ccb      	ldrb	r3, [r1, r3]
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b94:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	4a09      	ldr	r2, [pc, #36]	@ (8008bc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8008baa:	4a07      	ldr	r2, [pc, #28]	@ (8008bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bae:	4a07      	ldr	r2, [pc, #28]	@ (8008bcc <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bb4:	4b04      	ldr	r3, [pc, #16]	@ (8008bc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	0800f638 	.word	0x0800f638
 8008bc8:	24000004 	.word	0x24000004
 8008bcc:	24000000 	.word	0x24000000

08008bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bd4:	f7ff ffcc 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4b06      	ldr	r3, [pc, #24]	@ (8008bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	4904      	ldr	r1, [pc, #16]	@ (8008bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008be6:	5ccb      	ldrb	r3, [r1, r3]
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	0800f638 	.word	0x0800f638

08008bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c00:	f7ff ffb6 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008c04:	4602      	mov	r2, r0
 8008c06:	4b06      	ldr	r3, [pc, #24]	@ (8008c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	4904      	ldr	r1, [pc, #16]	@ (8008c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c12:	5ccb      	ldrb	r3, [r1, r3]
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	58024400 	.word	0x58024400
 8008c24:	0800f638 	.word	0x0800f638

08008c28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c2c:	b0ca      	sub	sp, #296	@ 0x128
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c34:	2300      	movs	r3, #0
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	ea54 0305 	orrs.w	r3, r4, r5
 8008c52:	d049      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c5e:	d02f      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c64:	d828      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c6a:	d01a      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c70:	d822      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7a:	d007      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c7c:	e01c      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7e:	4bb8      	ldr	r3, [pc, #736]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	4ab7      	ldr	r2, [pc, #732]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c8a:	e01a      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c90:	3308      	adds	r3, #8
 8008c92:	2102      	movs	r1, #2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f002 fb61 	bl	800b35c <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ca0:	e00f      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca6:	3328      	adds	r3, #40	@ 0x28
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f002 fc08 	bl	800b4c0 <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cb6:	e004      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cca:	4ba5      	ldr	r3, [pc, #660]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cd8:	4aa1      	ldr	r2, [pc, #644]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cde:	e003      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008cf4:	f04f 0900 	mov.w	r9, #0
 8008cf8:	ea58 0309 	orrs.w	r3, r8, r9
 8008cfc:	d047      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d82a      	bhi.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d08:	a201      	add	r2, pc, #4	@ (adr r2, 8008d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d25 	.word	0x08008d25
 8008d14:	08008d33 	.word	0x08008d33
 8008d18:	08008d49 	.word	0x08008d49
 8008d1c:	08008d67 	.word	0x08008d67
 8008d20:	08008d67 	.word	0x08008d67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d24:	4b8e      	ldr	r3, [pc, #568]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	4a8d      	ldr	r2, [pc, #564]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d30:	e01a      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d36:	3308      	adds	r3, #8
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f002 fb0e 	bl	800b35c <RCCEx_PLL2_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d46:	e00f      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4c:	3328      	adds	r3, #40	@ 0x28
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fbb5 	bl	800b4c0 <RCCEx_PLL3_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d5c:	e004      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d64:	e000      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d70:	4b7b      	ldr	r3, [pc, #492]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d74:	f023 0107 	bic.w	r1, r3, #7
 8008d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d7e:	4a78      	ldr	r2, [pc, #480]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d84:	e003      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008da2:	d04c      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dae:	d030      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db4:	d829      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008db8:	d02d      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8008dbc:	d825      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008dbe:	2b80      	cmp	r3, #128	@ 0x80
 8008dc0:	d018      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008dc2:	2b80      	cmp	r3, #128	@ 0x80
 8008dc4:	d821      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008dca:	2b40      	cmp	r3, #64	@ 0x40
 8008dcc:	d007      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008dce:	e01c      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dd0:	4b63      	ldr	r3, [pc, #396]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd4:	4a62      	ldr	r2, [pc, #392]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ddc:	e01c      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de2:	3308      	adds	r3, #8
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f002 fab8 	bl	800b35c <RCCEx_PLL2_Config>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008df2:	e011      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	3328      	adds	r3, #40	@ 0x28
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f002 fb5f 	bl	800b4c0 <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e08:	e006      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e10:	e002      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e12:	bf00      	nop
 8008e14:	e000      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e20:	4b4f      	ldr	r3, [pc, #316]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e2e:	4a4c      	ldr	r2, [pc, #304]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e30:	430b      	orrs	r3, r1
 8008e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e34:	e003      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008e4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008e54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	d053      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e6a:	d035      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e70:	d82e      	bhi.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e76:	d031      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008e78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e7c:	d828      	bhi.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e82:	d01a      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e88:	d822      	bhi.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e92:	d007      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008e94:	e01c      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e96:	4b32      	ldr	r3, [pc, #200]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9a:	4a31      	ldr	r2, [pc, #196]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea2:	e01c      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f002 fa55 	bl	800b35c <RCCEx_PLL2_Config>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008eb8:	e011      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebe:	3328      	adds	r3, #40	@ 0x28
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f002 fafc 	bl	800b4c0 <RCCEx_PLL3_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ece:	e006      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ed6:	e002      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ed8:	bf00      	nop
 8008eda:	e000      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d056      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008f2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f32:	d038      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f38:	d831      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f3e:	d034      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008f40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f44:	d82b      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f4a:	d01d      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f50:	d825      	bhi.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d006      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f5a:	d00a      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f5c:	e01f      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f5e:	bf00      	nop
 8008f60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f64:	4ba2      	ldr	r3, [pc, #648]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	4aa1      	ldr	r2, [pc, #644]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f70:	e01c      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	3308      	adds	r3, #8
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 f9ee 	bl	800b35c <RCCEx_PLL2_Config>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f86:	e011      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8c:	3328      	adds	r3, #40	@ 0x28
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fa95 	bl	800b4c0 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f9c:	e006      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fa4:	e002      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10b      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008fc4:	4a8a      	ldr	r2, [pc, #552]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fca:	e003      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008fea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	d03a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ffa:	2b30      	cmp	r3, #48	@ 0x30
 8008ffc:	d01f      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ffe:	2b30      	cmp	r3, #48	@ 0x30
 8009000:	d819      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009002:	2b20      	cmp	r3, #32
 8009004:	d00c      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009006:	2b20      	cmp	r3, #32
 8009008:	d815      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d019      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800900e:	2b10      	cmp	r3, #16
 8009010:	d111      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009012:	4b77      	ldr	r3, [pc, #476]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009016:	4a76      	ldr	r2, [pc, #472]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800901c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800901e:	e011      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	3308      	adds	r3, #8
 8009026:	2102      	movs	r1, #2
 8009028:	4618      	mov	r0, r3
 800902a:	f002 f997 	bl	800b35c <RCCEx_PLL2_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009034:	e006      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800903c:	e002      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800903e:	bf00      	nop
 8009040:	e000      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800904c:	4b68      	ldr	r3, [pc, #416]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800904e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009050:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800905a:	4a65      	ldr	r2, [pc, #404]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800905c:	430b      	orrs	r3, r1
 800905e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009060:	e003      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009076:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800907a:	2300      	movs	r3, #0
 800907c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009080:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009084:	460b      	mov	r3, r1
 8009086:	4313      	orrs	r3, r2
 8009088:	d051      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009094:	d035      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800909a:	d82e      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800909c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090a0:	d031      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80090a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090a6:	d828      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80090a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ac:	d01a      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090b2:	d822      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090bc:	d007      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80090be:	e01c      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c0:	4b4b      	ldr	r3, [pc, #300]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c4:	4a4a      	ldr	r2, [pc, #296]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090cc:	e01c      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d2:	3308      	adds	r3, #8
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 f940 	bl	800b35c <RCCEx_PLL2_Config>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090e2:	e011      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e8:	3328      	adds	r3, #40	@ 0x28
 80090ea:	2100      	movs	r1, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f002 f9e7 	bl	800b4c0 <RCCEx_PLL3_Config>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090f8:	e006      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009100:	e002      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009102:	bf00      	nop
 8009104:	e000      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009110:	4b37      	ldr	r3, [pc, #220]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009114:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800911e:	4a34      	ldr	r2, [pc, #208]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009120:	430b      	orrs	r3, r1
 8009122:	6513      	str	r3, [r2, #80]	@ 0x50
 8009124:	e003      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800913a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800913e:	2300      	movs	r3, #0
 8009140:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009144:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009148:	460b      	mov	r3, r1
 800914a:	4313      	orrs	r3, r2
 800914c:	d056      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009158:	d033      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800915a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800915e:	d82c      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009160:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009164:	d02f      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009166:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800916a:	d826      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800916c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009170:	d02b      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009176:	d820      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800917c:	d012      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800917e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009182:	d81a      	bhi.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d022      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800918c:	d115      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009192:	3308      	adds	r3, #8
 8009194:	2101      	movs	r1, #1
 8009196:	4618      	mov	r0, r3
 8009198:	f002 f8e0 	bl	800b35c <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091a2:	e015      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	3328      	adds	r3, #40	@ 0x28
 80091aa:	2101      	movs	r1, #1
 80091ac:	4618      	mov	r0, r3
 80091ae:	f002 f987 	bl	800b4c0 <RCCEx_PLL3_Config>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091b8:	e00a      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091c0:	e006      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091c2:	bf00      	nop
 80091c4:	e004      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091c6:	bf00      	nop
 80091c8:	e002      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091ca:	bf00      	nop
 80091cc:	e000      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80091ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091d8:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e6:	4a02      	ldr	r2, [pc, #8]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ec:	e006      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800920c:	2300      	movs	r3, #0
 800920e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009212:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009216:	460b      	mov	r3, r1
 8009218:	4313      	orrs	r3, r2
 800921a:	d055      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800921c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009224:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009228:	d033      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800922a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800922e:	d82c      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009234:	d02f      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923a:	d826      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800923c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009240:	d02b      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009242:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009246:	d820      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924c:	d012      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800924e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009252:	d81a      	bhi.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009254:	2b00      	cmp	r3, #0
 8009256:	d022      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800925c:	d115      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009262:	3308      	adds	r3, #8
 8009264:	2101      	movs	r1, #1
 8009266:	4618      	mov	r0, r3
 8009268:	f002 f878 	bl	800b35c <RCCEx_PLL2_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009272:	e015      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	3328      	adds	r3, #40	@ 0x28
 800927a:	2101      	movs	r1, #1
 800927c:	4618      	mov	r0, r3
 800927e:	f002 f91f 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009282:	4603      	mov	r3, r0
 8009284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009288:	e00a      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009290:	e006      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009292:	bf00      	nop
 8009294:	e004      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009296:	bf00      	nop
 8009298:	e002      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800929a:	bf00      	nop
 800929c:	e000      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800929e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10b      	bne.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092a8:	4ba3      	ldr	r3, [pc, #652]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80092b8:	4a9f      	ldr	r2, [pc, #636]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ba:	430b      	orrs	r3, r1
 80092bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80092be:	e003      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092d8:	2300      	movs	r3, #0
 80092da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092e2:	460b      	mov	r3, r1
 80092e4:	4313      	orrs	r3, r2
 80092e6:	d037      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092f2:	d00e      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80092f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092f8:	d816      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d018      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80092fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009302:	d111      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009304:	4b8c      	ldr	r3, [pc, #560]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a8b      	ldr	r2, [pc, #556]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800930e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009310:	e00f      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	3308      	adds	r3, #8
 8009318:	2101      	movs	r1, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f002 f81e 	bl	800b35c <RCCEx_PLL2_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800933a:	4b7f      	ldr	r3, [pc, #508]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800933c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009348:	4a7b      	ldr	r2, [pc, #492]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6513      	str	r3, [r2, #80]	@ 0x50
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009368:	2300      	movs	r3, #0
 800936a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800936e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d039      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800937e:	2b03      	cmp	r3, #3
 8009380:	d81c      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009382:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093c5 	.word	0x080093c5
 800938c:	08009399 	.word	0x08009399
 8009390:	080093a7 	.word	0x080093a7
 8009394:	080093c5 	.word	0x080093c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009398:	4b67      	ldr	r3, [pc, #412]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939c:	4a66      	ldr	r2, [pc, #408]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800939e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093a4:	e00f      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093aa:	3308      	adds	r3, #8
 80093ac:	2102      	movs	r1, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 ffd4 	bl	800b35c <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10a      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093ce:	4b5a      	ldr	r3, [pc, #360]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093d2:	f023 0103 	bic.w	r1, r3, #3
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093dc:	4a56      	ldr	r2, [pc, #344]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093de:	430b      	orrs	r3, r1
 80093e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093e2:	e003      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009402:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009406:	460b      	mov	r3, r1
 8009408:	4313      	orrs	r3, r2
 800940a:	f000 809f 	beq.w	800954c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800940e:	4b4b      	ldr	r3, [pc, #300]	@ (800953c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a4a      	ldr	r2, [pc, #296]	@ (800953c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800941a:	f7fa fe15 	bl	8004048 <HAL_GetTick>
 800941e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009422:	e00b      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009424:	f7fa fe10 	bl	8004048 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b64      	cmp	r3, #100	@ 0x64
 8009432:	d903      	bls.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800943a:	e005      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943c:	4b3f      	ldr	r3, [pc, #252]	@ (800953c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0ed      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944c:	2b00      	cmp	r3, #0
 800944e:	d179      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009450:	4b39      	ldr	r3, [pc, #228]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800945c:	4053      	eors	r3, r2
 800945e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009462:	2b00      	cmp	r3, #0
 8009464:	d015      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009466:	4b34      	ldr	r3, [pc, #208]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800946e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009472:	4b31      	ldr	r3, [pc, #196]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009476:	4a30      	ldr	r2, [pc, #192]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800947c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800947e:	4b2e      	ldr	r3, [pc, #184]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009482:	4a2d      	ldr	r2, [pc, #180]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009488:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800948a:	4a2b      	ldr	r2, [pc, #172]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800948c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009490:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800949a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800949e:	d118      	bne.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094a0:	f7fa fdd2 	bl	8004048 <HAL_GetTick>
 80094a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a8:	e00d      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094aa:	f7fa fdcd 	bl	8004048 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d903      	bls.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80094c4:	e005      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0eb      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80094d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d129      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094ea:	d10e      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80094ec:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094fc:	091a      	lsrs	r2, r3, #4
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009500:	4013      	ands	r3, r2
 8009502:	4a0d      	ldr	r2, [pc, #52]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009504:	430b      	orrs	r3, r1
 8009506:	6113      	str	r3, [r2, #16]
 8009508:	e005      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800950a:	4b0b      	ldr	r3, [pc, #44]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	4a0a      	ldr	r2, [pc, #40]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009514:	6113      	str	r3, [r2, #16]
 8009516:	4b08      	ldr	r3, [pc, #32]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009518:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009526:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6713      	str	r3, [r2, #112]	@ 0x70
 800952c:	e00e      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800952e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009536:	e009      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009538:	58024400 	.word	0x58024400
 800953c:	58024800 	.word	0x58024800
 8009540:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f002 0301 	and.w	r3, r2, #1
 8009558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800955c:	2300      	movs	r3, #0
 800955e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009566:	460b      	mov	r3, r1
 8009568:	4313      	orrs	r3, r2
 800956a:	f000 8089 	beq.w	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800956e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009574:	2b28      	cmp	r3, #40	@ 0x28
 8009576:	d86b      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009578:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	08009659 	.word	0x08009659
 8009584:	08009651 	.word	0x08009651
 8009588:	08009651 	.word	0x08009651
 800958c:	08009651 	.word	0x08009651
 8009590:	08009651 	.word	0x08009651
 8009594:	08009651 	.word	0x08009651
 8009598:	08009651 	.word	0x08009651
 800959c:	08009651 	.word	0x08009651
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009651 	.word	0x08009651
 80095a8:	08009651 	.word	0x08009651
 80095ac:	08009651 	.word	0x08009651
 80095b0:	08009651 	.word	0x08009651
 80095b4:	08009651 	.word	0x08009651
 80095b8:	08009651 	.word	0x08009651
 80095bc:	08009651 	.word	0x08009651
 80095c0:	0800963b 	.word	0x0800963b
 80095c4:	08009651 	.word	0x08009651
 80095c8:	08009651 	.word	0x08009651
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009651 	.word	0x08009651
 80095d4:	08009651 	.word	0x08009651
 80095d8:	08009651 	.word	0x08009651
 80095dc:	08009651 	.word	0x08009651
 80095e0:	08009659 	.word	0x08009659
 80095e4:	08009651 	.word	0x08009651
 80095e8:	08009651 	.word	0x08009651
 80095ec:	08009651 	.word	0x08009651
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009651 	.word	0x08009651
 8009600:	08009659 	.word	0x08009659
 8009604:	08009651 	.word	0x08009651
 8009608:	08009651 	.word	0x08009651
 800960c:	08009651 	.word	0x08009651
 8009610:	08009651 	.word	0x08009651
 8009614:	08009651 	.word	0x08009651
 8009618:	08009651 	.word	0x08009651
 800961c:	08009651 	.word	0x08009651
 8009620:	08009659 	.word	0x08009659
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009628:	3308      	adds	r3, #8
 800962a:	2101      	movs	r1, #1
 800962c:	4618      	mov	r0, r3
 800962e:	f001 fe95 	bl	800b35c <RCCEx_PLL2_Config>
 8009632:	4603      	mov	r3, r0
 8009634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009638:	e00f      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800963a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963e:	3328      	adds	r3, #40	@ 0x28
 8009640:	2101      	movs	r1, #1
 8009642:	4618      	mov	r0, r3
 8009644:	f001 ff3c 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800964e:	e004      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009656:	e000      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10a      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009662:	4bbf      	ldr	r3, [pc, #764]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009666:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009670:	4abb      	ldr	r2, [pc, #748]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009672:	430b      	orrs	r3, r1
 8009674:	6553      	str	r3, [r2, #84]	@ 0x54
 8009676:	e003      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800967c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f002 0302 	and.w	r3, r2, #2
 800968c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009690:	2300      	movs	r3, #0
 8009692:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009696:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d041      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096a6:	2b05      	cmp	r3, #5
 80096a8:	d824      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80096aa:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096fd 	.word	0x080096fd
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096df 	.word	0x080096df
 80096bc:	080096fd 	.word	0x080096fd
 80096c0:	080096fd 	.word	0x080096fd
 80096c4:	080096fd 	.word	0x080096fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096cc:	3308      	adds	r3, #8
 80096ce:	2101      	movs	r1, #1
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 fe43 	bl	800b35c <RCCEx_PLL2_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096dc:	e00f      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e2:	3328      	adds	r3, #40	@ 0x28
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 feea 	bl	800b4c0 <RCCEx_PLL3_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80096fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009706:	4b96      	ldr	r3, [pc, #600]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	f023 0107 	bic.w	r1, r3, #7
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009714:	4a92      	ldr	r2, [pc, #584]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009716:	430b      	orrs	r3, r1
 8009718:	6553      	str	r3, [r2, #84]	@ 0x54
 800971a:	e003      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f002 0304 	and.w	r3, r2, #4
 8009730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009734:	2300      	movs	r3, #0
 8009736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800973a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800973e:	460b      	mov	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	d044      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009748:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800974c:	2b05      	cmp	r3, #5
 800974e:	d825      	bhi.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009750:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	080097a5 	.word	0x080097a5
 800975c:	08009771 	.word	0x08009771
 8009760:	08009787 	.word	0x08009787
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097a5 	.word	0x080097a5
 800976c:	080097a5 	.word	0x080097a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009774:	3308      	adds	r3, #8
 8009776:	2101      	movs	r1, #1
 8009778:	4618      	mov	r0, r3
 800977a:	f001 fdef 	bl	800b35c <RCCEx_PLL2_Config>
 800977e:	4603      	mov	r3, r0
 8009780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009784:	e00f      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800978a:	3328      	adds	r3, #40	@ 0x28
 800978c:	2101      	movs	r1, #1
 800978e:	4618      	mov	r0, r3
 8009790:	f001 fe96 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800979a:	e004      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097a2:	e000      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80097a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097ae:	4b6c      	ldr	r3, [pc, #432]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b2:	f023 0107 	bic.w	r1, r3, #7
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80097be:	4a68      	ldr	r2, [pc, #416]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097c0:	430b      	orrs	r3, r1
 80097c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80097c4:	e003      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f002 0320 	and.w	r3, r2, #32
 80097da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097de:	2300      	movs	r3, #0
 80097e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097e8:	460b      	mov	r3, r1
 80097ea:	4313      	orrs	r3, r2
 80097ec:	d055      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097fa:	d033      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80097fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009800:	d82c      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009806:	d02f      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800980c:	d826      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800980e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009812:	d02b      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009814:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009818:	d820      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981e:	d012      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009824:	d81a      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d022      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800982a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800982e:	d115      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009834:	3308      	adds	r3, #8
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f001 fd8f 	bl	800b35c <RCCEx_PLL2_Config>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009844:	e015      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984a:	3328      	adds	r3, #40	@ 0x28
 800984c:	2102      	movs	r1, #2
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fe36 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800985a:	e00a      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009862:	e006      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009864:	bf00      	nop
 8009866:	e004      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009868:	bf00      	nop
 800986a:	e002      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800986c:	bf00      	nop
 800986e:	e000      	b.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800987a:	4b39      	ldr	r3, [pc, #228]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800988a:	4a35      	ldr	r2, [pc, #212]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800988c:	430b      	orrs	r3, r1
 800988e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009890:	e003      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80098a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098aa:	2300      	movs	r3, #0
 80098ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d058      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098c6:	d033      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80098c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098cc:	d82c      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098d2:	d02f      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098d8:	d826      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098de:	d02b      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80098e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098e4:	d820      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ea:	d012      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80098ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098f0:	d81a      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d022      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80098f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098fa:	d115      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	3308      	adds	r3, #8
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f001 fd29 	bl	800b35c <RCCEx_PLL2_Config>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009910:	e015      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009916:	3328      	adds	r3, #40	@ 0x28
 8009918:	2102      	movs	r1, #2
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fdd0 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009926:	e00a      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800992e:	e006      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009930:	bf00      	nop
 8009932:	e004      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009934:	bf00      	nop
 8009936:	e002      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009938:	bf00      	nop
 800993a:	e000      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800993c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10e      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009946:	4b06      	ldr	r3, [pc, #24]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009956:	4a02      	ldr	r2, [pc, #8]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009958:	430b      	orrs	r3, r1
 800995a:	6593      	str	r3, [r2, #88]	@ 0x58
 800995c:	e006      	b.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800997c:	2300      	movs	r3, #0
 800997e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009982:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009986:	460b      	mov	r3, r1
 8009988:	4313      	orrs	r3, r2
 800998a:	d055      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800998c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009994:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009998:	d033      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800999a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800999e:	d82c      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099a4:	d02f      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80099a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099aa:	d826      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099b0:	d02b      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80099b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099b6:	d820      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099bc:	d012      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80099be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099c2:	d81a      	bhi.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d022      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80099c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099cc:	d115      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d2:	3308      	adds	r3, #8
 80099d4:	2100      	movs	r1, #0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fcc0 	bl	800b35c <RCCEx_PLL2_Config>
 80099dc:	4603      	mov	r3, r0
 80099de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099e2:	e015      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e8:	3328      	adds	r3, #40	@ 0x28
 80099ea:	2102      	movs	r1, #2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 fd67 	bl	800b4c0 <RCCEx_PLL3_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099f8:	e00a      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a00:	e006      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a02:	bf00      	nop
 8009a04:	e004      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a06:	bf00      	nop
 8009a08:	e002      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a0a:	bf00      	nop
 8009a0c:	e000      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a18:	4ba1      	ldr	r3, [pc, #644]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a28:	4a9d      	ldr	r2, [pc, #628]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a2e:	e003      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f002 0308 	and.w	r3, r2, #8
 8009a44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a52:	460b      	mov	r3, r1
 8009a54:	4313      	orrs	r3, r2
 8009a56:	d01e      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a64:	d10c      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6a:	3328      	adds	r3, #40	@ 0x28
 8009a6c:	2102      	movs	r1, #2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f001 fd26 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009a80:	4b87      	ldr	r3, [pc, #540]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a90:	4a83      	ldr	r2, [pc, #524]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f002 0310 	and.w	r3, r2, #16
 8009aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009aac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	d01e      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac2:	d10c      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac8:	3328      	adds	r3, #40	@ 0x28
 8009aca:	2102      	movs	r1, #2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 fcf7 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ade:	4b70      	ldr	r3, [pc, #448]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ae2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009aee:	4a6c      	ldr	r2, [pc, #432]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b04:	2300      	movs	r3, #0
 8009b06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4313      	orrs	r3, r2
 8009b12:	d03e      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b20:	d022      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009b22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b26:	d81b      	bhi.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b30:	d00b      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009b32:	e015      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 fc0d 	bl	800b35c <RCCEx_PLL2_Config>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b48:	e00f      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b4e:	3328      	adds	r3, #40	@ 0x28
 8009b50:	2102      	movs	r1, #2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fcb4 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b5e:	e004      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10b      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b72:	4b4b      	ldr	r3, [pc, #300]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b82:	4a47      	ldr	r2, [pc, #284]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b88:	e003      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ba4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4313      	orrs	r3, r2
 8009bac:	d03b      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bba:	d01f      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009bbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bc0:	d818      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bc6:	d003      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bcc:	d007      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009bce:	e011      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd0:	4b33      	ldr	r3, [pc, #204]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd4:	4a32      	ldr	r2, [pc, #200]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bdc:	e00f      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be2:	3328      	adds	r3, #40	@ 0x28
 8009be4:	2101      	movs	r1, #1
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fc6a 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bf2:	e004      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bfa:	e000      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c06:	4b26      	ldr	r3, [pc, #152]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c16:	4a22      	ldr	r2, [pc, #136]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c1c:	e003      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c34:	2300      	movs	r3, #0
 8009c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	d034      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c50:	d007      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009c52:	e011      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c54:	4b12      	ldr	r3, [pc, #72]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c58:	4a11      	ldr	r2, [pc, #68]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c60:	e00e      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c66:	3308      	adds	r3, #8
 8009c68:	2102      	movs	r1, #2
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fb76 	bl	800b35c <RCCEx_PLL2_Config>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c76:	e003      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10d      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c88:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c96:	4a02      	ldr	r2, [pc, #8]	@ (8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c98:	430b      	orrs	r3, r1
 8009c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009c9e:	bf00      	nop
 8009ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cba:	2300      	movs	r3, #0
 8009cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d00c      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ccc:	3328      	adds	r3, #40	@ 0x28
 8009cce:	2102      	movs	r1, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fbf5 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009cee:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cf4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	d038      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d0a:	d018      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d10:	d811      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d16:	d014      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d1c:	d80b      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d011      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d26:	d106      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d28:	4bc3      	ldr	r3, [pc, #780]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	4ac2      	ldr	r2, [pc, #776]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d34:	e008      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d3c:	e004      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d3e:	bf00      	nop
 8009d40:	e002      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d42:	bf00      	nop
 8009d44:	e000      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10b      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d50:	4bb9      	ldr	r3, [pc, #740]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d60:	4ab5      	ldr	r2, [pc, #724]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d62:	430b      	orrs	r3, r1
 8009d64:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d66:	e003      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d7e:	2300      	movs	r3, #0
 8009d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d86:	460b      	mov	r3, r1
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	d009      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d8c:	4baa      	ldr	r3, [pc, #680]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d9a:	4aa7      	ldr	r2, [pc, #668]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dae:	2300      	movs	r3, #0
 8009db0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009db2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009db6:	460b      	mov	r3, r1
 8009db8:	4313      	orrs	r3, r2
 8009dba:	d00a      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009dbc:	4b9e      	ldr	r3, [pc, #632]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009dcc:	4a9a      	ldr	r2, [pc, #616]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009de0:	2300      	movs	r3, #0
 8009de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009de4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009de8:	460b      	mov	r3, r1
 8009dea:	4313      	orrs	r3, r2
 8009dec:	d009      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dee:	4b92      	ldr	r3, [pc, #584]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dfc:	4a8e      	ldr	r2, [pc, #568]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e10:	2300      	movs	r3, #0
 8009e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	d00e      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e1e:	4b86      	ldr	r3, [pc, #536]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	4a85      	ldr	r2, [pc, #532]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e28:	6113      	str	r3, [r2, #16]
 8009e2a:	4b83      	ldr	r3, [pc, #524]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e2c:	6919      	ldr	r1, [r3, #16]
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e36:	4a80      	ldr	r2, [pc, #512]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e52:	460b      	mov	r3, r1
 8009e54:	4313      	orrs	r3, r2
 8009e56:	d009      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e58:	4b77      	ldr	r3, [pc, #476]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e66:	4a74      	ldr	r2, [pc, #464]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e82:	460b      	mov	r3, r1
 8009e84:	4313      	orrs	r3, r2
 8009e86:	d00a      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e88:	4b6b      	ldr	r3, [pc, #428]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e98:	4a67      	ldr	r2, [pc, #412]	@ (800a038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	d011      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fa4a 	bl	800b35c <RCCEx_PLL2_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	6239      	str	r1, [r7, #32]
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	d011      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efe:	3308      	adds	r3, #8
 8009f00:	2101      	movs	r1, #1
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fa2a 	bl	800b35c <RCCEx_PLL2_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	2100      	movs	r1, #0
 8009f28:	61b9      	str	r1, [r7, #24]
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f34:	460b      	mov	r3, r1
 8009f36:	4313      	orrs	r3, r2
 8009f38:	d011      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3e:	3308      	adds	r3, #8
 8009f40:	2102      	movs	r1, #2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fa0a 	bl	800b35c <RCCEx_PLL2_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	2100      	movs	r1, #0
 8009f68:	6139      	str	r1, [r7, #16]
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f74:	460b      	mov	r3, r1
 8009f76:	4313      	orrs	r3, r2
 8009f78:	d011      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f7e:	3328      	adds	r3, #40	@ 0x28
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 fa9c 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	f003 0310 	and.w	r3, r3, #16
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	d011      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fbe:	3328      	adds	r3, #40	@ 0x28
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 fa7c 	bl	800b4c0 <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	607b      	str	r3, [r7, #4]
 8009ff0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	d011      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffe:	3328      	adds	r3, #40	@ 0x28
 800a000:	2102      	movs	r1, #2
 800a002:	4618      	mov	r0, r3
 800a004:	f001 fa5c 	bl	800b4c0 <RCCEx_PLL3_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a00e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a01e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a032:	46bd      	mov	sp, r7
 800a034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a038:	58024400 	.word	0x58024400

0800a03c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b090      	sub	sp, #64	@ 0x40
 800a040:	af00      	add	r7, sp, #0
 800a042:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a04e:	430b      	orrs	r3, r1
 800a050:	f040 8094 	bne.w	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a054:	4b9e      	ldr	r3, [pc, #632]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a060:	2b04      	cmp	r3, #4
 800a062:	f200 8087 	bhi.w	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a0a9 	.word	0x0800a0a9
 800a074:	0800a0d1 	.word	0x0800a0d1
 800a078:	0800a16d 	.word	0x0800a16d
 800a07c:	0800a0f9 	.word	0x0800a0f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a080:	4b93      	ldr	r3, [pc, #588]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a08c:	d108      	bne.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a08e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a092:	4618      	mov	r0, r3
 800a094:	f001 f810 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a09c:	f000 bd45 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a4:	f000 bd41 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0a8:	4b89      	ldr	r3, [pc, #548]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0b4:	d108      	bne.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b6:	f107 0318 	add.w	r3, r7, #24
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fd54 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c4:	f000 bd31 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0cc:	f000 bd2d 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0d0:	4b7f      	ldr	r3, [pc, #508]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0dc:	d108      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0de:	f107 030c 	add.w	r3, r7, #12
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fe94 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ec:	f000 bd1d 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f4:	f000 bd19 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0f8:	4b75      	ldr	r3, [pc, #468]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a102:	4b73      	ldr	r3, [pc, #460]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d10c      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a10e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a110:	2b00      	cmp	r3, #0
 800a112:	d109      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a114:	4b6e      	ldr	r3, [pc, #440]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	08db      	lsrs	r3, r3, #3
 800a11a:	f003 0303 	and.w	r3, r3, #3
 800a11e:	4a6d      	ldr	r2, [pc, #436]	@ (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a120:	fa22 f303 	lsr.w	r3, r2, r3
 800a124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a126:	e01f      	b.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a128:	4b69      	ldr	r3, [pc, #420]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a134:	d106      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a13c:	d102      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a13e:	4b66      	ldr	r3, [pc, #408]	@ (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a142:	e011      	b.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a144:	4b62      	ldr	r3, [pc, #392]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a14c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a150:	d106      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a158:	d102      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a15a:	4b60      	ldr	r3, [pc, #384]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a15e:	e003      	b.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a164:	f000 bce1 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a168:	f000 bcdf 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a16c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a170:	f000 bcdb 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	f000 bcd7 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a180:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a184:	430b      	orrs	r3, r1
 800a186:	f040 80ad 	bne.w	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a18a:	4b51      	ldr	r3, [pc, #324]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a18c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a18e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a192:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a19a:	d056      	beq.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a2:	f200 8090 	bhi.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1aa:	f000 8088 	beq.w	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1b2:	f200 8088 	bhi.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ba:	d032      	beq.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	2b80      	cmp	r3, #128	@ 0x80
 800a1c0:	f200 8081 	bhi.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	2b40      	cmp	r3, #64	@ 0x40
 800a1ce:	d014      	beq.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a1d0:	e079      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1d2:	4b3f      	ldr	r3, [pc, #252]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1de:	d108      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 ff67 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ee:	f000 bc9c 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f6:	f000 bc98 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1fa:	4b35      	ldr	r3, [pc, #212]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a206:	d108      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a208:	f107 0318 	add.w	r3, r7, #24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 fcab 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a216:	f000 bc88 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a21e:	f000 bc84 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a222:	4b2b      	ldr	r3, [pc, #172]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a22a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22e:	d108      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a230:	f107 030c 	add.w	r3, r7, #12
 800a234:	4618      	mov	r0, r3
 800a236:	f000 fdeb 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23e:	f000 bc74 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a246:	f000 bc70 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a24a:	4b21      	ldr	r3, [pc, #132]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a24c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a24e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a254:	4b1e      	ldr	r3, [pc, #120]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d10c      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a266:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	08db      	lsrs	r3, r3, #3
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	4a18      	ldr	r2, [pc, #96]	@ (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a272:	fa22 f303 	lsr.w	r3, r2, r3
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a278:	e01f      	b.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a27a:	4b15      	ldr	r3, [pc, #84]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a286:	d106      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a28e:	d102      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a290:	4b11      	ldr	r3, [pc, #68]	@ (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a294:	e011      	b.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a296:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a29e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a2:	d106      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2aa:	d102      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2b0:	e003      	b.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2b6:	f000 bc38 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2ba:	f000 bc36 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2be:	4b08      	ldr	r3, [pc, #32]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c2:	f000 bc32 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ca:	f000 bc2e 	b.w	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a2ce:	bf00      	nop
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	03d09000 	.word	0x03d09000
 800a2d8:	003d0900 	.word	0x003d0900
 800a2dc:	017d7840 	.word	0x017d7840
 800a2e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	f040 809c 	bne.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a2f2:	4b9e      	ldr	r3, [pc, #632]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a2fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a302:	d054      	beq.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a306:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a30a:	f200 808b 	bhi.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a314:	f000 8083 	beq.w	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a31e:	f200 8081 	bhi.w	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a328:	d02f      	beq.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a330:	d878      	bhi.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a33e:	d012      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a340:	e070      	b.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a342:	4b8a      	ldr	r3, [pc, #552]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a34a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a34e:	d107      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a354:	4618      	mov	r0, r3
 800a356:	f000 feaf 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35e:	e3e4      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a364:	e3e1      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a366:	4b81      	ldr	r3, [pc, #516]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a36e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a372:	d107      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a374:	f107 0318 	add.w	r3, r7, #24
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fbf5 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a382:	e3d2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a388:	e3cf      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a38a:	4b78      	ldr	r3, [pc, #480]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a396:	d107      	bne.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a398:	f107 030c 	add.w	r3, r7, #12
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 fd37 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3a6:	e3c0      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ac:	e3bd      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ae:	4b6f      	ldr	r3, [pc, #444]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3b8:	4b6c      	ldr	r3, [pc, #432]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d10c      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3ca:	4b68      	ldr	r3, [pc, #416]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	08db      	lsrs	r3, r3, #3
 800a3d0:	f003 0303 	and.w	r3, r3, #3
 800a3d4:	4a66      	ldr	r2, [pc, #408]	@ (800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3dc:	e01e      	b.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3de:	4b63      	ldr	r3, [pc, #396]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ea:	d106      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3f2:	d102      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3f4:	4b5f      	ldr	r3, [pc, #380]	@ (800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f8:	e010      	b.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3fa:	4b5c      	ldr	r3, [pc, #368]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a40e:	d102      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a410:	4b59      	ldr	r3, [pc, #356]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a414:	e002      	b.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a41a:	e386      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a41c:	e385      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a41e:	4b57      	ldr	r3, [pc, #348]	@ (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a422:	e382      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a428:	e37f      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a42a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a42e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a432:	430b      	orrs	r3, r1
 800a434:	f040 80a7 	bne.w	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a438:	4b4c      	ldr	r3, [pc, #304]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a43a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a43c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a440:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a448:	d055      	beq.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a450:	f200 8096 	bhi.w	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a456:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a45a:	f000 8084 	beq.w	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a464:	f200 808c 	bhi.w	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46e:	d030      	beq.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a476:	f200 8083 	bhi.w	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d004      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a486:	d012      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a488:	e07a      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a48a:	4b38      	ldr	r3, [pc, #224]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a496:	d107      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fe0b 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a6:	e340      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e33d      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4bc:	f107 0318 	add.w	r3, r7, #24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fb51 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ca:	e32e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d0:	e32b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4d2:	4b26      	ldr	r3, [pc, #152]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4de:	d107      	bne.n	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fc93 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ee:	e31c      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f4:	e319      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a500:	4b1a      	ldr	r3, [pc, #104]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d10c      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d109      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a512:	4b16      	ldr	r3, [pc, #88]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	08db      	lsrs	r3, r3, #3
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	4a14      	ldr	r2, [pc, #80]	@ (800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a51e:	fa22 f303 	lsr.w	r3, r2, r3
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a524:	e01e      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a526:	4b11      	ldr	r3, [pc, #68]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a52e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a532:	d106      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a53a:	d102      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a53c:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a540:	e010      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a542:	4b0a      	ldr	r3, [pc, #40]	@ (800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a54a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a54e:	d106      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a556:	d102      	bne.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a558:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a55c:	e002      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a562:	e2e2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a564:	e2e1      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a566:	4b05      	ldr	r3, [pc, #20]	@ (800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56a:	e2de      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a56c:	58024400 	.word	0x58024400
 800a570:	03d09000 	.word	0x03d09000
 800a574:	003d0900 	.word	0x003d0900
 800a578:	017d7840 	.word	0x017d7840
 800a57c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a584:	e2d1      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a58a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a58e:	430b      	orrs	r3, r1
 800a590:	f040 809c 	bne.w	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a594:	4b93      	ldr	r3, [pc, #588]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a598:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a59c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5a4:	d054      	beq.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5ac:	f200 808b 	bhi.w	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5b6:	f000 8083 	beq.w	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5c0:	f200 8081 	bhi.w	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5ca:	d02f      	beq.n	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5d2:	d878      	bhi.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d004      	beq.n	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5e0:	d012      	beq.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a5e2:	e070      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5e4:	4b7f      	ldr	r3, [pc, #508]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5f0:	d107      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fd5e 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a600:	e293      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a606:	e290      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a608:	4b76      	ldr	r3, [pc, #472]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a614:	d107      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a616:	f107 0318 	add.w	r3, r7, #24
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 faa4 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a624:	e281      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62a:	e27e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a62c:	4b6d      	ldr	r3, [pc, #436]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a638:	d107      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 fbe6 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a648:	e26f      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64e:	e26c      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a650:	4b64      	ldr	r3, [pc, #400]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a658:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a65a:	4b62      	ldr	r3, [pc, #392]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	2b04      	cmp	r3, #4
 800a664:	d10c      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d109      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a66c:	4b5d      	ldr	r3, [pc, #372]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	4a5c      	ldr	r2, [pc, #368]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67e:	e01e      	b.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a680:	4b58      	ldr	r3, [pc, #352]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a68c:	d106      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a694:	d102      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a696:	4b55      	ldr	r3, [pc, #340]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a69a:	e010      	b.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a69c:	4b51      	ldr	r3, [pc, #324]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6a8:	d106      	bne.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a6aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6b0:	d102      	bne.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b6:	e002      	b.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6bc:	e235      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6be:	e234      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6c0:	4b4c      	ldr	r3, [pc, #304]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c4:	e231      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ca:	e22e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a6cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a6d4:	430b      	orrs	r3, r1
 800a6d6:	f040 808f 	bne.w	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a6da:	4b42      	ldr	r3, [pc, #264]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6de:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6ea:	d06b      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6f2:	d874      	bhi.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6fa:	d056      	beq.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a702:	d86c      	bhi.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a70a:	d03b      	beq.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a712:	d864      	bhi.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a71a:	d021      	beq.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a722:	d85c      	bhi.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a730:	d004      	beq.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a732:	e054      	b.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a734:	f7fe fa4c 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800a738:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a73a:	e1f6      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a73c:	4b29      	ldr	r3, [pc, #164]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a748:	d107      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74a:	f107 0318 	add.w	r3, r7, #24
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fa0a 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a758:	e1e7      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75e:	e1e4      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a760:	4b20      	ldr	r3, [pc, #128]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a76c:	d107      	bne.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a76e:	f107 030c 	add.w	r3, r7, #12
 800a772:	4618      	mov	r0, r3
 800a774:	f000 fb4c 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77c:	e1d5      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a782:	e1d2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a784:	4b17      	ldr	r3, [pc, #92]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d109      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a790:	4b14      	ldr	r3, [pc, #80]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	4a13      	ldr	r2, [pc, #76]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a79c:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a2:	e1c2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a8:	e1bf      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b6:	d102      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7bc:	e1b5      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c2:	e1b2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7c4:	4b07      	ldr	r3, [pc, #28]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7d0:	d102      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a7d2:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d6:	e1a8      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e1a5      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e2:	e1a2      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7e4:	58024400 	.word	0x58024400
 800a7e8:	03d09000 	.word	0x03d09000
 800a7ec:	003d0900 	.word	0x003d0900
 800a7f0:	017d7840 	.word	0x017d7840
 800a7f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7fc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a800:	430b      	orrs	r3, r1
 800a802:	d173      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a804:	4b9c      	ldr	r3, [pc, #624]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a80c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a814:	d02f      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a81c:	d863      	bhi.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d004      	beq.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a82a:	d012      	beq.n	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a82c:	e05b      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82e:	4b92      	ldr	r3, [pc, #584]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a83a:	d107      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83c:	f107 0318 	add.w	r3, r7, #24
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f991 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a84a:	e16e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84c:	2300      	movs	r3, #0
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e16b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a852:	4b89      	ldr	r3, [pc, #548]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85e:	d107      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a860:	f107 030c 	add.w	r3, r7, #12
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fad3 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86e:	e15c      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a874:	e159      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a876:	4b80      	ldr	r3, [pc, #512]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a87a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a880:	4b7d      	ldr	r3, [pc, #500]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d10c      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d109      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a892:	4b79      	ldr	r3, [pc, #484]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	08db      	lsrs	r3, r3, #3
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	4a77      	ldr	r2, [pc, #476]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8a4:	e01e      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8a6:	4b74      	ldr	r3, [pc, #464]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8b2:	d106      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ba:	d102      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8bc:	4b70      	ldr	r3, [pc, #448]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8c0:	e010      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c2:	4b6d      	ldr	r3, [pc, #436]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ce:	d106      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8d6:	d102      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8d8:	4b6a      	ldr	r3, [pc, #424]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8dc:	e002      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8e2:	e122      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8e4:	e121      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ea:	e11e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a8ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8f0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	d133      	bne.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a8f8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a900:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	d004      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a90e:	d012      	beq.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a910:	e023      	b.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a912:	4b59      	ldr	r3, [pc, #356]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a91a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a91e:	d107      	bne.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fbc7 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92e:	e0fc      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a934:	e0f9      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a936:	4b50      	ldr	r3, [pc, #320]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a93e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a942:	d107      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a944:	f107 0318 	add.w	r3, r7, #24
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f90d 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a952:	e0ea      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a958:	e0e7      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a95e:	e0e4      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a964:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a968:	430b      	orrs	r3, r1
 800a96a:	f040 808d 	bne.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a96e:	4b42      	ldr	r3, [pc, #264]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a972:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a976:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a97e:	d06b      	beq.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a986:	d874      	bhi.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a98e:	d056      	beq.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a996:	d86c      	bhi.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a99e:	d03b      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9a6:	d864      	bhi.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ae:	d021      	beq.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9b6:	d85c      	bhi.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9c4:	d004      	beq.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a9c6:	e054      	b.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a9c8:	f000 f8b8 	bl	800ab3c <HAL_RCCEx_GetD3PCLK1Freq>
 800a9cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9ce:	e0ac      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9d0:	4b29      	ldr	r3, [pc, #164]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9dc:	d107      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9de:	f107 0318 	add.w	r3, r7, #24
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f8c0 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ec:	e09d      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f2:	e09a      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9f4:	4b20      	ldr	r3, [pc, #128]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa00:	d107      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa02:	f107 030c 	add.w	r3, r7, #12
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fa02 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa10:	e08b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa16:	e088      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa18:	4b17      	ldr	r3, [pc, #92]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d109      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa24:	4b14      	ldr	r3, [pc, #80]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a13      	ldr	r2, [pc, #76]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa36:	e078      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3c:	e075      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa3e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa4a:	d102      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aa4c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa50:	e06b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa56:	e068      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa58:	4b07      	ldr	r3, [pc, #28]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa64:	d102      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aa66:	4b07      	ldr	r3, [pc, #28]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa6a:	e05e      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa70:	e05b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa76:	e058      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	03d09000 	.word	0x03d09000
 800aa80:	003d0900 	.word	0x003d0900
 800aa84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aa90:	430b      	orrs	r3, r1
 800aa92:	d148      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa94:	4b27      	ldr	r3, [pc, #156]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aa96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaa4:	d02a      	beq.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaac:	d838      	bhi.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d004      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaba:	d00d      	beq.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800aabc:	e030      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aabe:	4b1d      	ldr	r3, [pc, #116]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaca:	d102      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800aacc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad0:	e02b      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad6:	e028      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aad8:	4b16      	ldr	r3, [pc, #88]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aae4:	d107      	bne.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fae4 	bl	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf4:	e019      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafa:	e016      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aafc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab08:	d107      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab0a:	f107 0318 	add.w	r3, r7, #24
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f82a 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	e007      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e004      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab24:	e001      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3740      	adds	r7, #64	@ 0x40
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	58024400 	.word	0x58024400
 800ab38:	017d7840 	.word	0x017d7840

0800ab3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab40:	f7fe f816 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	091b      	lsrs	r3, r3, #4
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	4904      	ldr	r1, [pc, #16]	@ (800ab64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	f003 031f 	and.w	r3, r3, #31
 800ab58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	58024400 	.word	0x58024400
 800ab64:	0800f638 	.word	0x0800f638

0800ab68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b089      	sub	sp, #36	@ 0x24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab70:	4ba1      	ldr	r3, [pc, #644]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ab7a:	4b9f      	ldr	r3, [pc, #636]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7e:	0b1b      	lsrs	r3, r3, #12
 800ab80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab86:	4b9c      	ldr	r3, [pc, #624]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8a:	091b      	lsrs	r3, r3, #4
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ab92:	4b99      	ldr	r3, [pc, #612]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab96:	08db      	lsrs	r3, r3, #3
 800ab98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 8111 	beq.w	800add8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	f000 8083 	beq.w	800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	f200 80a1 	bhi.w	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d056      	beq.n	800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800abd2:	e099      	b.n	800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd4:	4b88      	ldr	r3, [pc, #544]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d02d      	beq.n	800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abe0:	4b85      	ldr	r3, [pc, #532]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	08db      	lsrs	r3, r3, #3
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	4a84      	ldr	r2, [pc, #528]	@ (800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800abec:	fa22 f303 	lsr.w	r3, r2, r3
 800abf0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	ee07 3a90 	vmov	s15, r3
 800abf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	ee07 3a90 	vmov	s15, r3
 800ac02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac0a:	4b7b      	ldr	r3, [pc, #492]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac12:	ee07 3a90 	vmov	s15, r3
 800ac16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac3a:	e087      	b.n	800ad4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac4e:	4b6a      	ldr	r3, [pc, #424]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac7e:	e065      	b.n	800ad4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b59      	ldr	r3, [pc, #356]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acc2:	e043      	b.n	800ad4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b48      	ldr	r3, [pc, #288]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad06:	e021      	b.n	800ad4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1a:	4b37      	ldr	r3, [pc, #220]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad4c:	4b2a      	ldr	r3, [pc, #168]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad50:	0a5b      	lsrs	r3, r3, #9
 800ad52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad72:	ee17 2a90 	vmov	r2, s15
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ad7a:	4b1f      	ldr	r3, [pc, #124]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad7e:	0c1b      	lsrs	r3, r3, #16
 800ad80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad84:	ee07 3a90 	vmov	s15, r3
 800ad88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada0:	ee17 2a90 	vmov	r2, s15
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ada8:	4b13      	ldr	r3, [pc, #76]	@ (800adf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adac:	0e1b      	lsrs	r3, r3, #24
 800adae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adce:	ee17 2a90 	vmov	r2, s15
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800add6:	e008      	b.n	800adea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	609a      	str	r2, [r3, #8]
}
 800adea:	bf00      	nop
 800adec:	3724      	adds	r7, #36	@ 0x24
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	58024400 	.word	0x58024400
 800adfc:	03d09000 	.word	0x03d09000
 800ae00:	46000000 	.word	0x46000000
 800ae04:	4c742400 	.word	0x4c742400
 800ae08:	4a742400 	.word	0x4a742400
 800ae0c:	4bbebc20 	.word	0x4bbebc20

0800ae10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b089      	sub	sp, #36	@ 0x24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae18:	4ba1      	ldr	r3, [pc, #644]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae22:	4b9f      	ldr	r3, [pc, #636]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae26:	0d1b      	lsrs	r3, r3, #20
 800ae28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae2e:	4b9c      	ldr	r3, [pc, #624]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae3a:	4b99      	ldr	r3, [pc, #612]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae3e:	08db      	lsrs	r3, r3, #3
 800ae40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	fb02 f303 	mul.w	r3, r2, r3
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 8111 	beq.w	800b080 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	f000 8083 	beq.w	800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	f200 80a1 	bhi.w	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d056      	beq.n	800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae7a:	e099      	b.n	800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae7c:	4b88      	ldr	r3, [pc, #544]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0320 	and.w	r3, r3, #32
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d02d      	beq.n	800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae88:	4b85      	ldr	r3, [pc, #532]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	08db      	lsrs	r3, r3, #3
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	4a84      	ldr	r2, [pc, #528]	@ (800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae94:	fa22 f303 	lsr.w	r3, r2, r3
 800ae98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	ee07 3a90 	vmov	s15, r3
 800aea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeb2:	4b7b      	ldr	r3, [pc, #492]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aec6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aede:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aee2:	e087      	b.n	800aff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef6:	4b6a      	ldr	r3, [pc, #424]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af06:	ed97 6a03 	vldr	s12, [r7, #12]
 800af0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af26:	e065      	b.n	800aff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af3a:	4b59      	ldr	r3, [pc, #356]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af6a:	e043      	b.n	800aff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af7e:	4b48      	ldr	r3, [pc, #288]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afae:	e021      	b.n	800aff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afc2:	4b37      	ldr	r3, [pc, #220]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aff4:	4b2a      	ldr	r3, [pc, #168]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff8:	0a5b      	lsrs	r3, r3, #9
 800affa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b00a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01a:	ee17 2a90 	vmov	r2, s15
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b022:	4b1f      	ldr	r3, [pc, #124]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02c:	ee07 3a90 	vmov	s15, r3
 800b030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b03c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b048:	ee17 2a90 	vmov	r2, s15
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b050:	4b13      	ldr	r3, [pc, #76]	@ (800b0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b054:	0e1b      	lsrs	r3, r3, #24
 800b056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b06a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b06e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b076:	ee17 2a90 	vmov	r2, s15
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b07e:	e008      	b.n	800b092 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	609a      	str	r2, [r3, #8]
}
 800b092:	bf00      	nop
 800b094:	3724      	adds	r7, #36	@ 0x24
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	58024400 	.word	0x58024400
 800b0a4:	03d09000 	.word	0x03d09000
 800b0a8:	46000000 	.word	0x46000000
 800b0ac:	4c742400 	.word	0x4c742400
 800b0b0:	4a742400 	.word	0x4a742400
 800b0b4:	4bbebc20 	.word	0x4bbebc20

0800b0b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b089      	sub	sp, #36	@ 0x24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0c0:	4ba0      	ldr	r3, [pc, #640]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c4:	f003 0303 	and.w	r3, r3, #3
 800b0c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b0ca:	4b9e      	ldr	r3, [pc, #632]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ce:	091b      	lsrs	r3, r3, #4
 800b0d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b0d6:	4b9b      	ldr	r3, [pc, #620]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b0e0:	4b98      	ldr	r3, [pc, #608]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e4:	08db      	lsrs	r3, r3, #3
 800b0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	fb02 f303 	mul.w	r3, r2, r3
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 8111 	beq.w	800b326 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	2b02      	cmp	r3, #2
 800b108:	f000 8083 	beq.w	800b212 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	f200 80a1 	bhi.w	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d056      	beq.n	800b1ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b120:	e099      	b.n	800b256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b122:	4b88      	ldr	r3, [pc, #544]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0320 	and.w	r3, r3, #32
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d02d      	beq.n	800b18a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b12e:	4b85      	ldr	r3, [pc, #532]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	08db      	lsrs	r3, r3, #3
 800b134:	f003 0303 	and.w	r3, r3, #3
 800b138:	4a83      	ldr	r2, [pc, #524]	@ (800b348 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b13a:	fa22 f303 	lsr.w	r3, r2, r3
 800b13e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	ee07 3a90 	vmov	s15, r3
 800b150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b158:	4b7a      	ldr	r3, [pc, #488]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b160:	ee07 3a90 	vmov	s15, r3
 800b164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b168:	ed97 6a03 	vldr	s12, [r7, #12]
 800b16c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b184:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b188:	e087      	b.n	800b29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b19c:	4b69      	ldr	r3, [pc, #420]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b19e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1cc:	e065      	b.n	800b29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b354 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e0:	4b58      	ldr	r3, [pc, #352]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b200:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b210:	e043      	b.n	800b29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b358 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b224:	4b47      	ldr	r3, [pc, #284]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b234:	ed97 6a03 	vldr	s12, [r7, #12]
 800b238:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b254:	e021      	b.n	800b29a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	ee07 3a90 	vmov	s15, r3
 800b25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b260:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b268:	4b36      	ldr	r3, [pc, #216]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b270:	ee07 3a90 	vmov	s15, r3
 800b274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b278:	ed97 6a03 	vldr	s12, [r7, #12]
 800b27c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b34c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b298:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b29a:	4b2a      	ldr	r3, [pc, #168]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29e:	0a5b      	lsrs	r3, r3, #9
 800b2a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2c0:	ee17 2a90 	vmov	r2, s15
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b2c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2cc:	0c1b      	lsrs	r3, r3, #16
 800b2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ee:	ee17 2a90 	vmov	r2, s15
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b2f6:	4b13      	ldr	r3, [pc, #76]	@ (800b344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2fa:	0e1b      	lsrs	r3, r3, #24
 800b2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b300:	ee07 3a90 	vmov	s15, r3
 800b304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b310:	edd7 6a07 	vldr	s13, [r7, #28]
 800b314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b31c:	ee17 2a90 	vmov	r2, s15
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b324:	e008      	b.n	800b338 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	609a      	str	r2, [r3, #8]
}
 800b338:	bf00      	nop
 800b33a:	3724      	adds	r7, #36	@ 0x24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	58024400 	.word	0x58024400
 800b348:	03d09000 	.word	0x03d09000
 800b34c:	46000000 	.word	0x46000000
 800b350:	4c742400 	.word	0x4c742400
 800b354:	4a742400 	.word	0x4a742400
 800b358:	4bbebc20 	.word	0x4bbebc20

0800b35c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b36a:	4b53      	ldr	r3, [pc, #332]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b03      	cmp	r3, #3
 800b374:	d101      	bne.n	800b37a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e099      	b.n	800b4ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b37a:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b380:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b386:	f7f8 fe5f 	bl	8004048 <HAL_GetTick>
 800b38a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b38c:	e008      	b.n	800b3a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b38e:	f7f8 fe5b 	bl	8004048 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d901      	bls.n	800b3a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e086      	b.n	800b4ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3a0:	4b45      	ldr	r3, [pc, #276]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1f0      	bne.n	800b38e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3ac:	4b42      	ldr	r3, [pc, #264]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	031b      	lsls	r3, r3, #12
 800b3ba:	493f      	ldr	r1, [pc, #252]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	025b      	lsls	r3, r3, #9
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	041b      	lsls	r3, r3, #16
 800b3de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3e2:	431a      	orrs	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	061b      	lsls	r3, r3, #24
 800b3ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3f0:	4931      	ldr	r1, [pc, #196]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b3f6:	4b30      	ldr	r3, [pc, #192]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	492d      	ldr	r1, [pc, #180]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b404:	4313      	orrs	r3, r2
 800b406:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b408:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	f023 0220 	bic.w	r2, r3, #32
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	4928      	ldr	r1, [pc, #160]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b416:	4313      	orrs	r3, r2
 800b418:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b41a:	4b27      	ldr	r3, [pc, #156]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a26      	ldr	r2, [pc, #152]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b420:	f023 0310 	bic.w	r3, r3, #16
 800b424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b426:	4b24      	ldr	r3, [pc, #144]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b42a:	4b24      	ldr	r3, [pc, #144]	@ (800b4bc <RCCEx_PLL2_Config+0x160>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	69d2      	ldr	r2, [r2, #28]
 800b432:	00d2      	lsls	r2, r2, #3
 800b434:	4920      	ldr	r1, [pc, #128]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b436:	4313      	orrs	r3, r2
 800b438:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b43a:	4b1f      	ldr	r3, [pc, #124]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43e:	4a1e      	ldr	r2, [pc, #120]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b440:	f043 0310 	orr.w	r3, r3, #16
 800b444:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b44c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b450:	4a19      	ldr	r2, [pc, #100]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b452:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b458:	e00f      	b.n	800b47a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d106      	bne.n	800b46e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b460:	4b15      	ldr	r3, [pc, #84]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b464:	4a14      	ldr	r2, [pc, #80]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b46a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b46c:	e005      	b.n	800b47a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b46e:	4b12      	ldr	r3, [pc, #72]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b472:	4a11      	ldr	r2, [pc, #68]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b478:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b47a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a0e      	ldr	r2, [pc, #56]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b480:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b486:	f7f8 fddf 	bl	8004048 <HAL_GetTick>
 800b48a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b48c:	e008      	b.n	800b4a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b48e:	f7f8 fddb 	bl	8004048 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d901      	bls.n	800b4a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e006      	b.n	800b4ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4a0:	4b05      	ldr	r3, [pc, #20]	@ (800b4b8 <RCCEx_PLL2_Config+0x15c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0f0      	beq.n	800b48e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	58024400 	.word	0x58024400
 800b4bc:	ffff0007 	.word	0xffff0007

0800b4c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4ce:	4b53      	ldr	r3, [pc, #332]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d101      	bne.n	800b4de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e099      	b.n	800b612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b4de:	4b4f      	ldr	r3, [pc, #316]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a4e      	ldr	r2, [pc, #312]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b4e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ea:	f7f8 fdad 	bl	8004048 <HAL_GetTick>
 800b4ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b4f0:	e008      	b.n	800b504 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4f2:	f7f8 fda9 	bl	8004048 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d901      	bls.n	800b504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e086      	b.n	800b612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b504:	4b45      	ldr	r3, [pc, #276]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f0      	bne.n	800b4f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b510:	4b42      	ldr	r3, [pc, #264]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b514:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	051b      	lsls	r3, r3, #20
 800b51e:	493f      	ldr	r1, [pc, #252]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b520:	4313      	orrs	r3, r2
 800b522:	628b      	str	r3, [r1, #40]	@ 0x28
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	3b01      	subs	r3, #1
 800b52a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	3b01      	subs	r3, #1
 800b534:	025b      	lsls	r3, r3, #9
 800b536:	b29b      	uxth	r3, r3
 800b538:	431a      	orrs	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	3b01      	subs	r3, #1
 800b540:	041b      	lsls	r3, r3, #16
 800b542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b546:	431a      	orrs	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	061b      	lsls	r3, r3, #24
 800b550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b554:	4931      	ldr	r1, [pc, #196]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b556:	4313      	orrs	r3, r2
 800b558:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b55a:	4b30      	ldr	r3, [pc, #192]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	492d      	ldr	r1, [pc, #180]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b56c:	4b2b      	ldr	r3, [pc, #172]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b570:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	4928      	ldr	r1, [pc, #160]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b57e:	4b27      	ldr	r3, [pc, #156]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	4a26      	ldr	r2, [pc, #152]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b58a:	4b24      	ldr	r3, [pc, #144]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b58e:	4b24      	ldr	r3, [pc, #144]	@ (800b620 <RCCEx_PLL3_Config+0x160>)
 800b590:	4013      	ands	r3, r2
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	69d2      	ldr	r2, [r2, #28]
 800b596:	00d2      	lsls	r2, r2, #3
 800b598:	4920      	ldr	r1, [pc, #128]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b59a:	4313      	orrs	r3, r2
 800b59c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b59e:	4b1f      	ldr	r3, [pc, #124]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b4:	4a19      	ldr	r2, [pc, #100]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b5ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5bc:	e00f      	b.n	800b5de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d106      	bne.n	800b5d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b5c4:	4b15      	ldr	r3, [pc, #84]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c8:	4a14      	ldr	r2, [pc, #80]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b5ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5d0:	e005      	b.n	800b5de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b5d2:	4b12      	ldr	r3, [pc, #72]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d6:	4a11      	ldr	r2, [pc, #68]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b5de:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b5e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ea:	f7f8 fd2d 	bl	8004048 <HAL_GetTick>
 800b5ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b5f0:	e008      	b.n	800b604 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5f2:	f7f8 fd29 	bl	8004048 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d901      	bls.n	800b604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e006      	b.n	800b612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b604:	4b05      	ldr	r3, [pc, #20]	@ (800b61c <RCCEx_PLL3_Config+0x15c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0f0      	beq.n	800b5f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	58024400 	.word	0x58024400
 800b620:	ffff0007 	.word	0xffff0007

0800b624 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d071      	beq.n	800b71a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7f8 f84e 	bl	80036ec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b10      	cmp	r3, #16
 800b664:	d050      	beq.n	800b708 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	22ca      	movs	r2, #202	@ 0xca
 800b66c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2253      	movs	r2, #83	@ 0x53
 800b674:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f87a 	bl	800b770 <RTC_EnterInitMode>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b680:	7bfb      	ldrb	r3, [r7, #15]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d124      	bne.n	800b6d0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6899      	ldr	r1, [r3, #8]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	4b24      	ldr	r3, [pc, #144]	@ (800b724 <HAL_RTC_Init+0x100>)
 800b692:	400b      	ands	r3, r1
 800b694:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6899      	ldr	r1, [r3, #8]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	430a      	orrs	r2, r1
 800b6b2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0419      	lsls	r1, r3, #16
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68da      	ldr	r2, [r3, #12]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f886 	bl	800b7d8 <RTC_ExitInitMode>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d113      	bne.n	800b6fe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f022 0203 	bic.w	r2, r2, #3
 800b6e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	69da      	ldr	r2, [r3, #28]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	430a      	orrs	r2, r1
 800b6fc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	22ff      	movs	r2, #255	@ 0xff
 800b704:	625a      	str	r2, [r3, #36]	@ 0x24
 800b706:	e001      	b.n	800b70c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d103      	bne.n	800b71a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	ff8fffbf 	.word	0xff8fffbf

0800b728 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a0d      	ldr	r2, [pc, #52]	@ (800b76c <HAL_RTC_WaitForSynchro+0x44>)
 800b736:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800b738:	f7f8 fc86 	bl	8004048 <HAL_GetTick>
 800b73c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b73e:	e009      	b.n	800b754 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b740:	f7f8 fc82 	bl	8004048 <HAL_GetTick>
 800b744:	4602      	mov	r2, r0
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b74e:	d901      	bls.n	800b754 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e007      	b.n	800b764 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0ee      	beq.n	800b740 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	0003ff5f 	.word	0x0003ff5f

0800b770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b786:	2b00      	cmp	r3, #0
 800b788:	d120      	bne.n	800b7cc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f04f 32ff 	mov.w	r2, #4294967295
 800b792:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b794:	f7f8 fc58 	bl	8004048 <HAL_GetTick>
 800b798:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b79a:	e00d      	b.n	800b7b8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b79c:	f7f8 fc54 	bl	8004048 <HAL_GetTick>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b7aa:	d905      	bls.n	800b7b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2203      	movs	r2, #3
 800b7b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <RTC_EnterInitMode+0x5c>
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d1e7      	bne.n	800b79c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	4a19      	ldr	r2, [pc, #100]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b7ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ee:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b7f0:	4b17      	ldr	r3, [pc, #92]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10c      	bne.n	800b816 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff ff93 	bl	800b728 <HAL_RTC_WaitForSynchro>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01e      	beq.n	800b846 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2203      	movs	r2, #3
 800b80c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	73fb      	strb	r3, [r7, #15]
 800b814:	e017      	b.n	800b846 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b816:	4b0e      	ldr	r3, [pc, #56]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	4a0d      	ldr	r2, [pc, #52]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b81c:	f023 0320 	bic.w	r3, r3, #32
 800b820:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff80 	bl	800b728 <HAL_RTC_WaitForSynchro>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2203      	movs	r2, #3
 800b832:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b83a:	4b05      	ldr	r3, [pc, #20]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	4a04      	ldr	r2, [pc, #16]	@ (800b850 <RTC_ExitInitMode+0x78>)
 800b840:	f043 0320 	orr.w	r3, r3, #32
 800b844:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b846:	7bfb      	ldrb	r3, [r7, #15]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	58004000 	.word	0x58004000

0800b854 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	@ 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	e28e      	b.n	800bd84 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b866:	f7f8 fc1f 	bl	80040a8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b870:	2b01      	cmp	r3, #1
 800b872:	d113      	bne.n	800b89c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a96      	ldr	r2, [pc, #600]	@ (800bad4 <HAL_SAI_Init+0x280>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d004      	beq.n	800b888 <HAL_SAI_Init+0x34>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a95      	ldr	r2, [pc, #596]	@ (800bad8 <HAL_SAI_Init+0x284>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d107      	bne.n	800b898 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d103      	bne.n	800b898 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e273      	b.n	800bd84 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a8c      	ldr	r2, [pc, #560]	@ (800bad4 <HAL_SAI_Init+0x280>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <HAL_SAI_Init+0x5c>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a8c      	ldr	r2, [pc, #560]	@ (800badc <HAL_SAI_Init+0x288>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d102      	bne.n	800b8b6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b8b0:	4b8b      	ldr	r3, [pc, #556]	@ (800bae0 <HAL_SAI_Init+0x28c>)
 800b8b2:	61bb      	str	r3, [r7, #24]
 800b8b4:	e028      	b.n	800b908 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a8a      	ldr	r2, [pc, #552]	@ (800bae4 <HAL_SAI_Init+0x290>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d004      	beq.n	800b8ca <HAL_SAI_Init+0x76>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a88      	ldr	r2, [pc, #544]	@ (800bae8 <HAL_SAI_Init+0x294>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d102      	bne.n	800b8d0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b8ca:	4b88      	ldr	r3, [pc, #544]	@ (800baec <HAL_SAI_Init+0x298>)
 800b8cc:	61bb      	str	r3, [r7, #24]
 800b8ce:	e01b      	b.n	800b908 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a86      	ldr	r2, [pc, #536]	@ (800baf0 <HAL_SAI_Init+0x29c>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d004      	beq.n	800b8e4 <HAL_SAI_Init+0x90>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a85      	ldr	r2, [pc, #532]	@ (800baf4 <HAL_SAI_Init+0x2a0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d102      	bne.n	800b8ea <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b8e4:	4b84      	ldr	r3, [pc, #528]	@ (800baf8 <HAL_SAI_Init+0x2a4>)
 800b8e6:	61bb      	str	r3, [r7, #24]
 800b8e8:	e00e      	b.n	800b908 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a7a      	ldr	r2, [pc, #488]	@ (800bad8 <HAL_SAI_Init+0x284>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d004      	beq.n	800b8fe <HAL_SAI_Init+0xaa>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a80      	ldr	r2, [pc, #512]	@ (800bafc <HAL_SAI_Init+0x2a8>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d102      	bne.n	800b904 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b8fe:	4b80      	ldr	r3, [pc, #512]	@ (800bb00 <HAL_SAI_Init+0x2ac>)
 800b900:	61bb      	str	r3, [r7, #24]
 800b902:	e001      	b.n	800b908 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e23d      	b.n	800bd84 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7f8 f8e5 	bl	8003aec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fa40 	bl	800bda8 <SAI_Disable>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e228      	b.n	800bd84 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2202      	movs	r2, #2
 800b936:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d00c      	beq.n	800b95c <HAL_SAI_Init+0x108>
 800b942:	2b02      	cmp	r3, #2
 800b944:	d80d      	bhi.n	800b962 <HAL_SAI_Init+0x10e>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <HAL_SAI_Init+0xfc>
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d003      	beq.n	800b956 <HAL_SAI_Init+0x102>
 800b94e:	e008      	b.n	800b962 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b954:	e008      	b.n	800b968 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b956:	2310      	movs	r3, #16
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b95a:	e005      	b.n	800b968 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b95c:	2320      	movs	r3, #32
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b960:	e002      	b.n	800b968 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b966:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	2b05      	cmp	r3, #5
 800b96e:	d832      	bhi.n	800b9d6 <HAL_SAI_Init+0x182>
 800b970:	a201      	add	r2, pc, #4	@ (adr r2, 800b978 <HAL_SAI_Init+0x124>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b991 	.word	0x0800b991
 800b97c:	0800b997 	.word	0x0800b997
 800b980:	0800b99f 	.word	0x0800b99f
 800b984:	0800b9a7 	.word	0x0800b9a7
 800b988:	0800b9b7 	.word	0x0800b9b7
 800b98c:	0800b9c7 	.word	0x0800b9c7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]
      break;
 800b994:	e022      	b.n	800b9dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b99a:	61fb      	str	r3, [r7, #28]
      break;
 800b99c:	e01e      	b.n	800b9dc <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b99e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9a2:	61fb      	str	r3, [r7, #28]
      break;
 800b9a4:	e01a      	b.n	800b9dc <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b9a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9aa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9b4:	e012      	b.n	800b9dc <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b9b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9ba:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	f043 0302 	orr.w	r3, r3, #2
 800b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9c4:	e00a      	b.n	800b9dc <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b9c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b9ca:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	f043 0303 	orr.w	r3, r3, #3
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b9d4:	e002      	b.n	800b9dc <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]
      break;
 800b9da:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9e0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80c5 	beq.w	800bb76 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a37      	ldr	r2, [pc, #220]	@ (800bad4 <HAL_SAI_Init+0x280>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d004      	beq.n	800ba04 <HAL_SAI_Init+0x1b0>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a37      	ldr	r2, [pc, #220]	@ (800badc <HAL_SAI_Init+0x288>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d106      	bne.n	800ba12 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ba04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ba08:	f04f 0100 	mov.w	r1, #0
 800ba0c:	f7fe fb16 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba10:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a33      	ldr	r2, [pc, #204]	@ (800bae4 <HAL_SAI_Init+0x290>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d004      	beq.n	800ba26 <HAL_SAI_Init+0x1d2>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a31      	ldr	r2, [pc, #196]	@ (800bae8 <HAL_SAI_Init+0x294>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d106      	bne.n	800ba34 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800ba26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ba2a:	f04f 0100 	mov.w	r1, #0
 800ba2e:	f7fe fb05 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba32:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a2d      	ldr	r2, [pc, #180]	@ (800baf0 <HAL_SAI_Init+0x29c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d004      	beq.n	800ba48 <HAL_SAI_Init+0x1f4>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a2c      	ldr	r2, [pc, #176]	@ (800baf4 <HAL_SAI_Init+0x2a0>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d106      	bne.n	800ba56 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800ba48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ba4c:	f04f 0100 	mov.w	r1, #0
 800ba50:	f7fe faf4 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba54:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1f      	ldr	r2, [pc, #124]	@ (800bad8 <HAL_SAI_Init+0x284>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d106      	bne.n	800ba6e <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800ba60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ba64:	f04f 0100 	mov.w	r1, #0
 800ba68:	f7fe fae8 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba6c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a22      	ldr	r2, [pc, #136]	@ (800bafc <HAL_SAI_Init+0x2a8>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d106      	bne.n	800ba86 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800ba78:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ba7c:	f04f 0100 	mov.w	r1, #0
 800ba80:	f7fe fadc 	bl	800a03c <HAL_RCCEx_GetPeriphCLKFreq>
 800ba84:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	699b      	ldr	r3, [r3, #24]
 800ba8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ba8e:	d139      	bne.n	800bb04 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d102      	bne.n	800ba9e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800ba98:	2340      	movs	r3, #64	@ 0x40
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	e00a      	b.n	800bab4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baa2:	2b08      	cmp	r3, #8
 800baa4:	d103      	bne.n	800baae <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800baa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	e002      	b.n	800bab4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bab2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	4619      	mov	r1, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
 800baca:	fbb1 f3f3 	udiv	r3, r1, r3
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	e030      	b.n	800bb34 <HAL_SAI_Init+0x2e0>
 800bad2:	bf00      	nop
 800bad4:	40015804 	.word	0x40015804
 800bad8:	58005404 	.word	0x58005404
 800badc:	40015824 	.word	0x40015824
 800bae0:	40015800 	.word	0x40015800
 800bae4:	40015c04 	.word	0x40015c04
 800bae8:	40015c24 	.word	0x40015c24
 800baec:	40015c00 	.word	0x40015c00
 800baf0:	40016004 	.word	0x40016004
 800baf4:	40016024 	.word	0x40016024
 800baf8:	40016000 	.word	0x40016000
 800bafc:	58005424 	.word	0x58005424
 800bb00:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb0c:	d101      	bne.n	800bb12 <HAL_SAI_Init+0x2be>
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e000      	b.n	800bb14 <HAL_SAI_Init+0x2c0>
 800bb12:	2301      	movs	r3, #1
 800bb14:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	4619      	mov	r1, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	fb02 f303 	mul.w	r3, r2, r3
 800bb2c:	021b      	lsls	r3, r3, #8
 800bb2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb32:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	4a95      	ldr	r2, [pc, #596]	@ (800bd8c <HAL_SAI_Init+0x538>)
 800bb38:	fba2 2303 	umull	r2, r3, r2, r3
 800bb3c:	08da      	lsrs	r2, r3, #3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bb42:	6939      	ldr	r1, [r7, #16]
 800bb44:	4b91      	ldr	r3, [pc, #580]	@ (800bd8c <HAL_SAI_Init+0x538>)
 800bb46:	fba3 2301 	umull	r2, r3, r3, r1
 800bb4a:	08da      	lsrs	r2, r3, #3
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	1aca      	subs	r2, r1, r3
 800bb56:	2a08      	cmp	r2, #8
 800bb58:	d904      	bls.n	800bb64 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d104      	bne.n	800bb76 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb70:	085a      	lsrs	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_SAI_Init+0x332>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d109      	bne.n	800bb9a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d101      	bne.n	800bb92 <HAL_SAI_Init+0x33e>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e001      	b.n	800bb96 <HAL_SAI_Init+0x342>
 800bb92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb96:	623b      	str	r3, [r7, #32]
 800bb98:	e008      	b.n	800bbac <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d102      	bne.n	800bba8 <HAL_SAI_Init+0x354>
 800bba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bba6:	e000      	b.n	800bbaa <HAL_SAI_Init+0x356>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bbac:	f7f8 fa7c 	bl	80040a8 <HAL_GetREVID>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbb6:	d331      	bcc.n	800bc1c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6819      	ldr	r1, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	4b73      	ldr	r3, [pc, #460]	@ (800bd90 <HAL_SAI_Init+0x53c>)
 800bbc4:	400b      	ands	r3, r1
 800bbc6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6819      	ldr	r1, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbd6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bbdc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800bbf0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bbfc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc02:	051b      	lsls	r3, r3, #20
 800bc04:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bc0a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	430a      	orrs	r2, r1
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	e02d      	b.n	800bc78 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6819      	ldr	r1, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	4b5b      	ldr	r3, [pc, #364]	@ (800bd94 <HAL_SAI_Init+0x540>)
 800bc28:	400b      	ands	r3, r1
 800bc2a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc3a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc40:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc46:	431a      	orrs	r2, r3
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800bc54:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bc60:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc66:	051b      	lsls	r3, r3, #20
 800bc68:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bc6e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6859      	ldr	r1, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4b45      	ldr	r3, [pc, #276]	@ (800bd98 <HAL_SAI_Init+0x544>)
 800bc84:	400b      	ands	r3, r1
 800bc86:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6859      	ldr	r1, [r3, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69da      	ldr	r2, [r3, #28]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc96:	431a      	orrs	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc9c:	431a      	orrs	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	6899      	ldr	r1, [r3, #8]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	4b3a      	ldr	r3, [pc, #232]	@ (800bd9c <HAL_SAI_Init+0x548>)
 800bcb2:	400b      	ands	r3, r1
 800bcb4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6899      	ldr	r1, [r3, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcc0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bcc6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800bccc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800bcd2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bcdc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68d9      	ldr	r1, [r3, #12]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bcf4:	400b      	ands	r3, r1
 800bcf6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68d9      	ldr	r1, [r3, #12]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd06:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd0c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bd0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd14:	3b01      	subs	r3, #1
 800bd16:	021b      	lsls	r3, r3, #8
 800bd18:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a1e      	ldr	r2, [pc, #120]	@ (800bda0 <HAL_SAI_Init+0x54c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d004      	beq.n	800bd36 <HAL_SAI_Init+0x4e2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a1c      	ldr	r2, [pc, #112]	@ (800bda4 <HAL_SAI_Init+0x550>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d119      	bne.n	800bd6a <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3a:	f023 0201 	bic.w	r2, r3, #1
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10e      	bne.n	800bd6a <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd54:	3b01      	subs	r3, #1
 800bd56:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bd58:	431a      	orrs	r2, r3
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd62:	f043 0201 	orr.w	r2, r3, #1
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3728      	adds	r7, #40	@ 0x28
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	cccccccd 	.word	0xcccccccd
 800bd90:	f005c010 	.word	0xf005c010
 800bd94:	f805c010 	.word	0xf805c010
 800bd98:	ffff1ff0 	.word	0xffff1ff0
 800bd9c:	fff88000 	.word	0xfff88000
 800bda0:	40015804 	.word	0x40015804
 800bda4:	58005404 	.word	0x58005404

0800bda8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bdb0:	4b18      	ldr	r3, [pc, #96]	@ (800be14 <SAI_Disable+0x6c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a18      	ldr	r2, [pc, #96]	@ (800be18 <SAI_Disable+0x70>)
 800bdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdba:	0b1b      	lsrs	r3, r3, #12
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bdd2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bde0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	72fb      	strb	r3, [r7, #11]
      break;
 800bdee:	e009      	b.n	800be04 <SAI_Disable+0x5c>
    }
    count--;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1e7      	bne.n	800bdd4 <SAI_Disable+0x2c>

  return status;
 800be04:	7afb      	ldrb	r3, [r7, #11]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	24000000 	.word	0x24000000
 800be18:	95cbec1b 	.word	0x95cbec1b

0800be1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e02b      	b.n	800be88 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d106      	bne.n	800be4a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7f7 fe47 	bl	8003ad8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2202      	movs	r2, #2
 800be4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3304      	adds	r3, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f001 fd15 	bl	800d88c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	461a      	mov	r2, r3
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	f001 fd69 	bl	800d944 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800be72:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <HAL_SDRAM_Init+0x74>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a06      	ldr	r2, [pc, #24]	@ (800be90 <HAL_SDRAM_Init+0x74>)
 800be78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be7c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	52004000 	.word	0x52004000

0800be94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e049      	b.n	800bf3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beac:	b2db      	uxtb	r3, r3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7f7 fc48 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3304      	adds	r3, #4
 800bed0:	4619      	mov	r1, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	f000 f99e 	bl	800c214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d001      	beq.n	800bf5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e04c      	b.n	800bff6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a26      	ldr	r2, [pc, #152]	@ (800c004 <HAL_TIM_Base_Start+0xc0>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d022      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf76:	d01d      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a22      	ldr	r2, [pc, #136]	@ (800c008 <HAL_TIM_Base_Start+0xc4>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d018      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a21      	ldr	r2, [pc, #132]	@ (800c00c <HAL_TIM_Base_Start+0xc8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d013      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a1f      	ldr	r2, [pc, #124]	@ (800c010 <HAL_TIM_Base_Start+0xcc>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d00e      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	@ (800c014 <HAL_TIM_Base_Start+0xd0>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d009      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a1c      	ldr	r2, [pc, #112]	@ (800c018 <HAL_TIM_Base_Start+0xd4>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d004      	beq.n	800bfb4 <HAL_TIM_Base_Start+0x70>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a1b      	ldr	r2, [pc, #108]	@ (800c01c <HAL_TIM_Base_Start+0xd8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d115      	bne.n	800bfe0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689a      	ldr	r2, [r3, #8]
 800bfba:	4b19      	ldr	r3, [pc, #100]	@ (800c020 <HAL_TIM_Base_Start+0xdc>)
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b06      	cmp	r3, #6
 800bfc4:	d015      	beq.n	800bff2 <HAL_TIM_Base_Start+0xae>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfcc:	d011      	beq.n	800bff2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f042 0201 	orr.w	r2, r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfde:	e008      	b.n	800bff2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0201 	orr.w	r2, r2, #1
 800bfee:	601a      	str	r2, [r3, #0]
 800bff0:	e000      	b.n	800bff4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	40010000 	.word	0x40010000
 800c008:	40000400 	.word	0x40000400
 800c00c:	40000800 	.word	0x40000800
 800c010:	40000c00 	.word	0x40000c00
 800c014:	40010400 	.word	0x40010400
 800c018:	40001800 	.word	0x40001800
 800c01c:	40014000 	.word	0x40014000
 800c020:	00010007 	.word	0x00010007

0800c024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_TIM_ConfigClockSource+0x1c>
 800c03c:	2302      	movs	r3, #2
 800c03e:	e0dc      	b.n	800c1fa <HAL_TIM_ConfigClockSource+0x1d6>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	4b6a      	ldr	r3, [pc, #424]	@ (800c204 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a64      	ldr	r2, [pc, #400]	@ (800c208 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c076:	4293      	cmp	r3, r2
 800c078:	f000 80a9 	beq.w	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c07c:	4a62      	ldr	r2, [pc, #392]	@ (800c208 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	f200 80ae 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c084:	4a61      	ldr	r2, [pc, #388]	@ (800c20c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	f000 80a1 	beq.w	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c08c:	4a5f      	ldr	r2, [pc, #380]	@ (800c20c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	f200 80a6 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c094:	4a5e      	ldr	r2, [pc, #376]	@ (800c210 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c096:	4293      	cmp	r3, r2
 800c098:	f000 8099 	beq.w	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c09c:	4a5c      	ldr	r2, [pc, #368]	@ (800c210 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	f200 809e 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c0a8:	f000 8091 	beq.w	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c0ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c0b0:	f200 8096 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0b8:	f000 8089 	beq.w	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c0bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0c0:	f200 808e 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0c8:	d03e      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x124>
 800c0ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0ce:	f200 8087 	bhi.w	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0d6:	f000 8086 	beq.w	800c1e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0de:	d87f      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0e0:	2b70      	cmp	r3, #112	@ 0x70
 800c0e2:	d01a      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0xf6>
 800c0e4:	2b70      	cmp	r3, #112	@ 0x70
 800c0e6:	d87b      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0e8:	2b60      	cmp	r3, #96	@ 0x60
 800c0ea:	d050      	beq.n	800c18e <HAL_TIM_ConfigClockSource+0x16a>
 800c0ec:	2b60      	cmp	r3, #96	@ 0x60
 800c0ee:	d877      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0f0:	2b50      	cmp	r3, #80	@ 0x50
 800c0f2:	d03c      	beq.n	800c16e <HAL_TIM_ConfigClockSource+0x14a>
 800c0f4:	2b50      	cmp	r3, #80	@ 0x50
 800c0f6:	d873      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0f8:	2b40      	cmp	r3, #64	@ 0x40
 800c0fa:	d058      	beq.n	800c1ae <HAL_TIM_ConfigClockSource+0x18a>
 800c0fc:	2b40      	cmp	r3, #64	@ 0x40
 800c0fe:	d86f      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c100:	2b30      	cmp	r3, #48	@ 0x30
 800c102:	d064      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c104:	2b30      	cmp	r3, #48	@ 0x30
 800c106:	d86b      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c108:	2b20      	cmp	r3, #32
 800c10a:	d060      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c10c:	2b20      	cmp	r3, #32
 800c10e:	d867      	bhi.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c110:	2b00      	cmp	r3, #0
 800c112:	d05c      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c114:	2b10      	cmp	r3, #16
 800c116:	d05a      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c118:	e062      	b.n	800c1e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c12a:	f000 f997 	bl	800c45c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c13c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	609a      	str	r2, [r3, #8]
      break;
 800c146:	e04f      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c158:	f000 f980 	bl	800c45c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c16a:	609a      	str	r2, [r3, #8]
      break;
 800c16c:	e03c      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c17a:	461a      	mov	r2, r3
 800c17c:	f000 f8f0 	bl	800c360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2150      	movs	r1, #80	@ 0x50
 800c186:	4618      	mov	r0, r3
 800c188:	f000 f94a 	bl	800c420 <TIM_ITRx_SetConfig>
      break;
 800c18c:	e02c      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c19a:	461a      	mov	r2, r3
 800c19c:	f000 f90f 	bl	800c3be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2160      	movs	r1, #96	@ 0x60
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f93a 	bl	800c420 <TIM_ITRx_SetConfig>
      break;
 800c1ac:	e01c      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f000 f8d0 	bl	800c360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2140      	movs	r1, #64	@ 0x40
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f92a 	bl	800c420 <TIM_ITRx_SetConfig>
      break;
 800c1cc:	e00c      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f000 f921 	bl	800c420 <TIM_ITRx_SetConfig>
      break;
 800c1de:	e003      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e4:	e000      	b.n	800c1e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c1e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	ffceff88 	.word	0xffceff88
 800c208:	00100040 	.word	0x00100040
 800c20c:	00100030 	.word	0x00100030
 800c210:	00100020 	.word	0x00100020

0800c214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a46      	ldr	r2, [pc, #280]	@ (800c340 <TIM_Base_SetConfig+0x12c>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d013      	beq.n	800c254 <TIM_Base_SetConfig+0x40>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c232:	d00f      	beq.n	800c254 <TIM_Base_SetConfig+0x40>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a43      	ldr	r2, [pc, #268]	@ (800c344 <TIM_Base_SetConfig+0x130>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00b      	beq.n	800c254 <TIM_Base_SetConfig+0x40>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a42      	ldr	r2, [pc, #264]	@ (800c348 <TIM_Base_SetConfig+0x134>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d007      	beq.n	800c254 <TIM_Base_SetConfig+0x40>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a41      	ldr	r2, [pc, #260]	@ (800c34c <TIM_Base_SetConfig+0x138>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d003      	beq.n	800c254 <TIM_Base_SetConfig+0x40>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a40      	ldr	r2, [pc, #256]	@ (800c350 <TIM_Base_SetConfig+0x13c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d108      	bne.n	800c266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c25a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4a35      	ldr	r2, [pc, #212]	@ (800c340 <TIM_Base_SetConfig+0x12c>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d01f      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c274:	d01b      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	4a32      	ldr	r2, [pc, #200]	@ (800c344 <TIM_Base_SetConfig+0x130>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d017      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a31      	ldr	r2, [pc, #196]	@ (800c348 <TIM_Base_SetConfig+0x134>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d013      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a30      	ldr	r2, [pc, #192]	@ (800c34c <TIM_Base_SetConfig+0x138>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d00f      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a2f      	ldr	r2, [pc, #188]	@ (800c350 <TIM_Base_SetConfig+0x13c>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d00b      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a2e      	ldr	r2, [pc, #184]	@ (800c354 <TIM_Base_SetConfig+0x140>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d007      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c358 <TIM_Base_SetConfig+0x144>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d003      	beq.n	800c2ae <TIM_Base_SetConfig+0x9a>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a2c      	ldr	r2, [pc, #176]	@ (800c35c <TIM_Base_SetConfig+0x148>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d108      	bne.n	800c2c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a16      	ldr	r2, [pc, #88]	@ (800c340 <TIM_Base_SetConfig+0x12c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d00f      	beq.n	800c30c <TIM_Base_SetConfig+0xf8>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a18      	ldr	r2, [pc, #96]	@ (800c350 <TIM_Base_SetConfig+0x13c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d00b      	beq.n	800c30c <TIM_Base_SetConfig+0xf8>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a17      	ldr	r2, [pc, #92]	@ (800c354 <TIM_Base_SetConfig+0x140>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d007      	beq.n	800c30c <TIM_Base_SetConfig+0xf8>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a16      	ldr	r2, [pc, #88]	@ (800c358 <TIM_Base_SetConfig+0x144>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d003      	beq.n	800c30c <TIM_Base_SetConfig+0xf8>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a15      	ldr	r2, [pc, #84]	@ (800c35c <TIM_Base_SetConfig+0x148>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d103      	bne.n	800c314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	691a      	ldr	r2, [r3, #16]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b01      	cmp	r3, #1
 800c324:	d105      	bne.n	800c332 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	f023 0201 	bic.w	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	611a      	str	r2, [r3, #16]
  }
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	40010000 	.word	0x40010000
 800c344:	40000400 	.word	0x40000400
 800c348:	40000800 	.word	0x40000800
 800c34c:	40000c00 	.word	0x40000c00
 800c350:	40010400 	.word	0x40010400
 800c354:	40014000 	.word	0x40014000
 800c358:	40014400 	.word	0x40014400
 800c35c:	40014800 	.word	0x40014800

0800c360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	f023 0201 	bic.w	r2, r3, #1
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c38a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	4313      	orrs	r3, r2
 800c394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f023 030a 	bic.w	r3, r3, #10
 800c39c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	621a      	str	r2, [r3, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b087      	sub	sp, #28
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	f023 0210 	bic.w	r2, r3, #16
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c3e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	031b      	lsls	r3, r3, #12
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c3fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	4313      	orrs	r3, r2
 800c404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	621a      	str	r2, [r3, #32]
}
 800c412:	bf00      	nop
 800c414:	371c      	adds	r7, #28
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
	...

0800c420 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4b09      	ldr	r3, [pc, #36]	@ (800c458 <TIM_ITRx_SetConfig+0x38>)
 800c434:	4013      	ands	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	f043 0307 	orr.w	r3, r3, #7
 800c442:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	609a      	str	r2, [r3, #8]
}
 800c44a:	bf00      	nop
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	ffcfff8f 	.word	0xffcfff8f

0800c45c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b087      	sub	sp, #28
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	021a      	lsls	r2, r3, #8
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	431a      	orrs	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	4313      	orrs	r3, r2
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	609a      	str	r2, [r3, #8]
}
 800c490:	bf00      	nop
 800c492:	371c      	adds	r7, #28
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d101      	bne.n	800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e06d      	b.n	800c590 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2202      	movs	r2, #2
 800c4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a30      	ldr	r2, [pc, #192]	@ (800c59c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d004      	beq.n	800c4e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a2f      	ldr	r2, [pc, #188]	@ (800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d108      	bne.n	800c4fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c4ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c500:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4313      	orrs	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a20      	ldr	r2, [pc, #128]	@ (800c59c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d022      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c526:	d01d      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a1d      	ldr	r2, [pc, #116]	@ (800c5a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d018      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d013      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a1a      	ldr	r2, [pc, #104]	@ (800c5ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d00e      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a15      	ldr	r2, [pc, #84]	@ (800c5a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d009      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a16      	ldr	r2, [pc, #88]	@ (800c5b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d004      	beq.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a15      	ldr	r2, [pc, #84]	@ (800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d10c      	bne.n	800c57e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c56a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4313      	orrs	r3, r2
 800c574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	40010000 	.word	0x40010000
 800c5a0:	40010400 	.word	0x40010400
 800c5a4:	40000400 	.word	0x40000400
 800c5a8:	40000800 	.word	0x40000800
 800c5ac:	40000c00 	.word	0x40000c00
 800c5b0:	40001800 	.word	0x40001800
 800c5b4:	40014000 	.word	0x40014000

0800c5b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d101      	bne.n	800c5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e042      	b.n	800c650 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d106      	bne.n	800c5e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7f7 f8d9 	bl	8003794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2224      	movs	r2, #36	@ 0x24
 800c5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0201 	bic.w	r2, r2, #1
 800c5f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d002      	beq.n	800c608 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fe1e 	bl	800d244 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f8b3 	bl	800c774 <UART_SetConfig>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b01      	cmp	r3, #1
 800c612:	d101      	bne.n	800c618 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e01b      	b.n	800c650 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	689a      	ldr	r2, [r3, #8]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0201 	orr.w	r2, r2, #1
 800c646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fe9d 	bl	800d388 <UART_CheckIdleState>
 800c64e:	4603      	mov	r3, r0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	@ 0x28
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	4613      	mov	r3, r2
 800c666:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c66e:	2b20      	cmp	r3, #32
 800c670:	d17b      	bne.n	800c76a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <HAL_UART_Transmit+0x26>
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e074      	b.n	800c76c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2221      	movs	r2, #33	@ 0x21
 800c68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c692:	f7f7 fcd9 	bl	8004048 <HAL_GetTick>
 800c696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	88fa      	ldrh	r2, [r7, #6]
 800c69c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	88fa      	ldrh	r2, [r7, #6]
 800c6a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6b0:	d108      	bne.n	800c6c4 <HAL_UART_Transmit+0x6c>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d104      	bne.n	800c6c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	61bb      	str	r3, [r7, #24]
 800c6c2:	e003      	b.n	800c6cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c6cc:	e030      	b.n	800c730 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	2180      	movs	r1, #128	@ 0x80
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 feff 	bl	800d4dc <UART_WaitOnFlagUntilTimeout>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d005      	beq.n	800c6f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	e03d      	b.n	800c76c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10b      	bne.n	800c70e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c704:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	3302      	adds	r3, #2
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	e007      	b.n	800c71e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	3301      	adds	r3, #1
 800c71c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c724:	b29b      	uxth	r3, r3
 800c726:	3b01      	subs	r3, #1
 800c728:	b29a      	uxth	r2, r3
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1c8      	bne.n	800c6ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2200      	movs	r2, #0
 800c744:	2140      	movs	r1, #64	@ 0x40
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 fec8 	bl	800d4dc <UART_WaitOnFlagUntilTimeout>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e006      	b.n	800c76c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2220      	movs	r2, #32
 800c762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	e000      	b.n	800c76c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c76a:	2302      	movs	r3, #2
  }
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3720      	adds	r7, #32
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c778:	b092      	sub	sp, #72	@ 0x48
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	431a      	orrs	r2, r3
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	69db      	ldr	r3, [r3, #28]
 800c798:	4313      	orrs	r3, r2
 800c79a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	4bbe      	ldr	r3, [pc, #760]	@ (800ca9c <UART_SetConfig+0x328>)
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	6812      	ldr	r2, [r2, #0]
 800c7aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c7ac:	430b      	orrs	r3, r1
 800c7ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	430a      	orrs	r2, r1
 800c7c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4ab3      	ldr	r2, [pc, #716]	@ (800caa0 <UART_SetConfig+0x32c>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d004      	beq.n	800c7e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	689a      	ldr	r2, [r3, #8]
 800c7e6:	4baf      	ldr	r3, [pc, #700]	@ (800caa4 <UART_SetConfig+0x330>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	6812      	ldr	r2, [r2, #0]
 800c7ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fa:	f023 010f 	bic.w	r1, r3, #15
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	430a      	orrs	r2, r1
 800c808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4aa6      	ldr	r2, [pc, #664]	@ (800caa8 <UART_SetConfig+0x334>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d177      	bne.n	800c904 <UART_SetConfig+0x190>
 800c814:	4ba5      	ldr	r3, [pc, #660]	@ (800caac <UART_SetConfig+0x338>)
 800c816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c81c:	2b28      	cmp	r3, #40	@ 0x28
 800c81e:	d86d      	bhi.n	800c8fc <UART_SetConfig+0x188>
 800c820:	a201      	add	r2, pc, #4	@ (adr r2, 800c828 <UART_SetConfig+0xb4>)
 800c822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c826:	bf00      	nop
 800c828:	0800c8cd 	.word	0x0800c8cd
 800c82c:	0800c8fd 	.word	0x0800c8fd
 800c830:	0800c8fd 	.word	0x0800c8fd
 800c834:	0800c8fd 	.word	0x0800c8fd
 800c838:	0800c8fd 	.word	0x0800c8fd
 800c83c:	0800c8fd 	.word	0x0800c8fd
 800c840:	0800c8fd 	.word	0x0800c8fd
 800c844:	0800c8fd 	.word	0x0800c8fd
 800c848:	0800c8d5 	.word	0x0800c8d5
 800c84c:	0800c8fd 	.word	0x0800c8fd
 800c850:	0800c8fd 	.word	0x0800c8fd
 800c854:	0800c8fd 	.word	0x0800c8fd
 800c858:	0800c8fd 	.word	0x0800c8fd
 800c85c:	0800c8fd 	.word	0x0800c8fd
 800c860:	0800c8fd 	.word	0x0800c8fd
 800c864:	0800c8fd 	.word	0x0800c8fd
 800c868:	0800c8dd 	.word	0x0800c8dd
 800c86c:	0800c8fd 	.word	0x0800c8fd
 800c870:	0800c8fd 	.word	0x0800c8fd
 800c874:	0800c8fd 	.word	0x0800c8fd
 800c878:	0800c8fd 	.word	0x0800c8fd
 800c87c:	0800c8fd 	.word	0x0800c8fd
 800c880:	0800c8fd 	.word	0x0800c8fd
 800c884:	0800c8fd 	.word	0x0800c8fd
 800c888:	0800c8e5 	.word	0x0800c8e5
 800c88c:	0800c8fd 	.word	0x0800c8fd
 800c890:	0800c8fd 	.word	0x0800c8fd
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c8fd 	.word	0x0800c8fd
 800c8a0:	0800c8fd 	.word	0x0800c8fd
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c8ed 	.word	0x0800c8ed
 800c8ac:	0800c8fd 	.word	0x0800c8fd
 800c8b0:	0800c8fd 	.word	0x0800c8fd
 800c8b4:	0800c8fd 	.word	0x0800c8fd
 800c8b8:	0800c8fd 	.word	0x0800c8fd
 800c8bc:	0800c8fd 	.word	0x0800c8fd
 800c8c0:	0800c8fd 	.word	0x0800c8fd
 800c8c4:	0800c8fd 	.word	0x0800c8fd
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e222      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e21e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8dc:	2308      	movs	r3, #8
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e21a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8e4:	2310      	movs	r3, #16
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e216      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8ec:	2320      	movs	r3, #32
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f2:	e212      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8f4:	2340      	movs	r3, #64	@ 0x40
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8fa:	e20e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c8fc:	2380      	movs	r3, #128	@ 0x80
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c902:	e20a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a69      	ldr	r2, [pc, #420]	@ (800cab0 <UART_SetConfig+0x33c>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d130      	bne.n	800c970 <UART_SetConfig+0x1fc>
 800c90e:	4b67      	ldr	r3, [pc, #412]	@ (800caac <UART_SetConfig+0x338>)
 800c910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b05      	cmp	r3, #5
 800c918:	d826      	bhi.n	800c968 <UART_SetConfig+0x1f4>
 800c91a:	a201      	add	r2, pc, #4	@ (adr r2, 800c920 <UART_SetConfig+0x1ac>)
 800c91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c920:	0800c939 	.word	0x0800c939
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c949 	.word	0x0800c949
 800c92c:	0800c951 	.word	0x0800c951
 800c930:	0800c959 	.word	0x0800c959
 800c934:	0800c961 	.word	0x0800c961
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e1ec      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c940:	2304      	movs	r3, #4
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e1e8      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c948:	2308      	movs	r3, #8
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e1e4      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c950:	2310      	movs	r3, #16
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e1e0      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c958:	2320      	movs	r3, #32
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95e:	e1dc      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c960:	2340      	movs	r3, #64	@ 0x40
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c966:	e1d8      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c968:	2380      	movs	r3, #128	@ 0x80
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c96e:	e1d4      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a4f      	ldr	r2, [pc, #316]	@ (800cab4 <UART_SetConfig+0x340>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d130      	bne.n	800c9dc <UART_SetConfig+0x268>
 800c97a:	4b4c      	ldr	r3, [pc, #304]	@ (800caac <UART_SetConfig+0x338>)
 800c97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	2b05      	cmp	r3, #5
 800c984:	d826      	bhi.n	800c9d4 <UART_SetConfig+0x260>
 800c986:	a201      	add	r2, pc, #4	@ (adr r2, 800c98c <UART_SetConfig+0x218>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c9a5 	.word	0x0800c9a5
 800c990:	0800c9ad 	.word	0x0800c9ad
 800c994:	0800c9b5 	.word	0x0800c9b5
 800c998:	0800c9bd 	.word	0x0800c9bd
 800c99c:	0800c9c5 	.word	0x0800c9c5
 800c9a0:	0800c9cd 	.word	0x0800c9cd
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9aa:	e1b6      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9ac:	2304      	movs	r3, #4
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b2:	e1b2      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9b4:	2308      	movs	r3, #8
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ba:	e1ae      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9bc:	2310      	movs	r3, #16
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c2:	e1aa      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9c4:	2320      	movs	r3, #32
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ca:	e1a6      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9cc:	2340      	movs	r3, #64	@ 0x40
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9d2:	e1a2      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9d4:	2380      	movs	r3, #128	@ 0x80
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9da:	e19e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a35      	ldr	r2, [pc, #212]	@ (800cab8 <UART_SetConfig+0x344>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d130      	bne.n	800ca48 <UART_SetConfig+0x2d4>
 800c9e6:	4b31      	ldr	r3, [pc, #196]	@ (800caac <UART_SetConfig+0x338>)
 800c9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ea:	f003 0307 	and.w	r3, r3, #7
 800c9ee:	2b05      	cmp	r3, #5
 800c9f0:	d826      	bhi.n	800ca40 <UART_SetConfig+0x2cc>
 800c9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f8 <UART_SetConfig+0x284>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca11 	.word	0x0800ca11
 800c9fc:	0800ca19 	.word	0x0800ca19
 800ca00:	0800ca21 	.word	0x0800ca21
 800ca04:	0800ca29 	.word	0x0800ca29
 800ca08:	0800ca31 	.word	0x0800ca31
 800ca0c:	0800ca39 	.word	0x0800ca39
 800ca10:	2300      	movs	r3, #0
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca16:	e180      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca18:	2304      	movs	r3, #4
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1e:	e17c      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca20:	2308      	movs	r3, #8
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca26:	e178      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2e:	e174      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca30:	2320      	movs	r3, #32
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca36:	e170      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca38:	2340      	movs	r3, #64	@ 0x40
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3e:	e16c      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca40:	2380      	movs	r3, #128	@ 0x80
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca46:	e168      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1b      	ldr	r2, [pc, #108]	@ (800cabc <UART_SetConfig+0x348>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d142      	bne.n	800cad8 <UART_SetConfig+0x364>
 800ca52:	4b16      	ldr	r3, [pc, #88]	@ (800caac <UART_SetConfig+0x338>)
 800ca54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b05      	cmp	r3, #5
 800ca5c:	d838      	bhi.n	800cad0 <UART_SetConfig+0x35c>
 800ca5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca64 <UART_SetConfig+0x2f0>)
 800ca60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca64:	0800ca7d 	.word	0x0800ca7d
 800ca68:	0800ca85 	.word	0x0800ca85
 800ca6c:	0800ca8d 	.word	0x0800ca8d
 800ca70:	0800ca95 	.word	0x0800ca95
 800ca74:	0800cac1 	.word	0x0800cac1
 800ca78:	0800cac9 	.word	0x0800cac9
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e14a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca84:	2304      	movs	r3, #4
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e146      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca8c:	2308      	movs	r3, #8
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e142      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca94:	2310      	movs	r3, #16
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9a:	e13e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ca9c:	cfff69f3 	.word	0xcfff69f3
 800caa0:	58000c00 	.word	0x58000c00
 800caa4:	11fff4ff 	.word	0x11fff4ff
 800caa8:	40011000 	.word	0x40011000
 800caac:	58024400 	.word	0x58024400
 800cab0:	40004400 	.word	0x40004400
 800cab4:	40004800 	.word	0x40004800
 800cab8:	40004c00 	.word	0x40004c00
 800cabc:	40005000 	.word	0x40005000
 800cac0:	2320      	movs	r3, #32
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac6:	e128      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cac8:	2340      	movs	r3, #64	@ 0x40
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e124      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cad0:	2380      	movs	r3, #128	@ 0x80
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e120      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4acb      	ldr	r2, [pc, #812]	@ (800ce0c <UART_SetConfig+0x698>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d176      	bne.n	800cbd0 <UART_SetConfig+0x45c>
 800cae2:	4bcb      	ldr	r3, [pc, #812]	@ (800ce10 <UART_SetConfig+0x69c>)
 800cae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800caea:	2b28      	cmp	r3, #40	@ 0x28
 800caec:	d86c      	bhi.n	800cbc8 <UART_SetConfig+0x454>
 800caee:	a201      	add	r2, pc, #4	@ (adr r2, 800caf4 <UART_SetConfig+0x380>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb99 	.word	0x0800cb99
 800caf8:	0800cbc9 	.word	0x0800cbc9
 800cafc:	0800cbc9 	.word	0x0800cbc9
 800cb00:	0800cbc9 	.word	0x0800cbc9
 800cb04:	0800cbc9 	.word	0x0800cbc9
 800cb08:	0800cbc9 	.word	0x0800cbc9
 800cb0c:	0800cbc9 	.word	0x0800cbc9
 800cb10:	0800cbc9 	.word	0x0800cbc9
 800cb14:	0800cba1 	.word	0x0800cba1
 800cb18:	0800cbc9 	.word	0x0800cbc9
 800cb1c:	0800cbc9 	.word	0x0800cbc9
 800cb20:	0800cbc9 	.word	0x0800cbc9
 800cb24:	0800cbc9 	.word	0x0800cbc9
 800cb28:	0800cbc9 	.word	0x0800cbc9
 800cb2c:	0800cbc9 	.word	0x0800cbc9
 800cb30:	0800cbc9 	.word	0x0800cbc9
 800cb34:	0800cba9 	.word	0x0800cba9
 800cb38:	0800cbc9 	.word	0x0800cbc9
 800cb3c:	0800cbc9 	.word	0x0800cbc9
 800cb40:	0800cbc9 	.word	0x0800cbc9
 800cb44:	0800cbc9 	.word	0x0800cbc9
 800cb48:	0800cbc9 	.word	0x0800cbc9
 800cb4c:	0800cbc9 	.word	0x0800cbc9
 800cb50:	0800cbc9 	.word	0x0800cbc9
 800cb54:	0800cbb1 	.word	0x0800cbb1
 800cb58:	0800cbc9 	.word	0x0800cbc9
 800cb5c:	0800cbc9 	.word	0x0800cbc9
 800cb60:	0800cbc9 	.word	0x0800cbc9
 800cb64:	0800cbc9 	.word	0x0800cbc9
 800cb68:	0800cbc9 	.word	0x0800cbc9
 800cb6c:	0800cbc9 	.word	0x0800cbc9
 800cb70:	0800cbc9 	.word	0x0800cbc9
 800cb74:	0800cbb9 	.word	0x0800cbb9
 800cb78:	0800cbc9 	.word	0x0800cbc9
 800cb7c:	0800cbc9 	.word	0x0800cbc9
 800cb80:	0800cbc9 	.word	0x0800cbc9
 800cb84:	0800cbc9 	.word	0x0800cbc9
 800cb88:	0800cbc9 	.word	0x0800cbc9
 800cb8c:	0800cbc9 	.word	0x0800cbc9
 800cb90:	0800cbc9 	.word	0x0800cbc9
 800cb94:	0800cbc1 	.word	0x0800cbc1
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb9e:	e0bc      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cba0:	2304      	movs	r3, #4
 800cba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cba6:	e0b8      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cba8:	2308      	movs	r3, #8
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbae:	e0b4      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb6:	e0b0      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cbb8:	2320      	movs	r3, #32
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbbe:	e0ac      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cbc0:	2340      	movs	r3, #64	@ 0x40
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbc6:	e0a8      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cbc8:	2380      	movs	r3, #128	@ 0x80
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbce:	e0a4      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a8f      	ldr	r2, [pc, #572]	@ (800ce14 <UART_SetConfig+0x6a0>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d130      	bne.n	800cc3c <UART_SetConfig+0x4c8>
 800cbda:	4b8d      	ldr	r3, [pc, #564]	@ (800ce10 <UART_SetConfig+0x69c>)
 800cbdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbde:	f003 0307 	and.w	r3, r3, #7
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	d826      	bhi.n	800cc34 <UART_SetConfig+0x4c0>
 800cbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cbec <UART_SetConfig+0x478>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cc05 	.word	0x0800cc05
 800cbf0:	0800cc0d 	.word	0x0800cc0d
 800cbf4:	0800cc15 	.word	0x0800cc15
 800cbf8:	0800cc1d 	.word	0x0800cc1d
 800cbfc:	0800cc25 	.word	0x0800cc25
 800cc00:	0800cc2d 	.word	0x0800cc2d
 800cc04:	2300      	movs	r3, #0
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e086      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e082      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc14:	2308      	movs	r3, #8
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e07e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc1c:	2310      	movs	r3, #16
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e07a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc24:	2320      	movs	r3, #32
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e076      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc2c:	2340      	movs	r3, #64	@ 0x40
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc32:	e072      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc34:	2380      	movs	r3, #128	@ 0x80
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3a:	e06e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a75      	ldr	r2, [pc, #468]	@ (800ce18 <UART_SetConfig+0x6a4>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d130      	bne.n	800cca8 <UART_SetConfig+0x534>
 800cc46:	4b72      	ldr	r3, [pc, #456]	@ (800ce10 <UART_SetConfig+0x69c>)
 800cc48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	2b05      	cmp	r3, #5
 800cc50:	d826      	bhi.n	800cca0 <UART_SetConfig+0x52c>
 800cc52:	a201      	add	r2, pc, #4	@ (adr r2, 800cc58 <UART_SetConfig+0x4e4>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cc71 	.word	0x0800cc71
 800cc5c:	0800cc79 	.word	0x0800cc79
 800cc60:	0800cc81 	.word	0x0800cc81
 800cc64:	0800cc89 	.word	0x0800cc89
 800cc68:	0800cc91 	.word	0x0800cc91
 800cc6c:	0800cc99 	.word	0x0800cc99
 800cc70:	2300      	movs	r3, #0
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e050      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc78:	2304      	movs	r3, #4
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e04c      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc80:	2308      	movs	r3, #8
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e048      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8e:	e044      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc90:	2320      	movs	r3, #32
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc96:	e040      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cc98:	2340      	movs	r3, #64	@ 0x40
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9e:	e03c      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cca0:	2380      	movs	r3, #128	@ 0x80
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cca6:	e038      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a5b      	ldr	r2, [pc, #364]	@ (800ce1c <UART_SetConfig+0x6a8>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d130      	bne.n	800cd14 <UART_SetConfig+0x5a0>
 800ccb2:	4b57      	ldr	r3, [pc, #348]	@ (800ce10 <UART_SetConfig+0x69c>)
 800ccb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	2b05      	cmp	r3, #5
 800ccbc:	d826      	bhi.n	800cd0c <UART_SetConfig+0x598>
 800ccbe:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc4 <UART_SetConfig+0x550>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800ccdd 	.word	0x0800ccdd
 800ccc8:	0800cce5 	.word	0x0800cce5
 800cccc:	0800cced 	.word	0x0800cced
 800ccd0:	0800ccf5 	.word	0x0800ccf5
 800ccd4:	0800ccfd 	.word	0x0800ccfd
 800ccd8:	0800cd05 	.word	0x0800cd05
 800ccdc:	2302      	movs	r3, #2
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e01a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cce4:	2304      	movs	r3, #4
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e016      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ccec:	2308      	movs	r3, #8
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e012      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ccf4:	2310      	movs	r3, #16
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e00e      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd02:	e00a      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cd04:	2340      	movs	r3, #64	@ 0x40
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0a:	e006      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cd0c:	2380      	movs	r3, #128	@ 0x80
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd12:	e002      	b.n	800cd1a <UART_SetConfig+0x5a6>
 800cd14:	2380      	movs	r3, #128	@ 0x80
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a3f      	ldr	r2, [pc, #252]	@ (800ce1c <UART_SetConfig+0x6a8>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	f040 80f8 	bne.w	800cf16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	dc46      	bgt.n	800cdbc <UART_SetConfig+0x648>
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	f2c0 8082 	blt.w	800ce38 <UART_SetConfig+0x6c4>
 800cd34:	3b02      	subs	r3, #2
 800cd36:	2b1e      	cmp	r3, #30
 800cd38:	d87e      	bhi.n	800ce38 <UART_SetConfig+0x6c4>
 800cd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd40 <UART_SetConfig+0x5cc>)
 800cd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd40:	0800cdc3 	.word	0x0800cdc3
 800cd44:	0800ce39 	.word	0x0800ce39
 800cd48:	0800cdcb 	.word	0x0800cdcb
 800cd4c:	0800ce39 	.word	0x0800ce39
 800cd50:	0800ce39 	.word	0x0800ce39
 800cd54:	0800ce39 	.word	0x0800ce39
 800cd58:	0800cddb 	.word	0x0800cddb
 800cd5c:	0800ce39 	.word	0x0800ce39
 800cd60:	0800ce39 	.word	0x0800ce39
 800cd64:	0800ce39 	.word	0x0800ce39
 800cd68:	0800ce39 	.word	0x0800ce39
 800cd6c:	0800ce39 	.word	0x0800ce39
 800cd70:	0800ce39 	.word	0x0800ce39
 800cd74:	0800ce39 	.word	0x0800ce39
 800cd78:	0800cdeb 	.word	0x0800cdeb
 800cd7c:	0800ce39 	.word	0x0800ce39
 800cd80:	0800ce39 	.word	0x0800ce39
 800cd84:	0800ce39 	.word	0x0800ce39
 800cd88:	0800ce39 	.word	0x0800ce39
 800cd8c:	0800ce39 	.word	0x0800ce39
 800cd90:	0800ce39 	.word	0x0800ce39
 800cd94:	0800ce39 	.word	0x0800ce39
 800cd98:	0800ce39 	.word	0x0800ce39
 800cd9c:	0800ce39 	.word	0x0800ce39
 800cda0:	0800ce39 	.word	0x0800ce39
 800cda4:	0800ce39 	.word	0x0800ce39
 800cda8:	0800ce39 	.word	0x0800ce39
 800cdac:	0800ce39 	.word	0x0800ce39
 800cdb0:	0800ce39 	.word	0x0800ce39
 800cdb4:	0800ce39 	.word	0x0800ce39
 800cdb8:	0800ce2b 	.word	0x0800ce2b
 800cdbc:	2b40      	cmp	r3, #64	@ 0x40
 800cdbe:	d037      	beq.n	800ce30 <UART_SetConfig+0x6bc>
 800cdc0:	e03a      	b.n	800ce38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cdc2:	f7fd febb 	bl	800ab3c <HAL_RCCEx_GetD3PCLK1Freq>
 800cdc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cdc8:	e03c      	b.n	800ce44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fd feca 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd8:	e034      	b.n	800ce44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdda:	f107 0318 	add.w	r3, r7, #24
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe f816 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde8:	e02c      	b.n	800ce44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdea:	4b09      	ldr	r3, [pc, #36]	@ (800ce10 <UART_SetConfig+0x69c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f003 0320 	and.w	r3, r3, #32
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d016      	beq.n	800ce24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdf6:	4b06      	ldr	r3, [pc, #24]	@ (800ce10 <UART_SetConfig+0x69c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	08db      	lsrs	r3, r3, #3
 800cdfc:	f003 0303 	and.w	r3, r3, #3
 800ce00:	4a07      	ldr	r2, [pc, #28]	@ (800ce20 <UART_SetConfig+0x6ac>)
 800ce02:	fa22 f303 	lsr.w	r3, r2, r3
 800ce06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce08:	e01c      	b.n	800ce44 <UART_SetConfig+0x6d0>
 800ce0a:	bf00      	nop
 800ce0c:	40011400 	.word	0x40011400
 800ce10:	58024400 	.word	0x58024400
 800ce14:	40007800 	.word	0x40007800
 800ce18:	40007c00 	.word	0x40007c00
 800ce1c:	58000c00 	.word	0x58000c00
 800ce20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ce24:	4b9d      	ldr	r3, [pc, #628]	@ (800d09c <UART_SetConfig+0x928>)
 800ce26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce28:	e00c      	b.n	800ce44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce2a:	4b9d      	ldr	r3, [pc, #628]	@ (800d0a0 <UART_SetConfig+0x92c>)
 800ce2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce2e:	e009      	b.n	800ce44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce36:	e005      	b.n	800ce44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ce42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 81de 	beq.w	800d208 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce50:	4a94      	ldr	r2, [pc, #592]	@ (800d0a4 <UART_SetConfig+0x930>)
 800ce52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce56:	461a      	mov	r2, r3
 800ce58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d305      	bcc.n	800ce7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d903      	bls.n	800ce84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ce82:	e1c1      	b.n	800d208 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce86:	2200      	movs	r2, #0
 800ce88:	60bb      	str	r3, [r7, #8]
 800ce8a:	60fa      	str	r2, [r7, #12]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce90:	4a84      	ldr	r2, [pc, #528]	@ (800d0a4 <UART_SetConfig+0x930>)
 800ce92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	2200      	movs	r2, #0
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	607a      	str	r2, [r7, #4]
 800ce9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cea6:	f7f3 fa73 	bl	8000390 <__aeabi_uldivmod>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	4610      	mov	r0, r2
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	f04f 0200 	mov.w	r2, #0
 800ceb6:	f04f 0300 	mov.w	r3, #0
 800ceba:	020b      	lsls	r3, r1, #8
 800cebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cec0:	0202      	lsls	r2, r0, #8
 800cec2:	6979      	ldr	r1, [r7, #20]
 800cec4:	6849      	ldr	r1, [r1, #4]
 800cec6:	0849      	lsrs	r1, r1, #1
 800cec8:	2000      	movs	r0, #0
 800ceca:	460c      	mov	r4, r1
 800cecc:	4605      	mov	r5, r0
 800cece:	eb12 0804 	adds.w	r8, r2, r4
 800ced2:	eb43 0905 	adc.w	r9, r3, r5
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	469a      	mov	sl, r3
 800cede:	4693      	mov	fp, r2
 800cee0:	4652      	mov	r2, sl
 800cee2:	465b      	mov	r3, fp
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 fa52 	bl	8000390 <__aeabi_uldivmod>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	4613      	mov	r3, r2
 800cef2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cefa:	d308      	bcc.n	800cf0e <UART_SetConfig+0x79a>
 800cefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf02:	d204      	bcs.n	800cf0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf0a:	60da      	str	r2, [r3, #12]
 800cf0c:	e17c      	b.n	800d208 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf14:	e178      	b.n	800d208 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf1e:	f040 80c5 	bne.w	800d0ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cf22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	dc48      	bgt.n	800cfbc <UART_SetConfig+0x848>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	db7b      	blt.n	800d026 <UART_SetConfig+0x8b2>
 800cf2e:	2b20      	cmp	r3, #32
 800cf30:	d879      	bhi.n	800d026 <UART_SetConfig+0x8b2>
 800cf32:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <UART_SetConfig+0x7c4>)
 800cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf38:	0800cfc3 	.word	0x0800cfc3
 800cf3c:	0800cfcb 	.word	0x0800cfcb
 800cf40:	0800d027 	.word	0x0800d027
 800cf44:	0800d027 	.word	0x0800d027
 800cf48:	0800cfd3 	.word	0x0800cfd3
 800cf4c:	0800d027 	.word	0x0800d027
 800cf50:	0800d027 	.word	0x0800d027
 800cf54:	0800d027 	.word	0x0800d027
 800cf58:	0800cfe3 	.word	0x0800cfe3
 800cf5c:	0800d027 	.word	0x0800d027
 800cf60:	0800d027 	.word	0x0800d027
 800cf64:	0800d027 	.word	0x0800d027
 800cf68:	0800d027 	.word	0x0800d027
 800cf6c:	0800d027 	.word	0x0800d027
 800cf70:	0800d027 	.word	0x0800d027
 800cf74:	0800d027 	.word	0x0800d027
 800cf78:	0800cff3 	.word	0x0800cff3
 800cf7c:	0800d027 	.word	0x0800d027
 800cf80:	0800d027 	.word	0x0800d027
 800cf84:	0800d027 	.word	0x0800d027
 800cf88:	0800d027 	.word	0x0800d027
 800cf8c:	0800d027 	.word	0x0800d027
 800cf90:	0800d027 	.word	0x0800d027
 800cf94:	0800d027 	.word	0x0800d027
 800cf98:	0800d027 	.word	0x0800d027
 800cf9c:	0800d027 	.word	0x0800d027
 800cfa0:	0800d027 	.word	0x0800d027
 800cfa4:	0800d027 	.word	0x0800d027
 800cfa8:	0800d027 	.word	0x0800d027
 800cfac:	0800d027 	.word	0x0800d027
 800cfb0:	0800d027 	.word	0x0800d027
 800cfb4:	0800d027 	.word	0x0800d027
 800cfb8:	0800d019 	.word	0x0800d019
 800cfbc:	2b40      	cmp	r3, #64	@ 0x40
 800cfbe:	d02e      	beq.n	800d01e <UART_SetConfig+0x8aa>
 800cfc0:	e031      	b.n	800d026 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfc2:	f7fb fe05 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800cfc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfc8:	e033      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfca:	f7fb fe17 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 800cfce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfd0:	e02f      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fd fdc6 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe0:	e027      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe2:	f107 0318 	add.w	r3, r7, #24
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fd ff12 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff0:	e01f      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cff2:	4b2d      	ldr	r3, [pc, #180]	@ (800d0a8 <UART_SetConfig+0x934>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cffe:	4b2a      	ldr	r3, [pc, #168]	@ (800d0a8 <UART_SetConfig+0x934>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	08db      	lsrs	r3, r3, #3
 800d004:	f003 0303 	and.w	r3, r3, #3
 800d008:	4a24      	ldr	r2, [pc, #144]	@ (800d09c <UART_SetConfig+0x928>)
 800d00a:	fa22 f303 	lsr.w	r3, r2, r3
 800d00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d010:	e00f      	b.n	800d032 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d012:	4b22      	ldr	r3, [pc, #136]	@ (800d09c <UART_SetConfig+0x928>)
 800d014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d016:	e00c      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d018:	4b21      	ldr	r3, [pc, #132]	@ (800d0a0 <UART_SetConfig+0x92c>)
 800d01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d01c:	e009      	b.n	800d032 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d01e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d024:	e005      	b.n	800d032 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d026:	2300      	movs	r3, #0
 800d028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 80e7 	beq.w	800d208 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03e:	4a19      	ldr	r2, [pc, #100]	@ (800d0a4 <UART_SetConfig+0x930>)
 800d040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d044:	461a      	mov	r2, r3
 800d046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d048:	fbb3 f3f2 	udiv	r3, r3, r2
 800d04c:	005a      	lsls	r2, r3, #1
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	085b      	lsrs	r3, r3, #1
 800d054:	441a      	add	r2, r3
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d05e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	2b0f      	cmp	r3, #15
 800d064:	d916      	bls.n	800d094 <UART_SetConfig+0x920>
 800d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d06c:	d212      	bcs.n	800d094 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d070:	b29b      	uxth	r3, r3
 800d072:	f023 030f 	bic.w	r3, r3, #15
 800d076:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	f003 0307 	and.w	r3, r3, #7
 800d082:	b29a      	uxth	r2, r3
 800d084:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d086:	4313      	orrs	r3, r2
 800d088:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d090:	60da      	str	r2, [r3, #12]
 800d092:	e0b9      	b.n	800d208 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d09a:	e0b5      	b.n	800d208 <UART_SetConfig+0xa94>
 800d09c:	03d09000 	.word	0x03d09000
 800d0a0:	003d0900 	.word	0x003d0900
 800d0a4:	0800f648 	.word	0x0800f648
 800d0a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0b0:	2b20      	cmp	r3, #32
 800d0b2:	dc49      	bgt.n	800d148 <UART_SetConfig+0x9d4>
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	db7c      	blt.n	800d1b2 <UART_SetConfig+0xa3e>
 800d0b8:	2b20      	cmp	r3, #32
 800d0ba:	d87a      	bhi.n	800d1b2 <UART_SetConfig+0xa3e>
 800d0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x950>)
 800d0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c2:	bf00      	nop
 800d0c4:	0800d14f 	.word	0x0800d14f
 800d0c8:	0800d157 	.word	0x0800d157
 800d0cc:	0800d1b3 	.word	0x0800d1b3
 800d0d0:	0800d1b3 	.word	0x0800d1b3
 800d0d4:	0800d15f 	.word	0x0800d15f
 800d0d8:	0800d1b3 	.word	0x0800d1b3
 800d0dc:	0800d1b3 	.word	0x0800d1b3
 800d0e0:	0800d1b3 	.word	0x0800d1b3
 800d0e4:	0800d16f 	.word	0x0800d16f
 800d0e8:	0800d1b3 	.word	0x0800d1b3
 800d0ec:	0800d1b3 	.word	0x0800d1b3
 800d0f0:	0800d1b3 	.word	0x0800d1b3
 800d0f4:	0800d1b3 	.word	0x0800d1b3
 800d0f8:	0800d1b3 	.word	0x0800d1b3
 800d0fc:	0800d1b3 	.word	0x0800d1b3
 800d100:	0800d1b3 	.word	0x0800d1b3
 800d104:	0800d17f 	.word	0x0800d17f
 800d108:	0800d1b3 	.word	0x0800d1b3
 800d10c:	0800d1b3 	.word	0x0800d1b3
 800d110:	0800d1b3 	.word	0x0800d1b3
 800d114:	0800d1b3 	.word	0x0800d1b3
 800d118:	0800d1b3 	.word	0x0800d1b3
 800d11c:	0800d1b3 	.word	0x0800d1b3
 800d120:	0800d1b3 	.word	0x0800d1b3
 800d124:	0800d1b3 	.word	0x0800d1b3
 800d128:	0800d1b3 	.word	0x0800d1b3
 800d12c:	0800d1b3 	.word	0x0800d1b3
 800d130:	0800d1b3 	.word	0x0800d1b3
 800d134:	0800d1b3 	.word	0x0800d1b3
 800d138:	0800d1b3 	.word	0x0800d1b3
 800d13c:	0800d1b3 	.word	0x0800d1b3
 800d140:	0800d1b3 	.word	0x0800d1b3
 800d144:	0800d1a5 	.word	0x0800d1a5
 800d148:	2b40      	cmp	r3, #64	@ 0x40
 800d14a:	d02e      	beq.n	800d1aa <UART_SetConfig+0xa36>
 800d14c:	e031      	b.n	800d1b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d14e:	f7fb fd3f 	bl	8008bd0 <HAL_RCC_GetPCLK1Freq>
 800d152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d154:	e033      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d156:	f7fb fd51 	bl	8008bfc <HAL_RCC_GetPCLK2Freq>
 800d15a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d15c:	e02f      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d15e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d162:	4618      	mov	r0, r3
 800d164:	f7fd fd00 	bl	800ab68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16c:	e027      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d16e:	f107 0318 	add.w	r3, r7, #24
 800d172:	4618      	mov	r0, r3
 800d174:	f7fd fe4c 	bl	800ae10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d17c:	e01f      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d17e:	4b2d      	ldr	r3, [pc, #180]	@ (800d234 <UART_SetConfig+0xac0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d18a:	4b2a      	ldr	r3, [pc, #168]	@ (800d234 <UART_SetConfig+0xac0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	08db      	lsrs	r3, r3, #3
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	4a28      	ldr	r2, [pc, #160]	@ (800d238 <UART_SetConfig+0xac4>)
 800d196:	fa22 f303 	lsr.w	r3, r2, r3
 800d19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d19c:	e00f      	b.n	800d1be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d19e:	4b26      	ldr	r3, [pc, #152]	@ (800d238 <UART_SetConfig+0xac4>)
 800d1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a2:	e00c      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1a4:	4b25      	ldr	r3, [pc, #148]	@ (800d23c <UART_SetConfig+0xac8>)
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e009      	b.n	800d1be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1b0:	e005      	b.n	800d1be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d1bc:	bf00      	nop
    }

    if (pclk != 0U)
 800d1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d021      	beq.n	800d208 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c8:	4a1d      	ldr	r2, [pc, #116]	@ (800d240 <UART_SetConfig+0xacc>)
 800d1ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	085b      	lsrs	r3, r3, #1
 800d1dc:	441a      	add	r2, r3
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ea:	2b0f      	cmp	r3, #15
 800d1ec:	d909      	bls.n	800d202 <UART_SetConfig+0xa8e>
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1f4:	d205      	bcs.n	800d202 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60da      	str	r2, [r3, #12]
 800d200:	e002      	b.n	800d208 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2201      	movs	r2, #1
 800d214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2200      	movs	r2, #0
 800d21c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	2200      	movs	r2, #0
 800d222:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d224:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3748      	adds	r7, #72	@ 0x48
 800d22c:	46bd      	mov	sp, r7
 800d22e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d232:	bf00      	nop
 800d234:	58024400 	.word	0x58024400
 800d238:	03d09000 	.word	0x03d09000
 800d23c:	003d0900 	.word	0x003d0900
 800d240:	0800f648 	.word	0x0800f648

0800d244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d250:	f003 0308 	and.w	r3, r3, #8
 800d254:	2b00      	cmp	r3, #0
 800d256:	d00a      	beq.n	800d26e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	430a      	orrs	r2, r1
 800d26c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	430a      	orrs	r2, r1
 800d28e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d294:	f003 0302 	and.w	r3, r3, #2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	430a      	orrs	r2, r1
 800d2b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b6:	f003 0304 	and.w	r3, r3, #4
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00a      	beq.n	800d2f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2fa:	f003 0320 	and.w	r3, r3, #32
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00a      	beq.n	800d318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01a      	beq.n	800d35a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	430a      	orrs	r2, r1
 800d338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d33e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d342:	d10a      	bne.n	800d35a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	605a      	str	r2, [r3, #4]
  }
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b098      	sub	sp, #96	@ 0x60
 800d38c:	af02      	add	r7, sp, #8
 800d38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d398:	f7f6 fe56 	bl	8004048 <HAL_GetTick>
 800d39c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0308 	and.w	r3, r3, #8
 800d3a8:	2b08      	cmp	r3, #8
 800d3aa:	d12f      	bne.n	800d40c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f88e 	bl	800d4dc <UART_WaitOnFlagUntilTimeout>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d022      	beq.n	800d40c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3da:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e6      	bne.n	800d3c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d408:	2303      	movs	r3, #3
 800d40a:	e063      	b.n	800d4d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 0304 	and.w	r3, r3, #4
 800d416:	2b04      	cmp	r3, #4
 800d418:	d149      	bne.n	800d4ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d41a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d422:	2200      	movs	r2, #0
 800d424:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f857 	bl	800d4dc <UART_WaitOnFlagUntilTimeout>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d03c      	beq.n	800d4ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43c:	e853 3f00 	ldrex	r3, [r3]
 800d440:	623b      	str	r3, [r7, #32]
   return(result);
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	461a      	mov	r2, r3
 800d450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d452:	633b      	str	r3, [r7, #48]	@ 0x30
 800d454:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45a:	e841 2300 	strex	r3, r2, [r1]
 800d45e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1e6      	bne.n	800d434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	60fb      	str	r3, [r7, #12]
   return(result);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f023 0301 	bic.w	r3, r3, #1
 800d47c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d486:	61fa      	str	r2, [r7, #28]
 800d488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	69b9      	ldr	r1, [r7, #24]
 800d48c:	69fa      	ldr	r2, [r7, #28]
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	617b      	str	r3, [r7, #20]
   return(result);
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e5      	bne.n	800d466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	e012      	b.n	800d4d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3758      	adds	r7, #88	@ 0x58
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4ec:	e04f      	b.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f4:	d04b      	beq.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4f6:	f7f6 fda7 	bl	8004048 <HAL_GetTick>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	429a      	cmp	r2, r3
 800d504:	d302      	bcc.n	800d50c <UART_WaitOnFlagUntilTimeout+0x30>
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d50c:	2303      	movs	r3, #3
 800d50e:	e04e      	b.n	800d5ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d037      	beq.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b80      	cmp	r3, #128	@ 0x80
 800d522:	d034      	beq.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	2b40      	cmp	r3, #64	@ 0x40
 800d528:	d031      	beq.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	f003 0308 	and.w	r3, r3, #8
 800d534:	2b08      	cmp	r3, #8
 800d536:	d110      	bne.n	800d55a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2208      	movs	r2, #8
 800d53e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f000 f839 	bl	800d5b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2208      	movs	r2, #8
 800d54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e029      	b.n	800d5ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d568:	d111      	bne.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f81f 	bl	800d5b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2220      	movs	r2, #32
 800d57e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e00f      	b.n	800d5ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69da      	ldr	r2, [r3, #28]
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	4013      	ands	r3, r2
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	bf0c      	ite	eq
 800d59e:	2301      	moveq	r3, #1
 800d5a0:	2300      	movne	r3, #0
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	79fb      	ldrb	r3, [r7, #7]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d0a0      	beq.n	800d4ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b095      	sub	sp, #84	@ 0x54
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c8:	e853 3f00 	ldrex	r3, [r3]
 800d5cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d5e6:	e841 2300 	strex	r3, r2, [r1]
 800d5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e6      	bne.n	800d5c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	e853 3f00 	ldrex	r3, [r3]
 800d600:	61fb      	str	r3, [r7, #28]
   return(result);
 800d602:	69fa      	ldr	r2, [r7, #28]
 800d604:	4b1e      	ldr	r3, [pc, #120]	@ (800d680 <UART_EndRxTransfer+0xc8>)
 800d606:	4013      	ands	r3, r2
 800d608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3308      	adds	r3, #8
 800d610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1e5      	bne.n	800d5f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d118      	bne.n	800d660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f023 0310 	bic.w	r3, r3, #16
 800d642:	647b      	str	r3, [r7, #68]	@ 0x44
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	461a      	mov	r2, r3
 800d64a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	6979      	ldr	r1, [r7, #20]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	e841 2300 	strex	r3, r2, [r1]
 800d658:	613b      	str	r3, [r7, #16]
   return(result);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e6      	bne.n	800d62e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2220      	movs	r2, #32
 800d664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d674:	bf00      	nop
 800d676:	3754      	adds	r7, #84	@ 0x54
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	effffffe 	.word	0xeffffffe

0800d684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d692:	2b01      	cmp	r3, #1
 800d694:	d101      	bne.n	800d69a <HAL_UARTEx_DisableFifoMode+0x16>
 800d696:	2302      	movs	r3, #2
 800d698:	e027      	b.n	800d6ea <HAL_UARTEx_DisableFifoMode+0x66>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2201      	movs	r2, #1
 800d69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2224      	movs	r2, #36	@ 0x24
 800d6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f022 0201 	bic.w	r2, r2, #1
 800d6c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d6c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d706:	2b01      	cmp	r3, #1
 800d708:	d101      	bne.n	800d70e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d70a:	2302      	movs	r3, #2
 800d70c:	e02d      	b.n	800d76a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2224      	movs	r2, #36	@ 0x24
 800d71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f022 0201 	bic.w	r2, r2, #1
 800d734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f850 	bl	800d7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2220      	movs	r2, #32
 800d75c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b084      	sub	sp, #16
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d782:	2b01      	cmp	r3, #1
 800d784:	d101      	bne.n	800d78a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d786:	2302      	movs	r3, #2
 800d788:	e02d      	b.n	800d7e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2224      	movs	r2, #36	@ 0x24
 800d796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f022 0201 	bic.w	r2, r2, #1
 800d7b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	683a      	ldr	r2, [r7, #0]
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f812 	bl	800d7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2220      	movs	r2, #32
 800d7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d108      	bne.n	800d812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d810:	e031      	b.n	800d876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d812:	2310      	movs	r3, #16
 800d814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d816:	2310      	movs	r3, #16
 800d818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	0e5b      	lsrs	r3, r3, #25
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	0f5b      	lsrs	r3, r3, #29
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0307 	and.w	r3, r3, #7
 800d838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d83a:	7bbb      	ldrb	r3, [r7, #14]
 800d83c:	7b3a      	ldrb	r2, [r7, #12]
 800d83e:	4911      	ldr	r1, [pc, #68]	@ (800d884 <UARTEx_SetNbDataToProcess+0x94>)
 800d840:	5c8a      	ldrb	r2, [r1, r2]
 800d842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d846:	7b3a      	ldrb	r2, [r7, #12]
 800d848:	490f      	ldr	r1, [pc, #60]	@ (800d888 <UARTEx_SetNbDataToProcess+0x98>)
 800d84a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d84c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d850:	b29a      	uxth	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	7b7a      	ldrb	r2, [r7, #13]
 800d85c:	4909      	ldr	r1, [pc, #36]	@ (800d884 <UARTEx_SetNbDataToProcess+0x94>)
 800d85e:	5c8a      	ldrb	r2, [r1, r2]
 800d860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d864:	7b7a      	ldrb	r2, [r7, #13]
 800d866:	4908      	ldr	r1, [pc, #32]	@ (800d888 <UARTEx_SetNbDataToProcess+0x98>)
 800d868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d86a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d86e:	b29a      	uxth	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	0800f660 	.word	0x0800f660
 800d888:	0800f668 	.word	0x0800f668

0800d88c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d121      	bne.n	800d8e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b27      	ldr	r3, [pc, #156]	@ (800d940 <FMC_SDRAM_Init+0xb4>)
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	6851      	ldr	r1, [r2, #4]
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	6892      	ldr	r2, [r2, #8]
 800d8ae:	4311      	orrs	r1, r2
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	68d2      	ldr	r2, [r2, #12]
 800d8b4:	4311      	orrs	r1, r2
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	6912      	ldr	r2, [r2, #16]
 800d8ba:	4311      	orrs	r1, r2
 800d8bc:	683a      	ldr	r2, [r7, #0]
 800d8be:	6952      	ldr	r2, [r2, #20]
 800d8c0:	4311      	orrs	r1, r2
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	6992      	ldr	r2, [r2, #24]
 800d8c6:	4311      	orrs	r1, r2
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	69d2      	ldr	r2, [r2, #28]
 800d8cc:	4311      	orrs	r1, r2
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	6a12      	ldr	r2, [r2, #32]
 800d8d2:	4311      	orrs	r1, r2
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	e026      	b.n	800d930 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	69d9      	ldr	r1, [r3, #28]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	6a1b      	ldr	r3, [r3, #32]
 800d8f2:	4319      	orrs	r1, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8f8:	430b      	orrs	r3, r1
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	4b0e      	ldr	r3, [pc, #56]	@ (800d940 <FMC_SDRAM_Init+0xb4>)
 800d906:	4013      	ands	r3, r2
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	6851      	ldr	r1, [r2, #4]
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	6892      	ldr	r2, [r2, #8]
 800d910:	4311      	orrs	r1, r2
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	68d2      	ldr	r2, [r2, #12]
 800d916:	4311      	orrs	r1, r2
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	6912      	ldr	r2, [r2, #16]
 800d91c:	4311      	orrs	r1, r2
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	6952      	ldr	r2, [r2, #20]
 800d922:	4311      	orrs	r1, r2
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	6992      	ldr	r2, [r2, #24]
 800d928:	430a      	orrs	r2, r1
 800d92a:	431a      	orrs	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	ffff8000 	.word	0xffff8000

0800d944 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d128      	bne.n	800d9a8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	1e59      	subs	r1, r3, #1
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	3b01      	subs	r3, #1
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	4319      	orrs	r1, r3
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	3b01      	subs	r3, #1
 800d974:	021b      	lsls	r3, r3, #8
 800d976:	4319      	orrs	r1, r3
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	3b01      	subs	r3, #1
 800d97e:	031b      	lsls	r3, r3, #12
 800d980:	4319      	orrs	r1, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	3b01      	subs	r3, #1
 800d988:	041b      	lsls	r3, r3, #16
 800d98a:	4319      	orrs	r1, r3
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	3b01      	subs	r3, #1
 800d992:	051b      	lsls	r3, r3, #20
 800d994:	4319      	orrs	r1, r3
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	061b      	lsls	r3, r3, #24
 800d99e:	430b      	orrs	r3, r1
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	609a      	str	r2, [r3, #8]
 800d9a6:	e02d      	b.n	800da04 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	4b19      	ldr	r3, [pc, #100]	@ (800da14 <FMC_SDRAM_Timing_Init+0xd0>)
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	68d2      	ldr	r2, [r2, #12]
 800d9b4:	3a01      	subs	r2, #1
 800d9b6:	0311      	lsls	r1, r2, #12
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	6952      	ldr	r2, [r2, #20]
 800d9bc:	3a01      	subs	r2, #1
 800d9be:	0512      	lsls	r2, r2, #20
 800d9c0:	430a      	orrs	r2, r1
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	1e59      	subs	r1, r3, #1
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	011b      	lsls	r3, r3, #4
 800d9de:	4319      	orrs	r1, r3
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	689b      	ldr	r3, [r3, #8]
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	021b      	lsls	r3, r3, #8
 800d9e8:	4319      	orrs	r1, r3
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	041b      	lsls	r3, r3, #16
 800d9f2:	4319      	orrs	r1, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	061b      	lsls	r3, r3, #24
 800d9fc:	430b      	orrs	r3, r1
 800d9fe:	431a      	orrs	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	ff0f0fff 	.word	0xff0f0fff

0800da18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da18:	b084      	sub	sp, #16
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	f107 001c 	add.w	r0, r7, #28
 800da26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d121      	bne.n	800da76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68da      	ldr	r2, [r3, #12]
 800da42:	4b2c      	ldr	r3, [pc, #176]	@ (800daf4 <USB_CoreInit+0xdc>)
 800da44:	4013      	ands	r3, r2
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d105      	bne.n	800da6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 faaa 	bl	800dfc4 <USB_CoreReset>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
 800da74:	e01b      	b.n	800daae <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fa9e 	bl	800dfc4 <USB_CoreReset>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800da90:	2b00      	cmp	r3, #0
 800da92:	d106      	bne.n	800daa2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	639a      	str	r2, [r3, #56]	@ 0x38
 800daa0:	e005      	b.n	800daae <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800daae:	7fbb      	ldrb	r3, [r7, #30]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d116      	bne.n	800dae2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dac2:	4b0d      	ldr	r3, [pc, #52]	@ (800daf8 <USB_CoreInit+0xe0>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f043 0206 	orr.w	r2, r3, #6
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	f043 0220 	orr.w	r2, r3, #32
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daee:	b004      	add	sp, #16
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	ffbdffbf 	.word	0xffbdffbf
 800daf8:	03ee0000 	.word	0x03ee0000

0800dafc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f023 0201 	bic.w	r2, r3, #1
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db3a:	78fb      	ldrb	r3, [r7, #3]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d115      	bne.n	800db6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db4c:	200a      	movs	r0, #10
 800db4e:	f7f6 fa87 	bl	8004060 <HAL_Delay>
      ms += 10U;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	330a      	adds	r3, #10
 800db56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 fa25 	bl	800dfa8 <USB_GetMode>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b01      	cmp	r3, #1
 800db62:	d01e      	beq.n	800dba2 <USB_SetCurrentMode+0x84>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2bc7      	cmp	r3, #199	@ 0xc7
 800db68:	d9f0      	bls.n	800db4c <USB_SetCurrentMode+0x2e>
 800db6a:	e01a      	b.n	800dba2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d115      	bne.n	800db9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db7e:	200a      	movs	r0, #10
 800db80:	f7f6 fa6e 	bl	8004060 <HAL_Delay>
      ms += 10U;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	330a      	adds	r3, #10
 800db88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fa0c 	bl	800dfa8 <USB_GetMode>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d005      	beq.n	800dba2 <USB_SetCurrentMode+0x84>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2bc7      	cmp	r3, #199	@ 0xc7
 800db9a:	d9f0      	bls.n	800db7e <USB_SetCurrentMode+0x60>
 800db9c:	e001      	b.n	800dba2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e005      	b.n	800dbae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2bc8      	cmp	r3, #200	@ 0xc8
 800dba6:	d101      	bne.n	800dbac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbb8:	b084      	sub	sp, #16
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b086      	sub	sp, #24
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dbc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
 800dbd6:	e009      	b.n	800dbec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	3340      	adds	r3, #64	@ 0x40
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	4413      	add	r3, r2
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	613b      	str	r3, [r7, #16]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b0e      	cmp	r3, #14
 800dbf0:	d9f2      	bls.n	800dbd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dbf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d11c      	bne.n	800dc34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc08:	f043 0302 	orr.w	r3, r3, #2
 800dc0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	e005      	b.n	800dc40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc46:	461a      	mov	r2, r3
 800dc48:	2300      	movs	r3, #0
 800dc4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d10d      	bne.n	800dc70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d104      	bne.n	800dc66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f968 	bl	800df34 <USB_SetDevSpeed>
 800dc64:	e008      	b.n	800dc78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc66:	2101      	movs	r1, #1
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f963 	bl	800df34 <USB_SetDevSpeed>
 800dc6e:	e003      	b.n	800dc78 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc70:	2103      	movs	r1, #3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f95e 	bl	800df34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc78:	2110      	movs	r1, #16
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f8fa 	bl	800de74 <USB_FlushTxFifo>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f924 	bl	800ded8 <USB_FlushRxFifo>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dca0:	461a      	mov	r2, r3
 800dca2:	2300      	movs	r3, #0
 800dca4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcac:	461a      	mov	r2, r3
 800dcae:	2300      	movs	r3, #0
 800dcb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	613b      	str	r3, [r7, #16]
 800dcc2:	e043      	b.n	800dd4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dcd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcda:	d118      	bne.n	800dd0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10a      	bne.n	800dcf8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	015a      	lsls	r2, r3, #5
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	e013      	b.n	800dd20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	015a      	lsls	r2, r3, #5
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	4413      	add	r3, r2
 800dd00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd04:	461a      	mov	r2, r3
 800dd06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	e008      	b.n	800dd20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	015a      	lsls	r2, r3, #5
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	4413      	add	r3, r2
 800dd16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	2300      	movs	r3, #0
 800dd30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	015a      	lsls	r2, r3, #5
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	613b      	str	r3, [r7, #16]
 800dd4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd50:	461a      	mov	r2, r3
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d3b5      	bcc.n	800dcc4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd58:	2300      	movs	r3, #0
 800dd5a:	613b      	str	r3, [r7, #16]
 800dd5c:	e043      	b.n	800dde6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	015a      	lsls	r2, r3, #5
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	4413      	add	r3, r2
 800dd66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd74:	d118      	bne.n	800dda8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd8e:	6013      	str	r3, [r2, #0]
 800dd90:	e013      	b.n	800ddba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	015a      	lsls	r2, r3, #5
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4413      	add	r3, r2
 800dd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	e008      	b.n	800ddba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	015a      	lsls	r2, r3, #5
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	2300      	movs	r3, #0
 800ddca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddd8:	461a      	mov	r2, r3
 800ddda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ddde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	3301      	adds	r3, #1
 800dde4:	613b      	str	r3, [r7, #16]
 800dde6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ddea:	461a      	mov	r2, r3
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d3b5      	bcc.n	800dd5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800de12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d105      	bne.n	800de28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	699b      	ldr	r3, [r3, #24]
 800de20:	f043 0210 	orr.w	r2, r3, #16
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	699a      	ldr	r2, [r3, #24]
 800de2c:	4b0f      	ldr	r3, [pc, #60]	@ (800de6c <USB_DevInit+0x2b4>)
 800de2e:	4313      	orrs	r3, r2
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d005      	beq.n	800de48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	f043 0208 	orr.w	r2, r3, #8
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d105      	bne.n	800de5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	699a      	ldr	r2, [r3, #24]
 800de54:	4b06      	ldr	r3, [pc, #24]	@ (800de70 <USB_DevInit+0x2b8>)
 800de56:	4313      	orrs	r3, r2
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de68:	b004      	add	sp, #16
 800de6a:	4770      	bx	lr
 800de6c:	803c3800 	.word	0x803c3800
 800de70:	40000004 	.word	0x40000004

0800de74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3301      	adds	r3, #1
 800de86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de8e:	d901      	bls.n	800de94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	e01b      	b.n	800decc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	daf2      	bge.n	800de82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	019b      	lsls	r3, r3, #6
 800dea4:	f043 0220 	orr.w	r2, r3, #32
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3301      	adds	r3, #1
 800deb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800deb8:	d901      	bls.n	800debe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800deba:	2303      	movs	r3, #3
 800debc:	e006      	b.n	800decc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	691b      	ldr	r3, [r3, #16]
 800dec2:	f003 0320 	and.w	r3, r3, #32
 800dec6:	2b20      	cmp	r3, #32
 800dec8:	d0f0      	beq.n	800deac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dee0:	2300      	movs	r3, #0
 800dee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	3301      	adds	r3, #1
 800dee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800def0:	d901      	bls.n	800def6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800def2:	2303      	movs	r3, #3
 800def4:	e018      	b.n	800df28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	691b      	ldr	r3, [r3, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	daf2      	bge.n	800dee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800defe:	2300      	movs	r3, #0
 800df00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2210      	movs	r2, #16
 800df06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3301      	adds	r3, #1
 800df0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df14:	d901      	bls.n	800df1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df16:	2303      	movs	r3, #3
 800df18:	e006      	b.n	800df28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	691b      	ldr	r3, [r3, #16]
 800df1e:	f003 0310 	and.w	r3, r3, #16
 800df22:	2b10      	cmp	r3, #16
 800df24:	d0f0      	beq.n	800df08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	68f9      	ldr	r1, [r7, #12]
 800df50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df54:	4313      	orrs	r3, r2
 800df56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800df66:	b480      	push	{r7}
 800df68:	b085      	sub	sp, #20
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df80:	f023 0303 	bic.w	r3, r3, #3
 800df84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df94:	f043 0302 	orr.w	r3, r3, #2
 800df98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	695b      	ldr	r3, [r3, #20]
 800dfb4:	f003 0301 	and.w	r3, r3, #1
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfdc:	d901      	bls.n	800dfe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	e01b      	b.n	800e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	daf2      	bge.n	800dfd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dfea:	2300      	movs	r3, #0
 800dfec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	f043 0201 	orr.w	r2, r3, #1
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	3301      	adds	r3, #1
 800dffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e006:	d901      	bls.n	800e00c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e008:	2303      	movs	r3, #3
 800e00a:	e006      	b.n	800e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b01      	cmp	r3, #1
 800e016:	d0f0      	beq.n	800dffa <USB_CoreReset+0x36>

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr
	...

0800e028 <std>:
 800e028:	2300      	movs	r3, #0
 800e02a:	b510      	push	{r4, lr}
 800e02c:	4604      	mov	r4, r0
 800e02e:	e9c0 3300 	strd	r3, r3, [r0]
 800e032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e036:	6083      	str	r3, [r0, #8]
 800e038:	8181      	strh	r1, [r0, #12]
 800e03a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e03c:	81c2      	strh	r2, [r0, #14]
 800e03e:	6183      	str	r3, [r0, #24]
 800e040:	4619      	mov	r1, r3
 800e042:	2208      	movs	r2, #8
 800e044:	305c      	adds	r0, #92	@ 0x5c
 800e046:	f000 f93a 	bl	800e2be <memset>
 800e04a:	4b0d      	ldr	r3, [pc, #52]	@ (800e080 <std+0x58>)
 800e04c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e04e:	4b0d      	ldr	r3, [pc, #52]	@ (800e084 <std+0x5c>)
 800e050:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e052:	4b0d      	ldr	r3, [pc, #52]	@ (800e088 <std+0x60>)
 800e054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e056:	4b0d      	ldr	r3, [pc, #52]	@ (800e08c <std+0x64>)
 800e058:	6323      	str	r3, [r4, #48]	@ 0x30
 800e05a:	4b0d      	ldr	r3, [pc, #52]	@ (800e090 <std+0x68>)
 800e05c:	6224      	str	r4, [r4, #32]
 800e05e:	429c      	cmp	r4, r3
 800e060:	d006      	beq.n	800e070 <std+0x48>
 800e062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e066:	4294      	cmp	r4, r2
 800e068:	d002      	beq.n	800e070 <std+0x48>
 800e06a:	33d0      	adds	r3, #208	@ 0xd0
 800e06c:	429c      	cmp	r4, r3
 800e06e:	d105      	bne.n	800e07c <std+0x54>
 800e070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e078:	f000 b99a 	b.w	800e3b0 <__retarget_lock_init_recursive>
 800e07c:	bd10      	pop	{r4, pc}
 800e07e:	bf00      	nop
 800e080:	0800e239 	.word	0x0800e239
 800e084:	0800e25b 	.word	0x0800e25b
 800e088:	0800e293 	.word	0x0800e293
 800e08c:	0800e2b7 	.word	0x0800e2b7
 800e090:	24000e50 	.word	0x24000e50

0800e094 <stdio_exit_handler>:
 800e094:	4a02      	ldr	r2, [pc, #8]	@ (800e0a0 <stdio_exit_handler+0xc>)
 800e096:	4903      	ldr	r1, [pc, #12]	@ (800e0a4 <stdio_exit_handler+0x10>)
 800e098:	4803      	ldr	r0, [pc, #12]	@ (800e0a8 <stdio_exit_handler+0x14>)
 800e09a:	f000 b869 	b.w	800e170 <_fwalk_sglue>
 800e09e:	bf00      	nop
 800e0a0:	24000010 	.word	0x24000010
 800e0a4:	0800ef1d 	.word	0x0800ef1d
 800e0a8:	24000020 	.word	0x24000020

0800e0ac <cleanup_stdio>:
 800e0ac:	6841      	ldr	r1, [r0, #4]
 800e0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e0e0 <cleanup_stdio+0x34>)
 800e0b0:	4299      	cmp	r1, r3
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	d001      	beq.n	800e0bc <cleanup_stdio+0x10>
 800e0b8:	f000 ff30 	bl	800ef1c <_fflush_r>
 800e0bc:	68a1      	ldr	r1, [r4, #8]
 800e0be:	4b09      	ldr	r3, [pc, #36]	@ (800e0e4 <cleanup_stdio+0x38>)
 800e0c0:	4299      	cmp	r1, r3
 800e0c2:	d002      	beq.n	800e0ca <cleanup_stdio+0x1e>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 ff29 	bl	800ef1c <_fflush_r>
 800e0ca:	68e1      	ldr	r1, [r4, #12]
 800e0cc:	4b06      	ldr	r3, [pc, #24]	@ (800e0e8 <cleanup_stdio+0x3c>)
 800e0ce:	4299      	cmp	r1, r3
 800e0d0:	d004      	beq.n	800e0dc <cleanup_stdio+0x30>
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0d8:	f000 bf20 	b.w	800ef1c <_fflush_r>
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	bf00      	nop
 800e0e0:	24000e50 	.word	0x24000e50
 800e0e4:	24000eb8 	.word	0x24000eb8
 800e0e8:	24000f20 	.word	0x24000f20

0800e0ec <global_stdio_init.part.0>:
 800e0ec:	b510      	push	{r4, lr}
 800e0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e11c <global_stdio_init.part.0+0x30>)
 800e0f0:	4c0b      	ldr	r4, [pc, #44]	@ (800e120 <global_stdio_init.part.0+0x34>)
 800e0f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e124 <global_stdio_init.part.0+0x38>)
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	2104      	movs	r1, #4
 800e0fc:	f7ff ff94 	bl	800e028 <std>
 800e100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e104:	2201      	movs	r2, #1
 800e106:	2109      	movs	r1, #9
 800e108:	f7ff ff8e 	bl	800e028 <std>
 800e10c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e110:	2202      	movs	r2, #2
 800e112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e116:	2112      	movs	r1, #18
 800e118:	f7ff bf86 	b.w	800e028 <std>
 800e11c:	24000f88 	.word	0x24000f88
 800e120:	24000e50 	.word	0x24000e50
 800e124:	0800e095 	.word	0x0800e095

0800e128 <__sfp_lock_acquire>:
 800e128:	4801      	ldr	r0, [pc, #4]	@ (800e130 <__sfp_lock_acquire+0x8>)
 800e12a:	f000 b942 	b.w	800e3b2 <__retarget_lock_acquire_recursive>
 800e12e:	bf00      	nop
 800e130:	24000f91 	.word	0x24000f91

0800e134 <__sfp_lock_release>:
 800e134:	4801      	ldr	r0, [pc, #4]	@ (800e13c <__sfp_lock_release+0x8>)
 800e136:	f000 b93d 	b.w	800e3b4 <__retarget_lock_release_recursive>
 800e13a:	bf00      	nop
 800e13c:	24000f91 	.word	0x24000f91

0800e140 <__sinit>:
 800e140:	b510      	push	{r4, lr}
 800e142:	4604      	mov	r4, r0
 800e144:	f7ff fff0 	bl	800e128 <__sfp_lock_acquire>
 800e148:	6a23      	ldr	r3, [r4, #32]
 800e14a:	b11b      	cbz	r3, 800e154 <__sinit+0x14>
 800e14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e150:	f7ff bff0 	b.w	800e134 <__sfp_lock_release>
 800e154:	4b04      	ldr	r3, [pc, #16]	@ (800e168 <__sinit+0x28>)
 800e156:	6223      	str	r3, [r4, #32]
 800e158:	4b04      	ldr	r3, [pc, #16]	@ (800e16c <__sinit+0x2c>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1f5      	bne.n	800e14c <__sinit+0xc>
 800e160:	f7ff ffc4 	bl	800e0ec <global_stdio_init.part.0>
 800e164:	e7f2      	b.n	800e14c <__sinit+0xc>
 800e166:	bf00      	nop
 800e168:	0800e0ad 	.word	0x0800e0ad
 800e16c:	24000f88 	.word	0x24000f88

0800e170 <_fwalk_sglue>:
 800e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e174:	4607      	mov	r7, r0
 800e176:	4688      	mov	r8, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	2600      	movs	r6, #0
 800e17c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e180:	f1b9 0901 	subs.w	r9, r9, #1
 800e184:	d505      	bpl.n	800e192 <_fwalk_sglue+0x22>
 800e186:	6824      	ldr	r4, [r4, #0]
 800e188:	2c00      	cmp	r4, #0
 800e18a:	d1f7      	bne.n	800e17c <_fwalk_sglue+0xc>
 800e18c:	4630      	mov	r0, r6
 800e18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e192:	89ab      	ldrh	r3, [r5, #12]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d907      	bls.n	800e1a8 <_fwalk_sglue+0x38>
 800e198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e19c:	3301      	adds	r3, #1
 800e19e:	d003      	beq.n	800e1a8 <_fwalk_sglue+0x38>
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	47c0      	blx	r8
 800e1a6:	4306      	orrs	r6, r0
 800e1a8:	3568      	adds	r5, #104	@ 0x68
 800e1aa:	e7e9      	b.n	800e180 <_fwalk_sglue+0x10>

0800e1ac <iprintf>:
 800e1ac:	b40f      	push	{r0, r1, r2, r3}
 800e1ae:	b507      	push	{r0, r1, r2, lr}
 800e1b0:	4906      	ldr	r1, [pc, #24]	@ (800e1cc <iprintf+0x20>)
 800e1b2:	ab04      	add	r3, sp, #16
 800e1b4:	6808      	ldr	r0, [r1, #0]
 800e1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ba:	6881      	ldr	r1, [r0, #8]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	f000 fb83 	bl	800e8c8 <_vfiprintf_r>
 800e1c2:	b003      	add	sp, #12
 800e1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1c8:	b004      	add	sp, #16
 800e1ca:	4770      	bx	lr
 800e1cc:	2400001c 	.word	0x2400001c

0800e1d0 <sniprintf>:
 800e1d0:	b40c      	push	{r2, r3}
 800e1d2:	b530      	push	{r4, r5, lr}
 800e1d4:	4b17      	ldr	r3, [pc, #92]	@ (800e234 <sniprintf+0x64>)
 800e1d6:	1e0c      	subs	r4, r1, #0
 800e1d8:	681d      	ldr	r5, [r3, #0]
 800e1da:	b09d      	sub	sp, #116	@ 0x74
 800e1dc:	da08      	bge.n	800e1f0 <sniprintf+0x20>
 800e1de:	238b      	movs	r3, #139	@ 0x8b
 800e1e0:	602b      	str	r3, [r5, #0]
 800e1e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e6:	b01d      	add	sp, #116	@ 0x74
 800e1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1ec:	b002      	add	sp, #8
 800e1ee:	4770      	bx	lr
 800e1f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e1f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e1f8:	bf14      	ite	ne
 800e1fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e1fe:	4623      	moveq	r3, r4
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	9307      	str	r3, [sp, #28]
 800e204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e208:	9002      	str	r0, [sp, #8]
 800e20a:	9006      	str	r0, [sp, #24]
 800e20c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e210:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e212:	ab21      	add	r3, sp, #132	@ 0x84
 800e214:	a902      	add	r1, sp, #8
 800e216:	4628      	mov	r0, r5
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	f000 fa2f 	bl	800e67c <_svfiprintf_r>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	bfbc      	itt	lt
 800e222:	238b      	movlt	r3, #139	@ 0x8b
 800e224:	602b      	strlt	r3, [r5, #0]
 800e226:	2c00      	cmp	r4, #0
 800e228:	d0dd      	beq.n	800e1e6 <sniprintf+0x16>
 800e22a:	9b02      	ldr	r3, [sp, #8]
 800e22c:	2200      	movs	r2, #0
 800e22e:	701a      	strb	r2, [r3, #0]
 800e230:	e7d9      	b.n	800e1e6 <sniprintf+0x16>
 800e232:	bf00      	nop
 800e234:	2400001c 	.word	0x2400001c

0800e238 <__sread>:
 800e238:	b510      	push	{r4, lr}
 800e23a:	460c      	mov	r4, r1
 800e23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e240:	f000 f868 	bl	800e314 <_read_r>
 800e244:	2800      	cmp	r0, #0
 800e246:	bfab      	itete	ge
 800e248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e24a:	89a3      	ldrhlt	r3, [r4, #12]
 800e24c:	181b      	addge	r3, r3, r0
 800e24e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e252:	bfac      	ite	ge
 800e254:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e256:	81a3      	strhlt	r3, [r4, #12]
 800e258:	bd10      	pop	{r4, pc}

0800e25a <__swrite>:
 800e25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25e:	461f      	mov	r7, r3
 800e260:	898b      	ldrh	r3, [r1, #12]
 800e262:	05db      	lsls	r3, r3, #23
 800e264:	4605      	mov	r5, r0
 800e266:	460c      	mov	r4, r1
 800e268:	4616      	mov	r6, r2
 800e26a:	d505      	bpl.n	800e278 <__swrite+0x1e>
 800e26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e270:	2302      	movs	r3, #2
 800e272:	2200      	movs	r2, #0
 800e274:	f000 f83c 	bl	800e2f0 <_lseek_r>
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e27e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	4632      	mov	r2, r6
 800e286:	463b      	mov	r3, r7
 800e288:	4628      	mov	r0, r5
 800e28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e28e:	f000 b853 	b.w	800e338 <_write_r>

0800e292 <__sseek>:
 800e292:	b510      	push	{r4, lr}
 800e294:	460c      	mov	r4, r1
 800e296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e29a:	f000 f829 	bl	800e2f0 <_lseek_r>
 800e29e:	1c43      	adds	r3, r0, #1
 800e2a0:	89a3      	ldrh	r3, [r4, #12]
 800e2a2:	bf15      	itete	ne
 800e2a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e2a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e2aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2ae:	81a3      	strheq	r3, [r4, #12]
 800e2b0:	bf18      	it	ne
 800e2b2:	81a3      	strhne	r3, [r4, #12]
 800e2b4:	bd10      	pop	{r4, pc}

0800e2b6 <__sclose>:
 800e2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ba:	f000 b809 	b.w	800e2d0 <_close_r>

0800e2be <memset>:
 800e2be:	4402      	add	r2, r0
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d100      	bne.n	800e2c8 <memset+0xa>
 800e2c6:	4770      	bx	lr
 800e2c8:	f803 1b01 	strb.w	r1, [r3], #1
 800e2cc:	e7f9      	b.n	800e2c2 <memset+0x4>
	...

0800e2d0 <_close_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d06      	ldr	r5, [pc, #24]	@ (800e2ec <_close_r+0x1c>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	602b      	str	r3, [r5, #0]
 800e2dc:	f7f5 fd12 	bl	8003d04 <_close>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d102      	bne.n	800e2ea <_close_r+0x1a>
 800e2e4:	682b      	ldr	r3, [r5, #0]
 800e2e6:	b103      	cbz	r3, 800e2ea <_close_r+0x1a>
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	24000f8c 	.word	0x24000f8c

0800e2f0 <_lseek_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	4d07      	ldr	r5, [pc, #28]	@ (800e310 <_lseek_r+0x20>)
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	4608      	mov	r0, r1
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	602a      	str	r2, [r5, #0]
 800e2fe:	461a      	mov	r2, r3
 800e300:	f7f5 fd27 	bl	8003d52 <_lseek>
 800e304:	1c43      	adds	r3, r0, #1
 800e306:	d102      	bne.n	800e30e <_lseek_r+0x1e>
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	b103      	cbz	r3, 800e30e <_lseek_r+0x1e>
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	bd38      	pop	{r3, r4, r5, pc}
 800e310:	24000f8c 	.word	0x24000f8c

0800e314 <_read_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	@ (800e334 <_read_r+0x20>)
 800e318:	4604      	mov	r4, r0
 800e31a:	4608      	mov	r0, r1
 800e31c:	4611      	mov	r1, r2
 800e31e:	2200      	movs	r2, #0
 800e320:	602a      	str	r2, [r5, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	f7f5 fcb5 	bl	8003c92 <_read>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_read_r+0x1e>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_read_r+0x1e>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	24000f8c 	.word	0x24000f8c

0800e338 <_write_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	4d07      	ldr	r5, [pc, #28]	@ (800e358 <_write_r+0x20>)
 800e33c:	4604      	mov	r4, r0
 800e33e:	4608      	mov	r0, r1
 800e340:	4611      	mov	r1, r2
 800e342:	2200      	movs	r2, #0
 800e344:	602a      	str	r2, [r5, #0]
 800e346:	461a      	mov	r2, r3
 800e348:	f7f5 fcc0 	bl	8003ccc <_write>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_write_r+0x1e>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_write_r+0x1e>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	24000f8c 	.word	0x24000f8c

0800e35c <__errno>:
 800e35c:	4b01      	ldr	r3, [pc, #4]	@ (800e364 <__errno+0x8>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	2400001c 	.word	0x2400001c

0800e368 <__libc_init_array>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4d0d      	ldr	r5, [pc, #52]	@ (800e3a0 <__libc_init_array+0x38>)
 800e36c:	4c0d      	ldr	r4, [pc, #52]	@ (800e3a4 <__libc_init_array+0x3c>)
 800e36e:	1b64      	subs	r4, r4, r5
 800e370:	10a4      	asrs	r4, r4, #2
 800e372:	2600      	movs	r6, #0
 800e374:	42a6      	cmp	r6, r4
 800e376:	d109      	bne.n	800e38c <__libc_init_array+0x24>
 800e378:	4d0b      	ldr	r5, [pc, #44]	@ (800e3a8 <__libc_init_array+0x40>)
 800e37a:	4c0c      	ldr	r4, [pc, #48]	@ (800e3ac <__libc_init_array+0x44>)
 800e37c:	f000 ff6e 	bl	800f25c <_init>
 800e380:	1b64      	subs	r4, r4, r5
 800e382:	10a4      	asrs	r4, r4, #2
 800e384:	2600      	movs	r6, #0
 800e386:	42a6      	cmp	r6, r4
 800e388:	d105      	bne.n	800e396 <__libc_init_array+0x2e>
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e390:	4798      	blx	r3
 800e392:	3601      	adds	r6, #1
 800e394:	e7ee      	b.n	800e374 <__libc_init_array+0xc>
 800e396:	f855 3b04 	ldr.w	r3, [r5], #4
 800e39a:	4798      	blx	r3
 800e39c:	3601      	adds	r6, #1
 800e39e:	e7f2      	b.n	800e386 <__libc_init_array+0x1e>
 800e3a0:	0800f6ac 	.word	0x0800f6ac
 800e3a4:	0800f6ac 	.word	0x0800f6ac
 800e3a8:	0800f6ac 	.word	0x0800f6ac
 800e3ac:	0800f6b0 	.word	0x0800f6b0

0800e3b0 <__retarget_lock_init_recursive>:
 800e3b0:	4770      	bx	lr

0800e3b2 <__retarget_lock_acquire_recursive>:
 800e3b2:	4770      	bx	lr

0800e3b4 <__retarget_lock_release_recursive>:
 800e3b4:	4770      	bx	lr

0800e3b6 <memcpy>:
 800e3b6:	440a      	add	r2, r1
 800e3b8:	4291      	cmp	r1, r2
 800e3ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3be:	d100      	bne.n	800e3c2 <memcpy+0xc>
 800e3c0:	4770      	bx	lr
 800e3c2:	b510      	push	{r4, lr}
 800e3c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3cc:	4291      	cmp	r1, r2
 800e3ce:	d1f9      	bne.n	800e3c4 <memcpy+0xe>
 800e3d0:	bd10      	pop	{r4, pc}
	...

0800e3d4 <_free_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	2900      	cmp	r1, #0
 800e3da:	d041      	beq.n	800e460 <_free_r+0x8c>
 800e3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3e0:	1f0c      	subs	r4, r1, #4
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfb8      	it	lt
 800e3e6:	18e4      	addlt	r4, r4, r3
 800e3e8:	f000 f8e0 	bl	800e5ac <__malloc_lock>
 800e3ec:	4a1d      	ldr	r2, [pc, #116]	@ (800e464 <_free_r+0x90>)
 800e3ee:	6813      	ldr	r3, [r2, #0]
 800e3f0:	b933      	cbnz	r3, 800e400 <_free_r+0x2c>
 800e3f2:	6063      	str	r3, [r4, #4]
 800e3f4:	6014      	str	r4, [r2, #0]
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3fc:	f000 b8dc 	b.w	800e5b8 <__malloc_unlock>
 800e400:	42a3      	cmp	r3, r4
 800e402:	d908      	bls.n	800e416 <_free_r+0x42>
 800e404:	6820      	ldr	r0, [r4, #0]
 800e406:	1821      	adds	r1, r4, r0
 800e408:	428b      	cmp	r3, r1
 800e40a:	bf01      	itttt	eq
 800e40c:	6819      	ldreq	r1, [r3, #0]
 800e40e:	685b      	ldreq	r3, [r3, #4]
 800e410:	1809      	addeq	r1, r1, r0
 800e412:	6021      	streq	r1, [r4, #0]
 800e414:	e7ed      	b.n	800e3f2 <_free_r+0x1e>
 800e416:	461a      	mov	r2, r3
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	b10b      	cbz	r3, 800e420 <_free_r+0x4c>
 800e41c:	42a3      	cmp	r3, r4
 800e41e:	d9fa      	bls.n	800e416 <_free_r+0x42>
 800e420:	6811      	ldr	r1, [r2, #0]
 800e422:	1850      	adds	r0, r2, r1
 800e424:	42a0      	cmp	r0, r4
 800e426:	d10b      	bne.n	800e440 <_free_r+0x6c>
 800e428:	6820      	ldr	r0, [r4, #0]
 800e42a:	4401      	add	r1, r0
 800e42c:	1850      	adds	r0, r2, r1
 800e42e:	4283      	cmp	r3, r0
 800e430:	6011      	str	r1, [r2, #0]
 800e432:	d1e0      	bne.n	800e3f6 <_free_r+0x22>
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	6053      	str	r3, [r2, #4]
 800e43a:	4408      	add	r0, r1
 800e43c:	6010      	str	r0, [r2, #0]
 800e43e:	e7da      	b.n	800e3f6 <_free_r+0x22>
 800e440:	d902      	bls.n	800e448 <_free_r+0x74>
 800e442:	230c      	movs	r3, #12
 800e444:	602b      	str	r3, [r5, #0]
 800e446:	e7d6      	b.n	800e3f6 <_free_r+0x22>
 800e448:	6820      	ldr	r0, [r4, #0]
 800e44a:	1821      	adds	r1, r4, r0
 800e44c:	428b      	cmp	r3, r1
 800e44e:	bf04      	itt	eq
 800e450:	6819      	ldreq	r1, [r3, #0]
 800e452:	685b      	ldreq	r3, [r3, #4]
 800e454:	6063      	str	r3, [r4, #4]
 800e456:	bf04      	itt	eq
 800e458:	1809      	addeq	r1, r1, r0
 800e45a:	6021      	streq	r1, [r4, #0]
 800e45c:	6054      	str	r4, [r2, #4]
 800e45e:	e7ca      	b.n	800e3f6 <_free_r+0x22>
 800e460:	bd38      	pop	{r3, r4, r5, pc}
 800e462:	bf00      	nop
 800e464:	24000f98 	.word	0x24000f98

0800e468 <sbrk_aligned>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	4e0f      	ldr	r6, [pc, #60]	@ (800e4a8 <sbrk_aligned+0x40>)
 800e46c:	460c      	mov	r4, r1
 800e46e:	6831      	ldr	r1, [r6, #0]
 800e470:	4605      	mov	r5, r0
 800e472:	b911      	cbnz	r1, 800e47a <sbrk_aligned+0x12>
 800e474:	f000 fe28 	bl	800f0c8 <_sbrk_r>
 800e478:	6030      	str	r0, [r6, #0]
 800e47a:	4621      	mov	r1, r4
 800e47c:	4628      	mov	r0, r5
 800e47e:	f000 fe23 	bl	800f0c8 <_sbrk_r>
 800e482:	1c43      	adds	r3, r0, #1
 800e484:	d103      	bne.n	800e48e <sbrk_aligned+0x26>
 800e486:	f04f 34ff 	mov.w	r4, #4294967295
 800e48a:	4620      	mov	r0, r4
 800e48c:	bd70      	pop	{r4, r5, r6, pc}
 800e48e:	1cc4      	adds	r4, r0, #3
 800e490:	f024 0403 	bic.w	r4, r4, #3
 800e494:	42a0      	cmp	r0, r4
 800e496:	d0f8      	beq.n	800e48a <sbrk_aligned+0x22>
 800e498:	1a21      	subs	r1, r4, r0
 800e49a:	4628      	mov	r0, r5
 800e49c:	f000 fe14 	bl	800f0c8 <_sbrk_r>
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d1f2      	bne.n	800e48a <sbrk_aligned+0x22>
 800e4a4:	e7ef      	b.n	800e486 <sbrk_aligned+0x1e>
 800e4a6:	bf00      	nop
 800e4a8:	24000f94 	.word	0x24000f94

0800e4ac <_malloc_r>:
 800e4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b0:	1ccd      	adds	r5, r1, #3
 800e4b2:	f025 0503 	bic.w	r5, r5, #3
 800e4b6:	3508      	adds	r5, #8
 800e4b8:	2d0c      	cmp	r5, #12
 800e4ba:	bf38      	it	cc
 800e4bc:	250c      	movcc	r5, #12
 800e4be:	2d00      	cmp	r5, #0
 800e4c0:	4606      	mov	r6, r0
 800e4c2:	db01      	blt.n	800e4c8 <_malloc_r+0x1c>
 800e4c4:	42a9      	cmp	r1, r5
 800e4c6:	d904      	bls.n	800e4d2 <_malloc_r+0x26>
 800e4c8:	230c      	movs	r3, #12
 800e4ca:	6033      	str	r3, [r6, #0]
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e5a8 <_malloc_r+0xfc>
 800e4d6:	f000 f869 	bl	800e5ac <__malloc_lock>
 800e4da:	f8d8 3000 	ldr.w	r3, [r8]
 800e4de:	461c      	mov	r4, r3
 800e4e0:	bb44      	cbnz	r4, 800e534 <_malloc_r+0x88>
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f7ff ffbf 	bl	800e468 <sbrk_aligned>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	d158      	bne.n	800e5a2 <_malloc_r+0xf6>
 800e4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800e4f4:	4627      	mov	r7, r4
 800e4f6:	2f00      	cmp	r7, #0
 800e4f8:	d143      	bne.n	800e582 <_malloc_r+0xd6>
 800e4fa:	2c00      	cmp	r4, #0
 800e4fc:	d04b      	beq.n	800e596 <_malloc_r+0xea>
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	4639      	mov	r1, r7
 800e502:	4630      	mov	r0, r6
 800e504:	eb04 0903 	add.w	r9, r4, r3
 800e508:	f000 fdde 	bl	800f0c8 <_sbrk_r>
 800e50c:	4581      	cmp	r9, r0
 800e50e:	d142      	bne.n	800e596 <_malloc_r+0xea>
 800e510:	6821      	ldr	r1, [r4, #0]
 800e512:	1a6d      	subs	r5, r5, r1
 800e514:	4629      	mov	r1, r5
 800e516:	4630      	mov	r0, r6
 800e518:	f7ff ffa6 	bl	800e468 <sbrk_aligned>
 800e51c:	3001      	adds	r0, #1
 800e51e:	d03a      	beq.n	800e596 <_malloc_r+0xea>
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	442b      	add	r3, r5
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	f8d8 3000 	ldr.w	r3, [r8]
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	bb62      	cbnz	r2, 800e588 <_malloc_r+0xdc>
 800e52e:	f8c8 7000 	str.w	r7, [r8]
 800e532:	e00f      	b.n	800e554 <_malloc_r+0xa8>
 800e534:	6822      	ldr	r2, [r4, #0]
 800e536:	1b52      	subs	r2, r2, r5
 800e538:	d420      	bmi.n	800e57c <_malloc_r+0xd0>
 800e53a:	2a0b      	cmp	r2, #11
 800e53c:	d917      	bls.n	800e56e <_malloc_r+0xc2>
 800e53e:	1961      	adds	r1, r4, r5
 800e540:	42a3      	cmp	r3, r4
 800e542:	6025      	str	r5, [r4, #0]
 800e544:	bf18      	it	ne
 800e546:	6059      	strne	r1, [r3, #4]
 800e548:	6863      	ldr	r3, [r4, #4]
 800e54a:	bf08      	it	eq
 800e54c:	f8c8 1000 	streq.w	r1, [r8]
 800e550:	5162      	str	r2, [r4, r5]
 800e552:	604b      	str	r3, [r1, #4]
 800e554:	4630      	mov	r0, r6
 800e556:	f000 f82f 	bl	800e5b8 <__malloc_unlock>
 800e55a:	f104 000b 	add.w	r0, r4, #11
 800e55e:	1d23      	adds	r3, r4, #4
 800e560:	f020 0007 	bic.w	r0, r0, #7
 800e564:	1ac2      	subs	r2, r0, r3
 800e566:	bf1c      	itt	ne
 800e568:	1a1b      	subne	r3, r3, r0
 800e56a:	50a3      	strne	r3, [r4, r2]
 800e56c:	e7af      	b.n	800e4ce <_malloc_r+0x22>
 800e56e:	6862      	ldr	r2, [r4, #4]
 800e570:	42a3      	cmp	r3, r4
 800e572:	bf0c      	ite	eq
 800e574:	f8c8 2000 	streq.w	r2, [r8]
 800e578:	605a      	strne	r2, [r3, #4]
 800e57a:	e7eb      	b.n	800e554 <_malloc_r+0xa8>
 800e57c:	4623      	mov	r3, r4
 800e57e:	6864      	ldr	r4, [r4, #4]
 800e580:	e7ae      	b.n	800e4e0 <_malloc_r+0x34>
 800e582:	463c      	mov	r4, r7
 800e584:	687f      	ldr	r7, [r7, #4]
 800e586:	e7b6      	b.n	800e4f6 <_malloc_r+0x4a>
 800e588:	461a      	mov	r2, r3
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	42a3      	cmp	r3, r4
 800e58e:	d1fb      	bne.n	800e588 <_malloc_r+0xdc>
 800e590:	2300      	movs	r3, #0
 800e592:	6053      	str	r3, [r2, #4]
 800e594:	e7de      	b.n	800e554 <_malloc_r+0xa8>
 800e596:	230c      	movs	r3, #12
 800e598:	6033      	str	r3, [r6, #0]
 800e59a:	4630      	mov	r0, r6
 800e59c:	f000 f80c 	bl	800e5b8 <__malloc_unlock>
 800e5a0:	e794      	b.n	800e4cc <_malloc_r+0x20>
 800e5a2:	6005      	str	r5, [r0, #0]
 800e5a4:	e7d6      	b.n	800e554 <_malloc_r+0xa8>
 800e5a6:	bf00      	nop
 800e5a8:	24000f98 	.word	0x24000f98

0800e5ac <__malloc_lock>:
 800e5ac:	4801      	ldr	r0, [pc, #4]	@ (800e5b4 <__malloc_lock+0x8>)
 800e5ae:	f7ff bf00 	b.w	800e3b2 <__retarget_lock_acquire_recursive>
 800e5b2:	bf00      	nop
 800e5b4:	24000f90 	.word	0x24000f90

0800e5b8 <__malloc_unlock>:
 800e5b8:	4801      	ldr	r0, [pc, #4]	@ (800e5c0 <__malloc_unlock+0x8>)
 800e5ba:	f7ff befb 	b.w	800e3b4 <__retarget_lock_release_recursive>
 800e5be:	bf00      	nop
 800e5c0:	24000f90 	.word	0x24000f90

0800e5c4 <__ssputs_r>:
 800e5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c8:	688e      	ldr	r6, [r1, #8]
 800e5ca:	461f      	mov	r7, r3
 800e5cc:	42be      	cmp	r6, r7
 800e5ce:	680b      	ldr	r3, [r1, #0]
 800e5d0:	4682      	mov	sl, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	4690      	mov	r8, r2
 800e5d6:	d82d      	bhi.n	800e634 <__ssputs_r+0x70>
 800e5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e5e0:	d026      	beq.n	800e630 <__ssputs_r+0x6c>
 800e5e2:	6965      	ldr	r5, [r4, #20]
 800e5e4:	6909      	ldr	r1, [r1, #16]
 800e5e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5ea:	eba3 0901 	sub.w	r9, r3, r1
 800e5ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e5f2:	1c7b      	adds	r3, r7, #1
 800e5f4:	444b      	add	r3, r9
 800e5f6:	106d      	asrs	r5, r5, #1
 800e5f8:	429d      	cmp	r5, r3
 800e5fa:	bf38      	it	cc
 800e5fc:	461d      	movcc	r5, r3
 800e5fe:	0553      	lsls	r3, r2, #21
 800e600:	d527      	bpl.n	800e652 <__ssputs_r+0x8e>
 800e602:	4629      	mov	r1, r5
 800e604:	f7ff ff52 	bl	800e4ac <_malloc_r>
 800e608:	4606      	mov	r6, r0
 800e60a:	b360      	cbz	r0, 800e666 <__ssputs_r+0xa2>
 800e60c:	6921      	ldr	r1, [r4, #16]
 800e60e:	464a      	mov	r2, r9
 800e610:	f7ff fed1 	bl	800e3b6 <memcpy>
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e61e:	81a3      	strh	r3, [r4, #12]
 800e620:	6126      	str	r6, [r4, #16]
 800e622:	6165      	str	r5, [r4, #20]
 800e624:	444e      	add	r6, r9
 800e626:	eba5 0509 	sub.w	r5, r5, r9
 800e62a:	6026      	str	r6, [r4, #0]
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	463e      	mov	r6, r7
 800e630:	42be      	cmp	r6, r7
 800e632:	d900      	bls.n	800e636 <__ssputs_r+0x72>
 800e634:	463e      	mov	r6, r7
 800e636:	6820      	ldr	r0, [r4, #0]
 800e638:	4632      	mov	r2, r6
 800e63a:	4641      	mov	r1, r8
 800e63c:	f000 fd2a 	bl	800f094 <memmove>
 800e640:	68a3      	ldr	r3, [r4, #8]
 800e642:	1b9b      	subs	r3, r3, r6
 800e644:	60a3      	str	r3, [r4, #8]
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	4433      	add	r3, r6
 800e64a:	6023      	str	r3, [r4, #0]
 800e64c:	2000      	movs	r0, #0
 800e64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e652:	462a      	mov	r2, r5
 800e654:	f000 fd48 	bl	800f0e8 <_realloc_r>
 800e658:	4606      	mov	r6, r0
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d1e0      	bne.n	800e620 <__ssputs_r+0x5c>
 800e65e:	6921      	ldr	r1, [r4, #16]
 800e660:	4650      	mov	r0, sl
 800e662:	f7ff feb7 	bl	800e3d4 <_free_r>
 800e666:	230c      	movs	r3, #12
 800e668:	f8ca 3000 	str.w	r3, [sl]
 800e66c:	89a3      	ldrh	r3, [r4, #12]
 800e66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	f04f 30ff 	mov.w	r0, #4294967295
 800e678:	e7e9      	b.n	800e64e <__ssputs_r+0x8a>
	...

0800e67c <_svfiprintf_r>:
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	4698      	mov	r8, r3
 800e682:	898b      	ldrh	r3, [r1, #12]
 800e684:	061b      	lsls	r3, r3, #24
 800e686:	b09d      	sub	sp, #116	@ 0x74
 800e688:	4607      	mov	r7, r0
 800e68a:	460d      	mov	r5, r1
 800e68c:	4614      	mov	r4, r2
 800e68e:	d510      	bpl.n	800e6b2 <_svfiprintf_r+0x36>
 800e690:	690b      	ldr	r3, [r1, #16]
 800e692:	b973      	cbnz	r3, 800e6b2 <_svfiprintf_r+0x36>
 800e694:	2140      	movs	r1, #64	@ 0x40
 800e696:	f7ff ff09 	bl	800e4ac <_malloc_r>
 800e69a:	6028      	str	r0, [r5, #0]
 800e69c:	6128      	str	r0, [r5, #16]
 800e69e:	b930      	cbnz	r0, 800e6ae <_svfiprintf_r+0x32>
 800e6a0:	230c      	movs	r3, #12
 800e6a2:	603b      	str	r3, [r7, #0]
 800e6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a8:	b01d      	add	sp, #116	@ 0x74
 800e6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ae:	2340      	movs	r3, #64	@ 0x40
 800e6b0:	616b      	str	r3, [r5, #20]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6b6:	2320      	movs	r3, #32
 800e6b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6c0:	2330      	movs	r3, #48	@ 0x30
 800e6c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e860 <_svfiprintf_r+0x1e4>
 800e6c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6ca:	f04f 0901 	mov.w	r9, #1
 800e6ce:	4623      	mov	r3, r4
 800e6d0:	469a      	mov	sl, r3
 800e6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d6:	b10a      	cbz	r2, 800e6dc <_svfiprintf_r+0x60>
 800e6d8:	2a25      	cmp	r2, #37	@ 0x25
 800e6da:	d1f9      	bne.n	800e6d0 <_svfiprintf_r+0x54>
 800e6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e6e0:	d00b      	beq.n	800e6fa <_svfiprintf_r+0x7e>
 800e6e2:	465b      	mov	r3, fp
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	f7ff ff6b 	bl	800e5c4 <__ssputs_r>
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	f000 80a7 	beq.w	800e842 <_svfiprintf_r+0x1c6>
 800e6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6f6:	445a      	add	r2, fp
 800e6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f000 809f 	beq.w	800e842 <_svfiprintf_r+0x1c6>
 800e704:	2300      	movs	r3, #0
 800e706:	f04f 32ff 	mov.w	r2, #4294967295
 800e70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e70e:	f10a 0a01 	add.w	sl, sl, #1
 800e712:	9304      	str	r3, [sp, #16]
 800e714:	9307      	str	r3, [sp, #28]
 800e716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e71a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e71c:	4654      	mov	r4, sl
 800e71e:	2205      	movs	r2, #5
 800e720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e724:	484e      	ldr	r0, [pc, #312]	@ (800e860 <_svfiprintf_r+0x1e4>)
 800e726:	f7f1 fde3 	bl	80002f0 <memchr>
 800e72a:	9a04      	ldr	r2, [sp, #16]
 800e72c:	b9d8      	cbnz	r0, 800e766 <_svfiprintf_r+0xea>
 800e72e:	06d0      	lsls	r0, r2, #27
 800e730:	bf44      	itt	mi
 800e732:	2320      	movmi	r3, #32
 800e734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e738:	0711      	lsls	r1, r2, #28
 800e73a:	bf44      	itt	mi
 800e73c:	232b      	movmi	r3, #43	@ 0x2b
 800e73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e742:	f89a 3000 	ldrb.w	r3, [sl]
 800e746:	2b2a      	cmp	r3, #42	@ 0x2a
 800e748:	d015      	beq.n	800e776 <_svfiprintf_r+0xfa>
 800e74a:	9a07      	ldr	r2, [sp, #28]
 800e74c:	4654      	mov	r4, sl
 800e74e:	2000      	movs	r0, #0
 800e750:	f04f 0c0a 	mov.w	ip, #10
 800e754:	4621      	mov	r1, r4
 800e756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e75a:	3b30      	subs	r3, #48	@ 0x30
 800e75c:	2b09      	cmp	r3, #9
 800e75e:	d94b      	bls.n	800e7f8 <_svfiprintf_r+0x17c>
 800e760:	b1b0      	cbz	r0, 800e790 <_svfiprintf_r+0x114>
 800e762:	9207      	str	r2, [sp, #28]
 800e764:	e014      	b.n	800e790 <_svfiprintf_r+0x114>
 800e766:	eba0 0308 	sub.w	r3, r0, r8
 800e76a:	fa09 f303 	lsl.w	r3, r9, r3
 800e76e:	4313      	orrs	r3, r2
 800e770:	9304      	str	r3, [sp, #16]
 800e772:	46a2      	mov	sl, r4
 800e774:	e7d2      	b.n	800e71c <_svfiprintf_r+0xa0>
 800e776:	9b03      	ldr	r3, [sp, #12]
 800e778:	1d19      	adds	r1, r3, #4
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	9103      	str	r1, [sp, #12]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bfbb      	ittet	lt
 800e782:	425b      	neglt	r3, r3
 800e784:	f042 0202 	orrlt.w	r2, r2, #2
 800e788:	9307      	strge	r3, [sp, #28]
 800e78a:	9307      	strlt	r3, [sp, #28]
 800e78c:	bfb8      	it	lt
 800e78e:	9204      	strlt	r2, [sp, #16]
 800e790:	7823      	ldrb	r3, [r4, #0]
 800e792:	2b2e      	cmp	r3, #46	@ 0x2e
 800e794:	d10a      	bne.n	800e7ac <_svfiprintf_r+0x130>
 800e796:	7863      	ldrb	r3, [r4, #1]
 800e798:	2b2a      	cmp	r3, #42	@ 0x2a
 800e79a:	d132      	bne.n	800e802 <_svfiprintf_r+0x186>
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	1d1a      	adds	r2, r3, #4
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	9203      	str	r2, [sp, #12]
 800e7a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7a8:	3402      	adds	r4, #2
 800e7aa:	9305      	str	r3, [sp, #20]
 800e7ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e870 <_svfiprintf_r+0x1f4>
 800e7b0:	7821      	ldrb	r1, [r4, #0]
 800e7b2:	2203      	movs	r2, #3
 800e7b4:	4650      	mov	r0, sl
 800e7b6:	f7f1 fd9b 	bl	80002f0 <memchr>
 800e7ba:	b138      	cbz	r0, 800e7cc <_svfiprintf_r+0x150>
 800e7bc:	9b04      	ldr	r3, [sp, #16]
 800e7be:	eba0 000a 	sub.w	r0, r0, sl
 800e7c2:	2240      	movs	r2, #64	@ 0x40
 800e7c4:	4082      	lsls	r2, r0
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	3401      	adds	r4, #1
 800e7ca:	9304      	str	r3, [sp, #16]
 800e7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7d0:	4824      	ldr	r0, [pc, #144]	@ (800e864 <_svfiprintf_r+0x1e8>)
 800e7d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7d6:	2206      	movs	r2, #6
 800e7d8:	f7f1 fd8a 	bl	80002f0 <memchr>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d036      	beq.n	800e84e <_svfiprintf_r+0x1d2>
 800e7e0:	4b21      	ldr	r3, [pc, #132]	@ (800e868 <_svfiprintf_r+0x1ec>)
 800e7e2:	bb1b      	cbnz	r3, 800e82c <_svfiprintf_r+0x1b0>
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	3307      	adds	r3, #7
 800e7e8:	f023 0307 	bic.w	r3, r3, #7
 800e7ec:	3308      	adds	r3, #8
 800e7ee:	9303      	str	r3, [sp, #12]
 800e7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f2:	4433      	add	r3, r6
 800e7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7f6:	e76a      	b.n	800e6ce <_svfiprintf_r+0x52>
 800e7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	2001      	movs	r0, #1
 800e800:	e7a8      	b.n	800e754 <_svfiprintf_r+0xd8>
 800e802:	2300      	movs	r3, #0
 800e804:	3401      	adds	r4, #1
 800e806:	9305      	str	r3, [sp, #20]
 800e808:	4619      	mov	r1, r3
 800e80a:	f04f 0c0a 	mov.w	ip, #10
 800e80e:	4620      	mov	r0, r4
 800e810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e814:	3a30      	subs	r2, #48	@ 0x30
 800e816:	2a09      	cmp	r2, #9
 800e818:	d903      	bls.n	800e822 <_svfiprintf_r+0x1a6>
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d0c6      	beq.n	800e7ac <_svfiprintf_r+0x130>
 800e81e:	9105      	str	r1, [sp, #20]
 800e820:	e7c4      	b.n	800e7ac <_svfiprintf_r+0x130>
 800e822:	fb0c 2101 	mla	r1, ip, r1, r2
 800e826:	4604      	mov	r4, r0
 800e828:	2301      	movs	r3, #1
 800e82a:	e7f0      	b.n	800e80e <_svfiprintf_r+0x192>
 800e82c:	ab03      	add	r3, sp, #12
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	462a      	mov	r2, r5
 800e832:	4b0e      	ldr	r3, [pc, #56]	@ (800e86c <_svfiprintf_r+0x1f0>)
 800e834:	a904      	add	r1, sp, #16
 800e836:	4638      	mov	r0, r7
 800e838:	f3af 8000 	nop.w
 800e83c:	1c42      	adds	r2, r0, #1
 800e83e:	4606      	mov	r6, r0
 800e840:	d1d6      	bne.n	800e7f0 <_svfiprintf_r+0x174>
 800e842:	89ab      	ldrh	r3, [r5, #12]
 800e844:	065b      	lsls	r3, r3, #25
 800e846:	f53f af2d 	bmi.w	800e6a4 <_svfiprintf_r+0x28>
 800e84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e84c:	e72c      	b.n	800e6a8 <_svfiprintf_r+0x2c>
 800e84e:	ab03      	add	r3, sp, #12
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	462a      	mov	r2, r5
 800e854:	4b05      	ldr	r3, [pc, #20]	@ (800e86c <_svfiprintf_r+0x1f0>)
 800e856:	a904      	add	r1, sp, #16
 800e858:	4638      	mov	r0, r7
 800e85a:	f000 f9bb 	bl	800ebd4 <_printf_i>
 800e85e:	e7ed      	b.n	800e83c <_svfiprintf_r+0x1c0>
 800e860:	0800f670 	.word	0x0800f670
 800e864:	0800f67a 	.word	0x0800f67a
 800e868:	00000000 	.word	0x00000000
 800e86c:	0800e5c5 	.word	0x0800e5c5
 800e870:	0800f676 	.word	0x0800f676

0800e874 <__sfputc_r>:
 800e874:	6893      	ldr	r3, [r2, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	b410      	push	{r4}
 800e87c:	6093      	str	r3, [r2, #8]
 800e87e:	da08      	bge.n	800e892 <__sfputc_r+0x1e>
 800e880:	6994      	ldr	r4, [r2, #24]
 800e882:	42a3      	cmp	r3, r4
 800e884:	db01      	blt.n	800e88a <__sfputc_r+0x16>
 800e886:	290a      	cmp	r1, #10
 800e888:	d103      	bne.n	800e892 <__sfputc_r+0x1e>
 800e88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88e:	f000 bb6d 	b.w	800ef6c <__swbuf_r>
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	7019      	strb	r1, [r3, #0]
 800e89a:	4608      	mov	r0, r1
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <__sfputs_r>:
 800e8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	18d5      	adds	r5, r2, r3
 800e8ac:	42ac      	cmp	r4, r5
 800e8ae:	d101      	bne.n	800e8b4 <__sfputs_r+0x12>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e007      	b.n	800e8c4 <__sfputs_r+0x22>
 800e8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b8:	463a      	mov	r2, r7
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffda 	bl	800e874 <__sfputc_r>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d1f3      	bne.n	800e8ac <__sfputs_r+0xa>
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8c8 <_vfiprintf_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	b09d      	sub	sp, #116	@ 0x74
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	4698      	mov	r8, r3
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	b118      	cbz	r0, 800e8e0 <_vfiprintf_r+0x18>
 800e8d8:	6a03      	ldr	r3, [r0, #32]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <_vfiprintf_r+0x18>
 800e8dc:	f7ff fc30 	bl	800e140 <__sinit>
 800e8e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8e2:	07d9      	lsls	r1, r3, #31
 800e8e4:	d405      	bmi.n	800e8f2 <_vfiprintf_r+0x2a>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	059a      	lsls	r2, r3, #22
 800e8ea:	d402      	bmi.n	800e8f2 <_vfiprintf_r+0x2a>
 800e8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8ee:	f7ff fd60 	bl	800e3b2 <__retarget_lock_acquire_recursive>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	071b      	lsls	r3, r3, #28
 800e8f6:	d501      	bpl.n	800e8fc <_vfiprintf_r+0x34>
 800e8f8:	692b      	ldr	r3, [r5, #16]
 800e8fa:	b99b      	cbnz	r3, 800e924 <_vfiprintf_r+0x5c>
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 fb72 	bl	800efe8 <__swsetup_r>
 800e904:	b170      	cbz	r0, 800e924 <_vfiprintf_r+0x5c>
 800e906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e908:	07dc      	lsls	r4, r3, #31
 800e90a:	d504      	bpl.n	800e916 <_vfiprintf_r+0x4e>
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295
 800e910:	b01d      	add	sp, #116	@ 0x74
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	89ab      	ldrh	r3, [r5, #12]
 800e918:	0598      	lsls	r0, r3, #22
 800e91a:	d4f7      	bmi.n	800e90c <_vfiprintf_r+0x44>
 800e91c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e91e:	f7ff fd49 	bl	800e3b4 <__retarget_lock_release_recursive>
 800e922:	e7f3      	b.n	800e90c <_vfiprintf_r+0x44>
 800e924:	2300      	movs	r3, #0
 800e926:	9309      	str	r3, [sp, #36]	@ 0x24
 800e928:	2320      	movs	r3, #32
 800e92a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e92e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e932:	2330      	movs	r3, #48	@ 0x30
 800e934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eae4 <_vfiprintf_r+0x21c>
 800e938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e93c:	f04f 0901 	mov.w	r9, #1
 800e940:	4623      	mov	r3, r4
 800e942:	469a      	mov	sl, r3
 800e944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e948:	b10a      	cbz	r2, 800e94e <_vfiprintf_r+0x86>
 800e94a:	2a25      	cmp	r2, #37	@ 0x25
 800e94c:	d1f9      	bne.n	800e942 <_vfiprintf_r+0x7a>
 800e94e:	ebba 0b04 	subs.w	fp, sl, r4
 800e952:	d00b      	beq.n	800e96c <_vfiprintf_r+0xa4>
 800e954:	465b      	mov	r3, fp
 800e956:	4622      	mov	r2, r4
 800e958:	4629      	mov	r1, r5
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff ffa1 	bl	800e8a2 <__sfputs_r>
 800e960:	3001      	adds	r0, #1
 800e962:	f000 80a7 	beq.w	800eab4 <_vfiprintf_r+0x1ec>
 800e966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e968:	445a      	add	r2, fp
 800e96a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e96c:	f89a 3000 	ldrb.w	r3, [sl]
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 809f 	beq.w	800eab4 <_vfiprintf_r+0x1ec>
 800e976:	2300      	movs	r3, #0
 800e978:	f04f 32ff 	mov.w	r2, #4294967295
 800e97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e980:	f10a 0a01 	add.w	sl, sl, #1
 800e984:	9304      	str	r3, [sp, #16]
 800e986:	9307      	str	r3, [sp, #28]
 800e988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e98c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e98e:	4654      	mov	r4, sl
 800e990:	2205      	movs	r2, #5
 800e992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e996:	4853      	ldr	r0, [pc, #332]	@ (800eae4 <_vfiprintf_r+0x21c>)
 800e998:	f7f1 fcaa 	bl	80002f0 <memchr>
 800e99c:	9a04      	ldr	r2, [sp, #16]
 800e99e:	b9d8      	cbnz	r0, 800e9d8 <_vfiprintf_r+0x110>
 800e9a0:	06d1      	lsls	r1, r2, #27
 800e9a2:	bf44      	itt	mi
 800e9a4:	2320      	movmi	r3, #32
 800e9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9aa:	0713      	lsls	r3, r2, #28
 800e9ac:	bf44      	itt	mi
 800e9ae:	232b      	movmi	r3, #43	@ 0x2b
 800e9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9ba:	d015      	beq.n	800e9e8 <_vfiprintf_r+0x120>
 800e9bc:	9a07      	ldr	r2, [sp, #28]
 800e9be:	4654      	mov	r4, sl
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f04f 0c0a 	mov.w	ip, #10
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9cc:	3b30      	subs	r3, #48	@ 0x30
 800e9ce:	2b09      	cmp	r3, #9
 800e9d0:	d94b      	bls.n	800ea6a <_vfiprintf_r+0x1a2>
 800e9d2:	b1b0      	cbz	r0, 800ea02 <_vfiprintf_r+0x13a>
 800e9d4:	9207      	str	r2, [sp, #28]
 800e9d6:	e014      	b.n	800ea02 <_vfiprintf_r+0x13a>
 800e9d8:	eba0 0308 	sub.w	r3, r0, r8
 800e9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	46a2      	mov	sl, r4
 800e9e6:	e7d2      	b.n	800e98e <_vfiprintf_r+0xc6>
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	1d19      	adds	r1, r3, #4
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	9103      	str	r1, [sp, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bfbb      	ittet	lt
 800e9f4:	425b      	neglt	r3, r3
 800e9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9fa:	9307      	strge	r3, [sp, #28]
 800e9fc:	9307      	strlt	r3, [sp, #28]
 800e9fe:	bfb8      	it	lt
 800ea00:	9204      	strlt	r2, [sp, #16]
 800ea02:	7823      	ldrb	r3, [r4, #0]
 800ea04:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea06:	d10a      	bne.n	800ea1e <_vfiprintf_r+0x156>
 800ea08:	7863      	ldrb	r3, [r4, #1]
 800ea0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea0c:	d132      	bne.n	800ea74 <_vfiprintf_r+0x1ac>
 800ea0e:	9b03      	ldr	r3, [sp, #12]
 800ea10:	1d1a      	adds	r2, r3, #4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	9203      	str	r2, [sp, #12]
 800ea16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea1a:	3402      	adds	r4, #2
 800ea1c:	9305      	str	r3, [sp, #20]
 800ea1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eaf4 <_vfiprintf_r+0x22c>
 800ea22:	7821      	ldrb	r1, [r4, #0]
 800ea24:	2203      	movs	r2, #3
 800ea26:	4650      	mov	r0, sl
 800ea28:	f7f1 fc62 	bl	80002f0 <memchr>
 800ea2c:	b138      	cbz	r0, 800ea3e <_vfiprintf_r+0x176>
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	eba0 000a 	sub.w	r0, r0, sl
 800ea34:	2240      	movs	r2, #64	@ 0x40
 800ea36:	4082      	lsls	r2, r0
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	3401      	adds	r4, #1
 800ea3c:	9304      	str	r3, [sp, #16]
 800ea3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea42:	4829      	ldr	r0, [pc, #164]	@ (800eae8 <_vfiprintf_r+0x220>)
 800ea44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea48:	2206      	movs	r2, #6
 800ea4a:	f7f1 fc51 	bl	80002f0 <memchr>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d03f      	beq.n	800ead2 <_vfiprintf_r+0x20a>
 800ea52:	4b26      	ldr	r3, [pc, #152]	@ (800eaec <_vfiprintf_r+0x224>)
 800ea54:	bb1b      	cbnz	r3, 800ea9e <_vfiprintf_r+0x1d6>
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	3307      	adds	r3, #7
 800ea5a:	f023 0307 	bic.w	r3, r3, #7
 800ea5e:	3308      	adds	r3, #8
 800ea60:	9303      	str	r3, [sp, #12]
 800ea62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea64:	443b      	add	r3, r7
 800ea66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea68:	e76a      	b.n	800e940 <_vfiprintf_r+0x78>
 800ea6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea6e:	460c      	mov	r4, r1
 800ea70:	2001      	movs	r0, #1
 800ea72:	e7a8      	b.n	800e9c6 <_vfiprintf_r+0xfe>
 800ea74:	2300      	movs	r3, #0
 800ea76:	3401      	adds	r4, #1
 800ea78:	9305      	str	r3, [sp, #20]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f04f 0c0a 	mov.w	ip, #10
 800ea80:	4620      	mov	r0, r4
 800ea82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea86:	3a30      	subs	r2, #48	@ 0x30
 800ea88:	2a09      	cmp	r2, #9
 800ea8a:	d903      	bls.n	800ea94 <_vfiprintf_r+0x1cc>
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0c6      	beq.n	800ea1e <_vfiprintf_r+0x156>
 800ea90:	9105      	str	r1, [sp, #20]
 800ea92:	e7c4      	b.n	800ea1e <_vfiprintf_r+0x156>
 800ea94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea98:	4604      	mov	r4, r0
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e7f0      	b.n	800ea80 <_vfiprintf_r+0x1b8>
 800ea9e:	ab03      	add	r3, sp, #12
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	462a      	mov	r2, r5
 800eaa4:	4b12      	ldr	r3, [pc, #72]	@ (800eaf0 <_vfiprintf_r+0x228>)
 800eaa6:	a904      	add	r1, sp, #16
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f3af 8000 	nop.w
 800eaae:	4607      	mov	r7, r0
 800eab0:	1c78      	adds	r0, r7, #1
 800eab2:	d1d6      	bne.n	800ea62 <_vfiprintf_r+0x19a>
 800eab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eab6:	07d9      	lsls	r1, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_vfiprintf_r+0x1fe>
 800eaba:	89ab      	ldrh	r3, [r5, #12]
 800eabc:	059a      	lsls	r2, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_vfiprintf_r+0x1fe>
 800eac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eac2:	f7ff fc77 	bl	800e3b4 <__retarget_lock_release_recursive>
 800eac6:	89ab      	ldrh	r3, [r5, #12]
 800eac8:	065b      	lsls	r3, r3, #25
 800eaca:	f53f af1f 	bmi.w	800e90c <_vfiprintf_r+0x44>
 800eace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ead0:	e71e      	b.n	800e910 <_vfiprintf_r+0x48>
 800ead2:	ab03      	add	r3, sp, #12
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	462a      	mov	r2, r5
 800ead8:	4b05      	ldr	r3, [pc, #20]	@ (800eaf0 <_vfiprintf_r+0x228>)
 800eada:	a904      	add	r1, sp, #16
 800eadc:	4630      	mov	r0, r6
 800eade:	f000 f879 	bl	800ebd4 <_printf_i>
 800eae2:	e7e4      	b.n	800eaae <_vfiprintf_r+0x1e6>
 800eae4:	0800f670 	.word	0x0800f670
 800eae8:	0800f67a 	.word	0x0800f67a
 800eaec:	00000000 	.word	0x00000000
 800eaf0:	0800e8a3 	.word	0x0800e8a3
 800eaf4:	0800f676 	.word	0x0800f676

0800eaf8 <_printf_common>:
 800eaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eafc:	4616      	mov	r6, r2
 800eafe:	4698      	mov	r8, r3
 800eb00:	688a      	ldr	r2, [r1, #8]
 800eb02:	690b      	ldr	r3, [r1, #16]
 800eb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	bfb8      	it	lt
 800eb0c:	4613      	movlt	r3, r2
 800eb0e:	6033      	str	r3, [r6, #0]
 800eb10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb14:	4607      	mov	r7, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	b10a      	cbz	r2, 800eb1e <_printf_common+0x26>
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	6033      	str	r3, [r6, #0]
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	0699      	lsls	r1, r3, #26
 800eb22:	bf42      	ittt	mi
 800eb24:	6833      	ldrmi	r3, [r6, #0]
 800eb26:	3302      	addmi	r3, #2
 800eb28:	6033      	strmi	r3, [r6, #0]
 800eb2a:	6825      	ldr	r5, [r4, #0]
 800eb2c:	f015 0506 	ands.w	r5, r5, #6
 800eb30:	d106      	bne.n	800eb40 <_printf_common+0x48>
 800eb32:	f104 0a19 	add.w	sl, r4, #25
 800eb36:	68e3      	ldr	r3, [r4, #12]
 800eb38:	6832      	ldr	r2, [r6, #0]
 800eb3a:	1a9b      	subs	r3, r3, r2
 800eb3c:	42ab      	cmp	r3, r5
 800eb3e:	dc26      	bgt.n	800eb8e <_printf_common+0x96>
 800eb40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb44:	6822      	ldr	r2, [r4, #0]
 800eb46:	3b00      	subs	r3, #0
 800eb48:	bf18      	it	ne
 800eb4a:	2301      	movne	r3, #1
 800eb4c:	0692      	lsls	r2, r2, #26
 800eb4e:	d42b      	bmi.n	800eba8 <_printf_common+0xb0>
 800eb50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb54:	4641      	mov	r1, r8
 800eb56:	4638      	mov	r0, r7
 800eb58:	47c8      	blx	r9
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d01e      	beq.n	800eb9c <_printf_common+0xa4>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	6922      	ldr	r2, [r4, #16]
 800eb62:	f003 0306 	and.w	r3, r3, #6
 800eb66:	2b04      	cmp	r3, #4
 800eb68:	bf02      	ittt	eq
 800eb6a:	68e5      	ldreq	r5, [r4, #12]
 800eb6c:	6833      	ldreq	r3, [r6, #0]
 800eb6e:	1aed      	subeq	r5, r5, r3
 800eb70:	68a3      	ldr	r3, [r4, #8]
 800eb72:	bf0c      	ite	eq
 800eb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb78:	2500      	movne	r5, #0
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	bfc4      	itt	gt
 800eb7e:	1a9b      	subgt	r3, r3, r2
 800eb80:	18ed      	addgt	r5, r5, r3
 800eb82:	2600      	movs	r6, #0
 800eb84:	341a      	adds	r4, #26
 800eb86:	42b5      	cmp	r5, r6
 800eb88:	d11a      	bne.n	800ebc0 <_printf_common+0xc8>
 800eb8a:	2000      	movs	r0, #0
 800eb8c:	e008      	b.n	800eba0 <_printf_common+0xa8>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4652      	mov	r2, sl
 800eb92:	4641      	mov	r1, r8
 800eb94:	4638      	mov	r0, r7
 800eb96:	47c8      	blx	r9
 800eb98:	3001      	adds	r0, #1
 800eb9a:	d103      	bne.n	800eba4 <_printf_common+0xac>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba4:	3501      	adds	r5, #1
 800eba6:	e7c6      	b.n	800eb36 <_printf_common+0x3e>
 800eba8:	18e1      	adds	r1, r4, r3
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	2030      	movs	r0, #48	@ 0x30
 800ebae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebb2:	4422      	add	r2, r4
 800ebb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	e7c7      	b.n	800eb50 <_printf_common+0x58>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	4641      	mov	r1, r8
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	47c8      	blx	r9
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d0e6      	beq.n	800eb9c <_printf_common+0xa4>
 800ebce:	3601      	adds	r6, #1
 800ebd0:	e7d9      	b.n	800eb86 <_printf_common+0x8e>
	...

0800ebd4 <_printf_i>:
 800ebd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	7e0f      	ldrb	r7, [r1, #24]
 800ebda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebdc:	2f78      	cmp	r7, #120	@ 0x78
 800ebde:	4691      	mov	r9, r2
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	469a      	mov	sl, r3
 800ebe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebea:	d807      	bhi.n	800ebfc <_printf_i+0x28>
 800ebec:	2f62      	cmp	r7, #98	@ 0x62
 800ebee:	d80a      	bhi.n	800ec06 <_printf_i+0x32>
 800ebf0:	2f00      	cmp	r7, #0
 800ebf2:	f000 80d2 	beq.w	800ed9a <_printf_i+0x1c6>
 800ebf6:	2f58      	cmp	r7, #88	@ 0x58
 800ebf8:	f000 80b9 	beq.w	800ed6e <_printf_i+0x19a>
 800ebfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec04:	e03a      	b.n	800ec7c <_printf_i+0xa8>
 800ec06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec0a:	2b15      	cmp	r3, #21
 800ec0c:	d8f6      	bhi.n	800ebfc <_printf_i+0x28>
 800ec0e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec14 <_printf_i+0x40>)
 800ec10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec14:	0800ec6d 	.word	0x0800ec6d
 800ec18:	0800ec81 	.word	0x0800ec81
 800ec1c:	0800ebfd 	.word	0x0800ebfd
 800ec20:	0800ebfd 	.word	0x0800ebfd
 800ec24:	0800ebfd 	.word	0x0800ebfd
 800ec28:	0800ebfd 	.word	0x0800ebfd
 800ec2c:	0800ec81 	.word	0x0800ec81
 800ec30:	0800ebfd 	.word	0x0800ebfd
 800ec34:	0800ebfd 	.word	0x0800ebfd
 800ec38:	0800ebfd 	.word	0x0800ebfd
 800ec3c:	0800ebfd 	.word	0x0800ebfd
 800ec40:	0800ed81 	.word	0x0800ed81
 800ec44:	0800ecab 	.word	0x0800ecab
 800ec48:	0800ed3b 	.word	0x0800ed3b
 800ec4c:	0800ebfd 	.word	0x0800ebfd
 800ec50:	0800ebfd 	.word	0x0800ebfd
 800ec54:	0800eda3 	.word	0x0800eda3
 800ec58:	0800ebfd 	.word	0x0800ebfd
 800ec5c:	0800ecab 	.word	0x0800ecab
 800ec60:	0800ebfd 	.word	0x0800ebfd
 800ec64:	0800ebfd 	.word	0x0800ebfd
 800ec68:	0800ed43 	.word	0x0800ed43
 800ec6c:	6833      	ldr	r3, [r6, #0]
 800ec6e:	1d1a      	adds	r2, r3, #4
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6032      	str	r2, [r6, #0]
 800ec74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e09d      	b.n	800edbc <_printf_i+0x1e8>
 800ec80:	6833      	ldr	r3, [r6, #0]
 800ec82:	6820      	ldr	r0, [r4, #0]
 800ec84:	1d19      	adds	r1, r3, #4
 800ec86:	6031      	str	r1, [r6, #0]
 800ec88:	0606      	lsls	r6, r0, #24
 800ec8a:	d501      	bpl.n	800ec90 <_printf_i+0xbc>
 800ec8c:	681d      	ldr	r5, [r3, #0]
 800ec8e:	e003      	b.n	800ec98 <_printf_i+0xc4>
 800ec90:	0645      	lsls	r5, r0, #25
 800ec92:	d5fb      	bpl.n	800ec8c <_printf_i+0xb8>
 800ec94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	da03      	bge.n	800eca4 <_printf_i+0xd0>
 800ec9c:	232d      	movs	r3, #45	@ 0x2d
 800ec9e:	426d      	negs	r5, r5
 800eca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eca4:	4859      	ldr	r0, [pc, #356]	@ (800ee0c <_printf_i+0x238>)
 800eca6:	230a      	movs	r3, #10
 800eca8:	e011      	b.n	800ecce <_printf_i+0xfa>
 800ecaa:	6821      	ldr	r1, [r4, #0]
 800ecac:	6833      	ldr	r3, [r6, #0]
 800ecae:	0608      	lsls	r0, r1, #24
 800ecb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecb4:	d402      	bmi.n	800ecbc <_printf_i+0xe8>
 800ecb6:	0649      	lsls	r1, r1, #25
 800ecb8:	bf48      	it	mi
 800ecba:	b2ad      	uxthmi	r5, r5
 800ecbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecbe:	4853      	ldr	r0, [pc, #332]	@ (800ee0c <_printf_i+0x238>)
 800ecc0:	6033      	str	r3, [r6, #0]
 800ecc2:	bf14      	ite	ne
 800ecc4:	230a      	movne	r3, #10
 800ecc6:	2308      	moveq	r3, #8
 800ecc8:	2100      	movs	r1, #0
 800ecca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecce:	6866      	ldr	r6, [r4, #4]
 800ecd0:	60a6      	str	r6, [r4, #8]
 800ecd2:	2e00      	cmp	r6, #0
 800ecd4:	bfa2      	ittt	ge
 800ecd6:	6821      	ldrge	r1, [r4, #0]
 800ecd8:	f021 0104 	bicge.w	r1, r1, #4
 800ecdc:	6021      	strge	r1, [r4, #0]
 800ecde:	b90d      	cbnz	r5, 800ece4 <_printf_i+0x110>
 800ece0:	2e00      	cmp	r6, #0
 800ece2:	d04b      	beq.n	800ed7c <_printf_i+0x1a8>
 800ece4:	4616      	mov	r6, r2
 800ece6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecea:	fb03 5711 	mls	r7, r3, r1, r5
 800ecee:	5dc7      	ldrb	r7, [r0, r7]
 800ecf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecf4:	462f      	mov	r7, r5
 800ecf6:	42bb      	cmp	r3, r7
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	d9f4      	bls.n	800ece6 <_printf_i+0x112>
 800ecfc:	2b08      	cmp	r3, #8
 800ecfe:	d10b      	bne.n	800ed18 <_printf_i+0x144>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	07df      	lsls	r7, r3, #31
 800ed04:	d508      	bpl.n	800ed18 <_printf_i+0x144>
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	6861      	ldr	r1, [r4, #4]
 800ed0a:	4299      	cmp	r1, r3
 800ed0c:	bfde      	ittt	le
 800ed0e:	2330      	movle	r3, #48	@ 0x30
 800ed10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ed18:	1b92      	subs	r2, r2, r6
 800ed1a:	6122      	str	r2, [r4, #16]
 800ed1c:	f8cd a000 	str.w	sl, [sp]
 800ed20:	464b      	mov	r3, r9
 800ed22:	aa03      	add	r2, sp, #12
 800ed24:	4621      	mov	r1, r4
 800ed26:	4640      	mov	r0, r8
 800ed28:	f7ff fee6 	bl	800eaf8 <_printf_common>
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d14a      	bne.n	800edc6 <_printf_i+0x1f2>
 800ed30:	f04f 30ff 	mov.w	r0, #4294967295
 800ed34:	b004      	add	sp, #16
 800ed36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	f043 0320 	orr.w	r3, r3, #32
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	4833      	ldr	r0, [pc, #204]	@ (800ee10 <_printf_i+0x23c>)
 800ed44:	2778      	movs	r7, #120	@ 0x78
 800ed46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	6831      	ldr	r1, [r6, #0]
 800ed4e:	061f      	lsls	r7, r3, #24
 800ed50:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed54:	d402      	bmi.n	800ed5c <_printf_i+0x188>
 800ed56:	065f      	lsls	r7, r3, #25
 800ed58:	bf48      	it	mi
 800ed5a:	b2ad      	uxthmi	r5, r5
 800ed5c:	6031      	str	r1, [r6, #0]
 800ed5e:	07d9      	lsls	r1, r3, #31
 800ed60:	bf44      	itt	mi
 800ed62:	f043 0320 	orrmi.w	r3, r3, #32
 800ed66:	6023      	strmi	r3, [r4, #0]
 800ed68:	b11d      	cbz	r5, 800ed72 <_printf_i+0x19e>
 800ed6a:	2310      	movs	r3, #16
 800ed6c:	e7ac      	b.n	800ecc8 <_printf_i+0xf4>
 800ed6e:	4827      	ldr	r0, [pc, #156]	@ (800ee0c <_printf_i+0x238>)
 800ed70:	e7e9      	b.n	800ed46 <_printf_i+0x172>
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	f023 0320 	bic.w	r3, r3, #32
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	e7f6      	b.n	800ed6a <_printf_i+0x196>
 800ed7c:	4616      	mov	r6, r2
 800ed7e:	e7bd      	b.n	800ecfc <_printf_i+0x128>
 800ed80:	6833      	ldr	r3, [r6, #0]
 800ed82:	6825      	ldr	r5, [r4, #0]
 800ed84:	6961      	ldr	r1, [r4, #20]
 800ed86:	1d18      	adds	r0, r3, #4
 800ed88:	6030      	str	r0, [r6, #0]
 800ed8a:	062e      	lsls	r6, r5, #24
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	d501      	bpl.n	800ed94 <_printf_i+0x1c0>
 800ed90:	6019      	str	r1, [r3, #0]
 800ed92:	e002      	b.n	800ed9a <_printf_i+0x1c6>
 800ed94:	0668      	lsls	r0, r5, #25
 800ed96:	d5fb      	bpl.n	800ed90 <_printf_i+0x1bc>
 800ed98:	8019      	strh	r1, [r3, #0]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	6123      	str	r3, [r4, #16]
 800ed9e:	4616      	mov	r6, r2
 800eda0:	e7bc      	b.n	800ed1c <_printf_i+0x148>
 800eda2:	6833      	ldr	r3, [r6, #0]
 800eda4:	1d1a      	adds	r2, r3, #4
 800eda6:	6032      	str	r2, [r6, #0]
 800eda8:	681e      	ldr	r6, [r3, #0]
 800edaa:	6862      	ldr	r2, [r4, #4]
 800edac:	2100      	movs	r1, #0
 800edae:	4630      	mov	r0, r6
 800edb0:	f7f1 fa9e 	bl	80002f0 <memchr>
 800edb4:	b108      	cbz	r0, 800edba <_printf_i+0x1e6>
 800edb6:	1b80      	subs	r0, r0, r6
 800edb8:	6060      	str	r0, [r4, #4]
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	2300      	movs	r3, #0
 800edc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edc4:	e7aa      	b.n	800ed1c <_printf_i+0x148>
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	4632      	mov	r2, r6
 800edca:	4649      	mov	r1, r9
 800edcc:	4640      	mov	r0, r8
 800edce:	47d0      	blx	sl
 800edd0:	3001      	adds	r0, #1
 800edd2:	d0ad      	beq.n	800ed30 <_printf_i+0x15c>
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	079b      	lsls	r3, r3, #30
 800edd8:	d413      	bmi.n	800ee02 <_printf_i+0x22e>
 800edda:	68e0      	ldr	r0, [r4, #12]
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	4298      	cmp	r0, r3
 800ede0:	bfb8      	it	lt
 800ede2:	4618      	movlt	r0, r3
 800ede4:	e7a6      	b.n	800ed34 <_printf_i+0x160>
 800ede6:	2301      	movs	r3, #1
 800ede8:	4632      	mov	r2, r6
 800edea:	4649      	mov	r1, r9
 800edec:	4640      	mov	r0, r8
 800edee:	47d0      	blx	sl
 800edf0:	3001      	adds	r0, #1
 800edf2:	d09d      	beq.n	800ed30 <_printf_i+0x15c>
 800edf4:	3501      	adds	r5, #1
 800edf6:	68e3      	ldr	r3, [r4, #12]
 800edf8:	9903      	ldr	r1, [sp, #12]
 800edfa:	1a5b      	subs	r3, r3, r1
 800edfc:	42ab      	cmp	r3, r5
 800edfe:	dcf2      	bgt.n	800ede6 <_printf_i+0x212>
 800ee00:	e7eb      	b.n	800edda <_printf_i+0x206>
 800ee02:	2500      	movs	r5, #0
 800ee04:	f104 0619 	add.w	r6, r4, #25
 800ee08:	e7f5      	b.n	800edf6 <_printf_i+0x222>
 800ee0a:	bf00      	nop
 800ee0c:	0800f681 	.word	0x0800f681
 800ee10:	0800f692 	.word	0x0800f692

0800ee14 <__sflush_r>:
 800ee14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	0716      	lsls	r6, r2, #28
 800ee1e:	4605      	mov	r5, r0
 800ee20:	460c      	mov	r4, r1
 800ee22:	d454      	bmi.n	800eece <__sflush_r+0xba>
 800ee24:	684b      	ldr	r3, [r1, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	dc02      	bgt.n	800ee30 <__sflush_r+0x1c>
 800ee2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	dd48      	ble.n	800eec2 <__sflush_r+0xae>
 800ee30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d045      	beq.n	800eec2 <__sflush_r+0xae>
 800ee36:	2300      	movs	r3, #0
 800ee38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee3c:	682f      	ldr	r7, [r5, #0]
 800ee3e:	6a21      	ldr	r1, [r4, #32]
 800ee40:	602b      	str	r3, [r5, #0]
 800ee42:	d030      	beq.n	800eea6 <__sflush_r+0x92>
 800ee44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	0759      	lsls	r1, r3, #29
 800ee4a:	d505      	bpl.n	800ee58 <__sflush_r+0x44>
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	1ad2      	subs	r2, r2, r3
 800ee50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee52:	b10b      	cbz	r3, 800ee58 <__sflush_r+0x44>
 800ee54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee56:	1ad2      	subs	r2, r2, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee5c:	6a21      	ldr	r1, [r4, #32]
 800ee5e:	4628      	mov	r0, r5
 800ee60:	47b0      	blx	r6
 800ee62:	1c43      	adds	r3, r0, #1
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	d106      	bne.n	800ee76 <__sflush_r+0x62>
 800ee68:	6829      	ldr	r1, [r5, #0]
 800ee6a:	291d      	cmp	r1, #29
 800ee6c:	d82b      	bhi.n	800eec6 <__sflush_r+0xb2>
 800ee6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ef18 <__sflush_r+0x104>)
 800ee70:	410a      	asrs	r2, r1
 800ee72:	07d6      	lsls	r6, r2, #31
 800ee74:	d427      	bmi.n	800eec6 <__sflush_r+0xb2>
 800ee76:	2200      	movs	r2, #0
 800ee78:	6062      	str	r2, [r4, #4]
 800ee7a:	04d9      	lsls	r1, r3, #19
 800ee7c:	6922      	ldr	r2, [r4, #16]
 800ee7e:	6022      	str	r2, [r4, #0]
 800ee80:	d504      	bpl.n	800ee8c <__sflush_r+0x78>
 800ee82:	1c42      	adds	r2, r0, #1
 800ee84:	d101      	bne.n	800ee8a <__sflush_r+0x76>
 800ee86:	682b      	ldr	r3, [r5, #0]
 800ee88:	b903      	cbnz	r3, 800ee8c <__sflush_r+0x78>
 800ee8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee8e:	602f      	str	r7, [r5, #0]
 800ee90:	b1b9      	cbz	r1, 800eec2 <__sflush_r+0xae>
 800ee92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee96:	4299      	cmp	r1, r3
 800ee98:	d002      	beq.n	800eea0 <__sflush_r+0x8c>
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f7ff fa9a 	bl	800e3d4 <_free_r>
 800eea0:	2300      	movs	r3, #0
 800eea2:	6363      	str	r3, [r4, #52]	@ 0x34
 800eea4:	e00d      	b.n	800eec2 <__sflush_r+0xae>
 800eea6:	2301      	movs	r3, #1
 800eea8:	4628      	mov	r0, r5
 800eeaa:	47b0      	blx	r6
 800eeac:	4602      	mov	r2, r0
 800eeae:	1c50      	adds	r0, r2, #1
 800eeb0:	d1c9      	bne.n	800ee46 <__sflush_r+0x32>
 800eeb2:	682b      	ldr	r3, [r5, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d0c6      	beq.n	800ee46 <__sflush_r+0x32>
 800eeb8:	2b1d      	cmp	r3, #29
 800eeba:	d001      	beq.n	800eec0 <__sflush_r+0xac>
 800eebc:	2b16      	cmp	r3, #22
 800eebe:	d11e      	bne.n	800eefe <__sflush_r+0xea>
 800eec0:	602f      	str	r7, [r5, #0]
 800eec2:	2000      	movs	r0, #0
 800eec4:	e022      	b.n	800ef0c <__sflush_r+0xf8>
 800eec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeca:	b21b      	sxth	r3, r3
 800eecc:	e01b      	b.n	800ef06 <__sflush_r+0xf2>
 800eece:	690f      	ldr	r7, [r1, #16]
 800eed0:	2f00      	cmp	r7, #0
 800eed2:	d0f6      	beq.n	800eec2 <__sflush_r+0xae>
 800eed4:	0793      	lsls	r3, r2, #30
 800eed6:	680e      	ldr	r6, [r1, #0]
 800eed8:	bf08      	it	eq
 800eeda:	694b      	ldreq	r3, [r1, #20]
 800eedc:	600f      	str	r7, [r1, #0]
 800eede:	bf18      	it	ne
 800eee0:	2300      	movne	r3, #0
 800eee2:	eba6 0807 	sub.w	r8, r6, r7
 800eee6:	608b      	str	r3, [r1, #8]
 800eee8:	f1b8 0f00 	cmp.w	r8, #0
 800eeec:	dde9      	ble.n	800eec2 <__sflush_r+0xae>
 800eeee:	6a21      	ldr	r1, [r4, #32]
 800eef0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eef2:	4643      	mov	r3, r8
 800eef4:	463a      	mov	r2, r7
 800eef6:	4628      	mov	r0, r5
 800eef8:	47b0      	blx	r6
 800eefa:	2800      	cmp	r0, #0
 800eefc:	dc08      	bgt.n	800ef10 <__sflush_r+0xfc>
 800eefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef10:	4407      	add	r7, r0
 800ef12:	eba8 0800 	sub.w	r8, r8, r0
 800ef16:	e7e7      	b.n	800eee8 <__sflush_r+0xd4>
 800ef18:	dfbffffe 	.word	0xdfbffffe

0800ef1c <_fflush_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	690b      	ldr	r3, [r1, #16]
 800ef20:	4605      	mov	r5, r0
 800ef22:	460c      	mov	r4, r1
 800ef24:	b913      	cbnz	r3, 800ef2c <_fflush_r+0x10>
 800ef26:	2500      	movs	r5, #0
 800ef28:	4628      	mov	r0, r5
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	b118      	cbz	r0, 800ef36 <_fflush_r+0x1a>
 800ef2e:	6a03      	ldr	r3, [r0, #32]
 800ef30:	b90b      	cbnz	r3, 800ef36 <_fflush_r+0x1a>
 800ef32:	f7ff f905 	bl	800e140 <__sinit>
 800ef36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0f3      	beq.n	800ef26 <_fflush_r+0xa>
 800ef3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef40:	07d0      	lsls	r0, r2, #31
 800ef42:	d404      	bmi.n	800ef4e <_fflush_r+0x32>
 800ef44:	0599      	lsls	r1, r3, #22
 800ef46:	d402      	bmi.n	800ef4e <_fflush_r+0x32>
 800ef48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef4a:	f7ff fa32 	bl	800e3b2 <__retarget_lock_acquire_recursive>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	4621      	mov	r1, r4
 800ef52:	f7ff ff5f 	bl	800ee14 <__sflush_r>
 800ef56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef58:	07da      	lsls	r2, r3, #31
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	d4e4      	bmi.n	800ef28 <_fflush_r+0xc>
 800ef5e:	89a3      	ldrh	r3, [r4, #12]
 800ef60:	059b      	lsls	r3, r3, #22
 800ef62:	d4e1      	bmi.n	800ef28 <_fflush_r+0xc>
 800ef64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef66:	f7ff fa25 	bl	800e3b4 <__retarget_lock_release_recursive>
 800ef6a:	e7dd      	b.n	800ef28 <_fflush_r+0xc>

0800ef6c <__swbuf_r>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	460e      	mov	r6, r1
 800ef70:	4614      	mov	r4, r2
 800ef72:	4605      	mov	r5, r0
 800ef74:	b118      	cbz	r0, 800ef7e <__swbuf_r+0x12>
 800ef76:	6a03      	ldr	r3, [r0, #32]
 800ef78:	b90b      	cbnz	r3, 800ef7e <__swbuf_r+0x12>
 800ef7a:	f7ff f8e1 	bl	800e140 <__sinit>
 800ef7e:	69a3      	ldr	r3, [r4, #24]
 800ef80:	60a3      	str	r3, [r4, #8]
 800ef82:	89a3      	ldrh	r3, [r4, #12]
 800ef84:	071a      	lsls	r2, r3, #28
 800ef86:	d501      	bpl.n	800ef8c <__swbuf_r+0x20>
 800ef88:	6923      	ldr	r3, [r4, #16]
 800ef8a:	b943      	cbnz	r3, 800ef9e <__swbuf_r+0x32>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f000 f82a 	bl	800efe8 <__swsetup_r>
 800ef94:	b118      	cbz	r0, 800ef9e <__swbuf_r+0x32>
 800ef96:	f04f 37ff 	mov.w	r7, #4294967295
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	6922      	ldr	r2, [r4, #16]
 800efa2:	1a98      	subs	r0, r3, r2
 800efa4:	6963      	ldr	r3, [r4, #20]
 800efa6:	b2f6      	uxtb	r6, r6
 800efa8:	4283      	cmp	r3, r0
 800efaa:	4637      	mov	r7, r6
 800efac:	dc05      	bgt.n	800efba <__swbuf_r+0x4e>
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	f7ff ffb3 	bl	800ef1c <_fflush_r>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d1ed      	bne.n	800ef96 <__swbuf_r+0x2a>
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	60a3      	str	r3, [r4, #8]
 800efc0:	6823      	ldr	r3, [r4, #0]
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	6022      	str	r2, [r4, #0]
 800efc6:	701e      	strb	r6, [r3, #0]
 800efc8:	6962      	ldr	r2, [r4, #20]
 800efca:	1c43      	adds	r3, r0, #1
 800efcc:	429a      	cmp	r2, r3
 800efce:	d004      	beq.n	800efda <__swbuf_r+0x6e>
 800efd0:	89a3      	ldrh	r3, [r4, #12]
 800efd2:	07db      	lsls	r3, r3, #31
 800efd4:	d5e1      	bpl.n	800ef9a <__swbuf_r+0x2e>
 800efd6:	2e0a      	cmp	r6, #10
 800efd8:	d1df      	bne.n	800ef9a <__swbuf_r+0x2e>
 800efda:	4621      	mov	r1, r4
 800efdc:	4628      	mov	r0, r5
 800efde:	f7ff ff9d 	bl	800ef1c <_fflush_r>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d0d9      	beq.n	800ef9a <__swbuf_r+0x2e>
 800efe6:	e7d6      	b.n	800ef96 <__swbuf_r+0x2a>

0800efe8 <__swsetup_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4b29      	ldr	r3, [pc, #164]	@ (800f090 <__swsetup_r+0xa8>)
 800efec:	4605      	mov	r5, r0
 800efee:	6818      	ldr	r0, [r3, #0]
 800eff0:	460c      	mov	r4, r1
 800eff2:	b118      	cbz	r0, 800effc <__swsetup_r+0x14>
 800eff4:	6a03      	ldr	r3, [r0, #32]
 800eff6:	b90b      	cbnz	r3, 800effc <__swsetup_r+0x14>
 800eff8:	f7ff f8a2 	bl	800e140 <__sinit>
 800effc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f000:	0719      	lsls	r1, r3, #28
 800f002:	d422      	bmi.n	800f04a <__swsetup_r+0x62>
 800f004:	06da      	lsls	r2, r3, #27
 800f006:	d407      	bmi.n	800f018 <__swsetup_r+0x30>
 800f008:	2209      	movs	r2, #9
 800f00a:	602a      	str	r2, [r5, #0]
 800f00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f010:	81a3      	strh	r3, [r4, #12]
 800f012:	f04f 30ff 	mov.w	r0, #4294967295
 800f016:	e033      	b.n	800f080 <__swsetup_r+0x98>
 800f018:	0758      	lsls	r0, r3, #29
 800f01a:	d512      	bpl.n	800f042 <__swsetup_r+0x5a>
 800f01c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f01e:	b141      	cbz	r1, 800f032 <__swsetup_r+0x4a>
 800f020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f024:	4299      	cmp	r1, r3
 800f026:	d002      	beq.n	800f02e <__swsetup_r+0x46>
 800f028:	4628      	mov	r0, r5
 800f02a:	f7ff f9d3 	bl	800e3d4 <_free_r>
 800f02e:	2300      	movs	r3, #0
 800f030:	6363      	str	r3, [r4, #52]	@ 0x34
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f038:	81a3      	strh	r3, [r4, #12]
 800f03a:	2300      	movs	r3, #0
 800f03c:	6063      	str	r3, [r4, #4]
 800f03e:	6923      	ldr	r3, [r4, #16]
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	89a3      	ldrh	r3, [r4, #12]
 800f044:	f043 0308 	orr.w	r3, r3, #8
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	6923      	ldr	r3, [r4, #16]
 800f04c:	b94b      	cbnz	r3, 800f062 <__swsetup_r+0x7a>
 800f04e:	89a3      	ldrh	r3, [r4, #12]
 800f050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f058:	d003      	beq.n	800f062 <__swsetup_r+0x7a>
 800f05a:	4621      	mov	r1, r4
 800f05c:	4628      	mov	r0, r5
 800f05e:	f000 f897 	bl	800f190 <__smakebuf_r>
 800f062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f066:	f013 0201 	ands.w	r2, r3, #1
 800f06a:	d00a      	beq.n	800f082 <__swsetup_r+0x9a>
 800f06c:	2200      	movs	r2, #0
 800f06e:	60a2      	str	r2, [r4, #8]
 800f070:	6962      	ldr	r2, [r4, #20]
 800f072:	4252      	negs	r2, r2
 800f074:	61a2      	str	r2, [r4, #24]
 800f076:	6922      	ldr	r2, [r4, #16]
 800f078:	b942      	cbnz	r2, 800f08c <__swsetup_r+0xa4>
 800f07a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f07e:	d1c5      	bne.n	800f00c <__swsetup_r+0x24>
 800f080:	bd38      	pop	{r3, r4, r5, pc}
 800f082:	0799      	lsls	r1, r3, #30
 800f084:	bf58      	it	pl
 800f086:	6962      	ldrpl	r2, [r4, #20]
 800f088:	60a2      	str	r2, [r4, #8]
 800f08a:	e7f4      	b.n	800f076 <__swsetup_r+0x8e>
 800f08c:	2000      	movs	r0, #0
 800f08e:	e7f7      	b.n	800f080 <__swsetup_r+0x98>
 800f090:	2400001c 	.word	0x2400001c

0800f094 <memmove>:
 800f094:	4288      	cmp	r0, r1
 800f096:	b510      	push	{r4, lr}
 800f098:	eb01 0402 	add.w	r4, r1, r2
 800f09c:	d902      	bls.n	800f0a4 <memmove+0x10>
 800f09e:	4284      	cmp	r4, r0
 800f0a0:	4623      	mov	r3, r4
 800f0a2:	d807      	bhi.n	800f0b4 <memmove+0x20>
 800f0a4:	1e43      	subs	r3, r0, #1
 800f0a6:	42a1      	cmp	r1, r4
 800f0a8:	d008      	beq.n	800f0bc <memmove+0x28>
 800f0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0b2:	e7f8      	b.n	800f0a6 <memmove+0x12>
 800f0b4:	4402      	add	r2, r0
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	428a      	cmp	r2, r1
 800f0ba:	d100      	bne.n	800f0be <memmove+0x2a>
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0c6:	e7f7      	b.n	800f0b8 <memmove+0x24>

0800f0c8 <_sbrk_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4d06      	ldr	r5, [pc, #24]	@ (800f0e4 <_sbrk_r+0x1c>)
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	602b      	str	r3, [r5, #0]
 800f0d4:	f7f4 fe4a 	bl	8003d6c <_sbrk>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_sbrk_r+0x1a>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_sbrk_r+0x1a>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	24000f8c 	.word	0x24000f8c

0800f0e8 <_realloc_r>:
 800f0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ec:	4680      	mov	r8, r0
 800f0ee:	4615      	mov	r5, r2
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	b921      	cbnz	r1, 800f0fe <_realloc_r+0x16>
 800f0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	f7ff b9d7 	b.w	800e4ac <_malloc_r>
 800f0fe:	b92a      	cbnz	r2, 800f10c <_realloc_r+0x24>
 800f100:	f7ff f968 	bl	800e3d4 <_free_r>
 800f104:	2400      	movs	r4, #0
 800f106:	4620      	mov	r0, r4
 800f108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10c:	f000 f89e 	bl	800f24c <_malloc_usable_size_r>
 800f110:	4285      	cmp	r5, r0
 800f112:	4606      	mov	r6, r0
 800f114:	d802      	bhi.n	800f11c <_realloc_r+0x34>
 800f116:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f11a:	d8f4      	bhi.n	800f106 <_realloc_r+0x1e>
 800f11c:	4629      	mov	r1, r5
 800f11e:	4640      	mov	r0, r8
 800f120:	f7ff f9c4 	bl	800e4ac <_malloc_r>
 800f124:	4607      	mov	r7, r0
 800f126:	2800      	cmp	r0, #0
 800f128:	d0ec      	beq.n	800f104 <_realloc_r+0x1c>
 800f12a:	42b5      	cmp	r5, r6
 800f12c:	462a      	mov	r2, r5
 800f12e:	4621      	mov	r1, r4
 800f130:	bf28      	it	cs
 800f132:	4632      	movcs	r2, r6
 800f134:	f7ff f93f 	bl	800e3b6 <memcpy>
 800f138:	4621      	mov	r1, r4
 800f13a:	4640      	mov	r0, r8
 800f13c:	f7ff f94a 	bl	800e3d4 <_free_r>
 800f140:	463c      	mov	r4, r7
 800f142:	e7e0      	b.n	800f106 <_realloc_r+0x1e>

0800f144 <__swhatbuf_r>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	460c      	mov	r4, r1
 800f148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f14c:	2900      	cmp	r1, #0
 800f14e:	b096      	sub	sp, #88	@ 0x58
 800f150:	4615      	mov	r5, r2
 800f152:	461e      	mov	r6, r3
 800f154:	da0d      	bge.n	800f172 <__swhatbuf_r+0x2e>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f15c:	f04f 0100 	mov.w	r1, #0
 800f160:	bf14      	ite	ne
 800f162:	2340      	movne	r3, #64	@ 0x40
 800f164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f168:	2000      	movs	r0, #0
 800f16a:	6031      	str	r1, [r6, #0]
 800f16c:	602b      	str	r3, [r5, #0]
 800f16e:	b016      	add	sp, #88	@ 0x58
 800f170:	bd70      	pop	{r4, r5, r6, pc}
 800f172:	466a      	mov	r2, sp
 800f174:	f000 f848 	bl	800f208 <_fstat_r>
 800f178:	2800      	cmp	r0, #0
 800f17a:	dbec      	blt.n	800f156 <__swhatbuf_r+0x12>
 800f17c:	9901      	ldr	r1, [sp, #4]
 800f17e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f186:	4259      	negs	r1, r3
 800f188:	4159      	adcs	r1, r3
 800f18a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f18e:	e7eb      	b.n	800f168 <__swhatbuf_r+0x24>

0800f190 <__smakebuf_r>:
 800f190:	898b      	ldrh	r3, [r1, #12]
 800f192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f194:	079d      	lsls	r5, r3, #30
 800f196:	4606      	mov	r6, r0
 800f198:	460c      	mov	r4, r1
 800f19a:	d507      	bpl.n	800f1ac <__smakebuf_r+0x1c>
 800f19c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1a0:	6023      	str	r3, [r4, #0]
 800f1a2:	6123      	str	r3, [r4, #16]
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	6163      	str	r3, [r4, #20]
 800f1a8:	b003      	add	sp, #12
 800f1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ac:	ab01      	add	r3, sp, #4
 800f1ae:	466a      	mov	r2, sp
 800f1b0:	f7ff ffc8 	bl	800f144 <__swhatbuf_r>
 800f1b4:	9f00      	ldr	r7, [sp, #0]
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f7ff f976 	bl	800e4ac <_malloc_r>
 800f1c0:	b948      	cbnz	r0, 800f1d6 <__smakebuf_r+0x46>
 800f1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1c6:	059a      	lsls	r2, r3, #22
 800f1c8:	d4ee      	bmi.n	800f1a8 <__smakebuf_r+0x18>
 800f1ca:	f023 0303 	bic.w	r3, r3, #3
 800f1ce:	f043 0302 	orr.w	r3, r3, #2
 800f1d2:	81a3      	strh	r3, [r4, #12]
 800f1d4:	e7e2      	b.n	800f19c <__smakebuf_r+0xc>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	6020      	str	r0, [r4, #0]
 800f1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f1e6:	b15b      	cbz	r3, 800f200 <__smakebuf_r+0x70>
 800f1e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	f000 f81d 	bl	800f22c <_isatty_r>
 800f1f2:	b128      	cbz	r0, 800f200 <__smakebuf_r+0x70>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	f023 0303 	bic.w	r3, r3, #3
 800f1fa:	f043 0301 	orr.w	r3, r3, #1
 800f1fe:	81a3      	strh	r3, [r4, #12]
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	431d      	orrs	r5, r3
 800f204:	81a5      	strh	r5, [r4, #12]
 800f206:	e7cf      	b.n	800f1a8 <__smakebuf_r+0x18>

0800f208 <_fstat_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	@ (800f228 <_fstat_r+0x20>)
 800f20c:	2300      	movs	r3, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	4608      	mov	r0, r1
 800f212:	4611      	mov	r1, r2
 800f214:	602b      	str	r3, [r5, #0]
 800f216:	f7f4 fd81 	bl	8003d1c <_fstat>
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	d102      	bne.n	800f224 <_fstat_r+0x1c>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	b103      	cbz	r3, 800f224 <_fstat_r+0x1c>
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	bf00      	nop
 800f228:	24000f8c 	.word	0x24000f8c

0800f22c <_isatty_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d06      	ldr	r5, [pc, #24]	@ (800f248 <_isatty_r+0x1c>)
 800f230:	2300      	movs	r3, #0
 800f232:	4604      	mov	r4, r0
 800f234:	4608      	mov	r0, r1
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	f7f4 fd80 	bl	8003d3c <_isatty>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_isatty_r+0x1a>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_isatty_r+0x1a>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	24000f8c 	.word	0x24000f8c

0800f24c <_malloc_usable_size_r>:
 800f24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f250:	1f18      	subs	r0, r3, #4
 800f252:	2b00      	cmp	r3, #0
 800f254:	bfbc      	itt	lt
 800f256:	580b      	ldrlt	r3, [r1, r0]
 800f258:	18c0      	addlt	r0, r0, r3
 800f25a:	4770      	bx	lr

0800f25c <_init>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	bf00      	nop
 800f260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f262:	bc08      	pop	{r3}
 800f264:	469e      	mov	lr, r3
 800f266:	4770      	bx	lr

0800f268 <_fini>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr
